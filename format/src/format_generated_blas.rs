// Generated automatically by zluda_bindgen
// DO NOT EDIT MANUALLY
#![allow(warnings)]
impl crate::CudaDisplay for cuda_types::cublas::cublasFillMode_t {
    fn write(
        &self,
        _fn_name: &'static str,
        _index: usize,
        writer: &mut (impl std::io::Write + ?Sized),
    ) -> std::io::Result<()> {
        match self {
            &cuda_types::cublas::cublasFillMode_t::CUBLAS_FILL_MODE_LOWER => {
                writer.write_all(stringify!(CUBLAS_FILL_MODE_LOWER).as_bytes())
            }
            &cuda_types::cublas::cublasFillMode_t::CUBLAS_FILL_MODE_UPPER => {
                writer.write_all(stringify!(CUBLAS_FILL_MODE_UPPER).as_bytes())
            }
            &cuda_types::cublas::cublasFillMode_t::CUBLAS_FILL_MODE_FULL => {
                writer.write_all(stringify!(CUBLAS_FILL_MODE_FULL).as_bytes())
            }
            _ => write!(writer, "{}", self.0),
        }
    }
}
impl crate::CudaDisplay for cuda_types::cublas::cublasDiagType_t {
    fn write(
        &self,
        _fn_name: &'static str,
        _index: usize,
        writer: &mut (impl std::io::Write + ?Sized),
    ) -> std::io::Result<()> {
        match self {
            &cuda_types::cublas::cublasDiagType_t::CUBLAS_DIAG_NON_UNIT => {
                writer.write_all(stringify!(CUBLAS_DIAG_NON_UNIT).as_bytes())
            }
            &cuda_types::cublas::cublasDiagType_t::CUBLAS_DIAG_UNIT => {
                writer.write_all(stringify!(CUBLAS_DIAG_UNIT).as_bytes())
            }
            _ => write!(writer, "{}", self.0),
        }
    }
}
impl crate::CudaDisplay for cuda_types::cublas::cublasSideMode_t {
    fn write(
        &self,
        _fn_name: &'static str,
        _index: usize,
        writer: &mut (impl std::io::Write + ?Sized),
    ) -> std::io::Result<()> {
        match self {
            &cuda_types::cublas::cublasSideMode_t::CUBLAS_SIDE_LEFT => {
                writer.write_all(stringify!(CUBLAS_SIDE_LEFT).as_bytes())
            }
            &cuda_types::cublas::cublasSideMode_t::CUBLAS_SIDE_RIGHT => {
                writer.write_all(stringify!(CUBLAS_SIDE_RIGHT).as_bytes())
            }
            _ => write!(writer, "{}", self.0),
        }
    }
}
impl crate::CudaDisplay for cuda_types::cublas::cublasOperation_t {
    fn write(
        &self,
        _fn_name: &'static str,
        _index: usize,
        writer: &mut (impl std::io::Write + ?Sized),
    ) -> std::io::Result<()> {
        match self {
            &cuda_types::cublas::cublasOperation_t::CUBLAS_OP_N => {
                writer.write_all(stringify!(CUBLAS_OP_N).as_bytes())
            }
            &cuda_types::cublas::cublasOperation_t::CUBLAS_OP_T => {
                writer.write_all(stringify!(CUBLAS_OP_T).as_bytes())
            }
            &cuda_types::cublas::cublasOperation_t::CUBLAS_OP_C => {
                writer.write_all(stringify!(CUBLAS_OP_C).as_bytes())
            }
            &cuda_types::cublas::cublasOperation_t::CUBLAS_OP_HERMITAN => {
                writer.write_all(stringify!(CUBLAS_OP_HERMITAN).as_bytes())
            }
            &cuda_types::cublas::cublasOperation_t::CUBLAS_OP_CONJG => {
                writer.write_all(stringify!(CUBLAS_OP_CONJG).as_bytes())
            }
            _ => write!(writer, "{}", self.0),
        }
    }
}
impl crate::CudaDisplay for cuda_types::cublas::cublasPointerMode_t {
    fn write(
        &self,
        _fn_name: &'static str,
        _index: usize,
        writer: &mut (impl std::io::Write + ?Sized),
    ) -> std::io::Result<()> {
        match self {
            &cuda_types::cublas::cublasPointerMode_t::CUBLAS_POINTER_MODE_HOST => {
                writer.write_all(stringify!(CUBLAS_POINTER_MODE_HOST).as_bytes())
            }
            &cuda_types::cublas::cublasPointerMode_t::CUBLAS_POINTER_MODE_DEVICE => {
                writer.write_all(stringify!(CUBLAS_POINTER_MODE_DEVICE).as_bytes())
            }
            _ => write!(writer, "{}", self.0),
        }
    }
}
impl crate::CudaDisplay for cuda_types::cublas::cublasAtomicsMode_t {
    fn write(
        &self,
        _fn_name: &'static str,
        _index: usize,
        writer: &mut (impl std::io::Write + ?Sized),
    ) -> std::io::Result<()> {
        match self {
            &cuda_types::cublas::cublasAtomicsMode_t::CUBLAS_ATOMICS_NOT_ALLOWED => {
                writer.write_all(stringify!(CUBLAS_ATOMICS_NOT_ALLOWED).as_bytes())
            }
            &cuda_types::cublas::cublasAtomicsMode_t::CUBLAS_ATOMICS_ALLOWED => {
                writer.write_all(stringify!(CUBLAS_ATOMICS_ALLOWED).as_bytes())
            }
            _ => write!(writer, "{}", self.0),
        }
    }
}
impl crate::CudaDisplay for cuda_types::cublas::cublasGemmAlgo_t {
    fn write(
        &self,
        _fn_name: &'static str,
        _index: usize,
        writer: &mut (impl std::io::Write + ?Sized),
    ) -> std::io::Result<()> {
        match self {
            &cuda_types::cublas::cublasGemmAlgo_t::CUBLAS_GEMM_DFALT => {
                writer.write_all(stringify!(CUBLAS_GEMM_DFALT).as_bytes())
            }
            &cuda_types::cublas::cublasGemmAlgo_t::CUBLAS_GEMM_DEFAULT => {
                writer.write_all(stringify!(CUBLAS_GEMM_DEFAULT).as_bytes())
            }
            &cuda_types::cublas::cublasGemmAlgo_t::CUBLAS_GEMM_ALGO0 => {
                writer.write_all(stringify!(CUBLAS_GEMM_ALGO0).as_bytes())
            }
            &cuda_types::cublas::cublasGemmAlgo_t::CUBLAS_GEMM_ALGO1 => {
                writer.write_all(stringify!(CUBLAS_GEMM_ALGO1).as_bytes())
            }
            &cuda_types::cublas::cublasGemmAlgo_t::CUBLAS_GEMM_ALGO2 => {
                writer.write_all(stringify!(CUBLAS_GEMM_ALGO2).as_bytes())
            }
            &cuda_types::cublas::cublasGemmAlgo_t::CUBLAS_GEMM_ALGO3 => {
                writer.write_all(stringify!(CUBLAS_GEMM_ALGO3).as_bytes())
            }
            &cuda_types::cublas::cublasGemmAlgo_t::CUBLAS_GEMM_ALGO4 => {
                writer.write_all(stringify!(CUBLAS_GEMM_ALGO4).as_bytes())
            }
            &cuda_types::cublas::cublasGemmAlgo_t::CUBLAS_GEMM_ALGO5 => {
                writer.write_all(stringify!(CUBLAS_GEMM_ALGO5).as_bytes())
            }
            &cuda_types::cublas::cublasGemmAlgo_t::CUBLAS_GEMM_ALGO6 => {
                writer.write_all(stringify!(CUBLAS_GEMM_ALGO6).as_bytes())
            }
            &cuda_types::cublas::cublasGemmAlgo_t::CUBLAS_GEMM_ALGO7 => {
                writer.write_all(stringify!(CUBLAS_GEMM_ALGO7).as_bytes())
            }
            &cuda_types::cublas::cublasGemmAlgo_t::CUBLAS_GEMM_ALGO8 => {
                writer.write_all(stringify!(CUBLAS_GEMM_ALGO8).as_bytes())
            }
            &cuda_types::cublas::cublasGemmAlgo_t::CUBLAS_GEMM_ALGO9 => {
                writer.write_all(stringify!(CUBLAS_GEMM_ALGO9).as_bytes())
            }
            &cuda_types::cublas::cublasGemmAlgo_t::CUBLAS_GEMM_ALGO10 => {
                writer.write_all(stringify!(CUBLAS_GEMM_ALGO10).as_bytes())
            }
            &cuda_types::cublas::cublasGemmAlgo_t::CUBLAS_GEMM_ALGO11 => {
                writer.write_all(stringify!(CUBLAS_GEMM_ALGO11).as_bytes())
            }
            &cuda_types::cublas::cublasGemmAlgo_t::CUBLAS_GEMM_ALGO12 => {
                writer.write_all(stringify!(CUBLAS_GEMM_ALGO12).as_bytes())
            }
            &cuda_types::cublas::cublasGemmAlgo_t::CUBLAS_GEMM_ALGO13 => {
                writer.write_all(stringify!(CUBLAS_GEMM_ALGO13).as_bytes())
            }
            &cuda_types::cublas::cublasGemmAlgo_t::CUBLAS_GEMM_ALGO14 => {
                writer.write_all(stringify!(CUBLAS_GEMM_ALGO14).as_bytes())
            }
            &cuda_types::cublas::cublasGemmAlgo_t::CUBLAS_GEMM_ALGO15 => {
                writer.write_all(stringify!(CUBLAS_GEMM_ALGO15).as_bytes())
            }
            &cuda_types::cublas::cublasGemmAlgo_t::CUBLAS_GEMM_ALGO16 => {
                writer.write_all(stringify!(CUBLAS_GEMM_ALGO16).as_bytes())
            }
            &cuda_types::cublas::cublasGemmAlgo_t::CUBLAS_GEMM_ALGO17 => {
                writer.write_all(stringify!(CUBLAS_GEMM_ALGO17).as_bytes())
            }
            &cuda_types::cublas::cublasGemmAlgo_t::CUBLAS_GEMM_ALGO18 => {
                writer.write_all(stringify!(CUBLAS_GEMM_ALGO18).as_bytes())
            }
            &cuda_types::cublas::cublasGemmAlgo_t::CUBLAS_GEMM_ALGO19 => {
                writer.write_all(stringify!(CUBLAS_GEMM_ALGO19).as_bytes())
            }
            &cuda_types::cublas::cublasGemmAlgo_t::CUBLAS_GEMM_ALGO20 => {
                writer.write_all(stringify!(CUBLAS_GEMM_ALGO20).as_bytes())
            }
            &cuda_types::cublas::cublasGemmAlgo_t::CUBLAS_GEMM_ALGO21 => {
                writer.write_all(stringify!(CUBLAS_GEMM_ALGO21).as_bytes())
            }
            &cuda_types::cublas::cublasGemmAlgo_t::CUBLAS_GEMM_ALGO22 => {
                writer.write_all(stringify!(CUBLAS_GEMM_ALGO22).as_bytes())
            }
            &cuda_types::cublas::cublasGemmAlgo_t::CUBLAS_GEMM_ALGO23 => {
                writer.write_all(stringify!(CUBLAS_GEMM_ALGO23).as_bytes())
            }
            &cuda_types::cublas::cublasGemmAlgo_t::CUBLAS_GEMM_DEFAULT_TENSOR_OP => {
                writer.write_all(stringify!(CUBLAS_GEMM_DEFAULT_TENSOR_OP).as_bytes())
            }
            &cuda_types::cublas::cublasGemmAlgo_t::CUBLAS_GEMM_DFALT_TENSOR_OP => {
                writer.write_all(stringify!(CUBLAS_GEMM_DFALT_TENSOR_OP).as_bytes())
            }
            &cuda_types::cublas::cublasGemmAlgo_t::CUBLAS_GEMM_ALGO0_TENSOR_OP => {
                writer.write_all(stringify!(CUBLAS_GEMM_ALGO0_TENSOR_OP).as_bytes())
            }
            &cuda_types::cublas::cublasGemmAlgo_t::CUBLAS_GEMM_ALGO1_TENSOR_OP => {
                writer.write_all(stringify!(CUBLAS_GEMM_ALGO1_TENSOR_OP).as_bytes())
            }
            &cuda_types::cublas::cublasGemmAlgo_t::CUBLAS_GEMM_ALGO2_TENSOR_OP => {
                writer.write_all(stringify!(CUBLAS_GEMM_ALGO2_TENSOR_OP).as_bytes())
            }
            &cuda_types::cublas::cublasGemmAlgo_t::CUBLAS_GEMM_ALGO3_TENSOR_OP => {
                writer.write_all(stringify!(CUBLAS_GEMM_ALGO3_TENSOR_OP).as_bytes())
            }
            &cuda_types::cublas::cublasGemmAlgo_t::CUBLAS_GEMM_ALGO4_TENSOR_OP => {
                writer.write_all(stringify!(CUBLAS_GEMM_ALGO4_TENSOR_OP).as_bytes())
            }
            &cuda_types::cublas::cublasGemmAlgo_t::CUBLAS_GEMM_ALGO5_TENSOR_OP => {
                writer.write_all(stringify!(CUBLAS_GEMM_ALGO5_TENSOR_OP).as_bytes())
            }
            &cuda_types::cublas::cublasGemmAlgo_t::CUBLAS_GEMM_ALGO6_TENSOR_OP => {
                writer.write_all(stringify!(CUBLAS_GEMM_ALGO6_TENSOR_OP).as_bytes())
            }
            &cuda_types::cublas::cublasGemmAlgo_t::CUBLAS_GEMM_ALGO7_TENSOR_OP => {
                writer.write_all(stringify!(CUBLAS_GEMM_ALGO7_TENSOR_OP).as_bytes())
            }
            &cuda_types::cublas::cublasGemmAlgo_t::CUBLAS_GEMM_ALGO8_TENSOR_OP => {
                writer.write_all(stringify!(CUBLAS_GEMM_ALGO8_TENSOR_OP).as_bytes())
            }
            &cuda_types::cublas::cublasGemmAlgo_t::CUBLAS_GEMM_ALGO9_TENSOR_OP => {
                writer.write_all(stringify!(CUBLAS_GEMM_ALGO9_TENSOR_OP).as_bytes())
            }
            &cuda_types::cublas::cublasGemmAlgo_t::CUBLAS_GEMM_ALGO10_TENSOR_OP => {
                writer.write_all(stringify!(CUBLAS_GEMM_ALGO10_TENSOR_OP).as_bytes())
            }
            &cuda_types::cublas::cublasGemmAlgo_t::CUBLAS_GEMM_ALGO11_TENSOR_OP => {
                writer.write_all(stringify!(CUBLAS_GEMM_ALGO11_TENSOR_OP).as_bytes())
            }
            &cuda_types::cublas::cublasGemmAlgo_t::CUBLAS_GEMM_ALGO12_TENSOR_OP => {
                writer.write_all(stringify!(CUBLAS_GEMM_ALGO12_TENSOR_OP).as_bytes())
            }
            &cuda_types::cublas::cublasGemmAlgo_t::CUBLAS_GEMM_ALGO13_TENSOR_OP => {
                writer.write_all(stringify!(CUBLAS_GEMM_ALGO13_TENSOR_OP).as_bytes())
            }
            &cuda_types::cublas::cublasGemmAlgo_t::CUBLAS_GEMM_ALGO14_TENSOR_OP => {
                writer.write_all(stringify!(CUBLAS_GEMM_ALGO14_TENSOR_OP).as_bytes())
            }
            &cuda_types::cublas::cublasGemmAlgo_t::CUBLAS_GEMM_ALGO15_TENSOR_OP => {
                writer.write_all(stringify!(CUBLAS_GEMM_ALGO15_TENSOR_OP).as_bytes())
            }
            _ => write!(writer, "{}", self.0),
        }
    }
}
impl crate::CudaDisplay for cuda_types::cublas::cublasMath_t {
    fn write(
        &self,
        _fn_name: &'static str,
        _index: usize,
        writer: &mut (impl std::io::Write + ?Sized),
    ) -> std::io::Result<()> {
        match self {
            &cuda_types::cublas::cublasMath_t::CUBLAS_DEFAULT_MATH => {
                writer.write_all(stringify!(CUBLAS_DEFAULT_MATH).as_bytes())
            }
            &cuda_types::cublas::cublasMath_t::CUBLAS_TENSOR_OP_MATH => {
                writer.write_all(stringify!(CUBLAS_TENSOR_OP_MATH).as_bytes())
            }
            &cuda_types::cublas::cublasMath_t::CUBLAS_PEDANTIC_MATH => {
                writer.write_all(stringify!(CUBLAS_PEDANTIC_MATH).as_bytes())
            }
            &cuda_types::cublas::cublasMath_t::CUBLAS_TF32_TENSOR_OP_MATH => {
                writer.write_all(stringify!(CUBLAS_TF32_TENSOR_OP_MATH).as_bytes())
            }
            &cuda_types::cublas::cublasMath_t::CUBLAS_MATH_DISALLOW_REDUCED_PRECISION_REDUCTION => {
                writer
                    .write_all(
                        stringify!(CUBLAS_MATH_DISALLOW_REDUCED_PRECISION_REDUCTION)
                            .as_bytes(),
                    )
            }
            _ => write!(writer, "{}", self.0),
        }
    }
}
impl crate::CudaDisplay for cuda_types::cublas::cublasComputeType_t {
    fn write(
        &self,
        _fn_name: &'static str,
        _index: usize,
        writer: &mut (impl std::io::Write + ?Sized),
    ) -> std::io::Result<()> {
        match self {
            &cuda_types::cublas::cublasComputeType_t::CUBLAS_COMPUTE_16F => {
                writer.write_all(stringify!(CUBLAS_COMPUTE_16F).as_bytes())
            }
            &cuda_types::cublas::cublasComputeType_t::CUBLAS_COMPUTE_16F_PEDANTIC => {
                writer.write_all(stringify!(CUBLAS_COMPUTE_16F_PEDANTIC).as_bytes())
            }
            &cuda_types::cublas::cublasComputeType_t::CUBLAS_COMPUTE_32F => {
                writer.write_all(stringify!(CUBLAS_COMPUTE_32F).as_bytes())
            }
            &cuda_types::cublas::cublasComputeType_t::CUBLAS_COMPUTE_32F_PEDANTIC => {
                writer.write_all(stringify!(CUBLAS_COMPUTE_32F_PEDANTIC).as_bytes())
            }
            &cuda_types::cublas::cublasComputeType_t::CUBLAS_COMPUTE_32F_FAST_16F => {
                writer.write_all(stringify!(CUBLAS_COMPUTE_32F_FAST_16F).as_bytes())
            }
            &cuda_types::cublas::cublasComputeType_t::CUBLAS_COMPUTE_32F_FAST_16BF => {
                writer.write_all(stringify!(CUBLAS_COMPUTE_32F_FAST_16BF).as_bytes())
            }
            &cuda_types::cublas::cublasComputeType_t::CUBLAS_COMPUTE_32F_FAST_TF32 => {
                writer.write_all(stringify!(CUBLAS_COMPUTE_32F_FAST_TF32).as_bytes())
            }
            &cuda_types::cublas::cublasComputeType_t::CUBLAS_COMPUTE_64F => {
                writer.write_all(stringify!(CUBLAS_COMPUTE_64F).as_bytes())
            }
            &cuda_types::cublas::cublasComputeType_t::CUBLAS_COMPUTE_64F_PEDANTIC => {
                writer.write_all(stringify!(CUBLAS_COMPUTE_64F_PEDANTIC).as_bytes())
            }
            &cuda_types::cublas::cublasComputeType_t::CUBLAS_COMPUTE_32I => {
                writer.write_all(stringify!(CUBLAS_COMPUTE_32I).as_bytes())
            }
            &cuda_types::cublas::cublasComputeType_t::CUBLAS_COMPUTE_32I_PEDANTIC => {
                writer.write_all(stringify!(CUBLAS_COMPUTE_32I_PEDANTIC).as_bytes())
            }
            _ => write!(writer, "{}", self.0),
        }
    }
}
impl crate::CudaDisplay for cuda_types::cublas::cublasHandle_t {
    fn write(
        &self,
        _fn_name: &'static str,
        _index: usize,
        writer: &mut (impl std::io::Write + ?Sized),
    ) -> std::io::Result<()> {
        write!(writer, "{:p}", self.0)
    }
}
pub fn write_cublasCreate_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: *mut cuda_types::cublas::cublasHandle_t,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasCreate_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasDestroy_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasDestroy_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasGetVersion_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    version: *mut ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasGetVersion_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(version), ": ").as_bytes())?;
    crate::CudaDisplay::write(&version, "cublasGetVersion_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasGetProperty(
    writer: &mut (impl std::io::Write + ?Sized),
    type_: cuda_types::cublas::libraryPropertyType,
    value: *mut ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(type_), ": ").as_bytes())?;
    crate::CudaDisplay::write(&type_, "cublasGetProperty", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(value), ": ").as_bytes())?;
    crate::CudaDisplay::write(&value, "cublasGetProperty", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasGetCudartVersion(
    writer: &mut (impl std::io::Write + ?Sized),
) -> std::io::Result<()> {
    writer.write_all(b"()")
}
pub fn write_cublasSetWorkspace_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    workspace: *mut ::core::ffi::c_void,
    workspaceSizeInBytes: usize,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasSetWorkspace_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(workspace), ": ").as_bytes())?;
    crate::CudaDisplay::write(&workspace, "cublasSetWorkspace_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(workspaceSizeInBytes), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &workspaceSizeInBytes,
        "cublasSetWorkspace_v2",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cublasSetStream_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    streamId: cuda_types::cublas::cudaStream_t,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasSetStream_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(streamId), ": ").as_bytes())?;
    crate::CudaDisplay::write(&streamId, "cublasSetStream_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasGetStream_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    streamId: *mut cuda_types::cublas::cudaStream_t,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasGetStream_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(streamId), ": ").as_bytes())?;
    crate::CudaDisplay::write(&streamId, "cublasGetStream_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasGetPointerMode_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    mode: *mut cuda_types::cublas::cublasPointerMode_t,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasGetPointerMode_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(mode), ": ").as_bytes())?;
    crate::CudaDisplay::write(&mode, "cublasGetPointerMode_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasSetPointerMode_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    mode: cuda_types::cublas::cublasPointerMode_t,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasSetPointerMode_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(mode), ": ").as_bytes())?;
    crate::CudaDisplay::write(&mode, "cublasSetPointerMode_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasGetAtomicsMode(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    mode: *mut cuda_types::cublas::cublasAtomicsMode_t,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasGetAtomicsMode", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(mode), ": ").as_bytes())?;
    crate::CudaDisplay::write(&mode, "cublasGetAtomicsMode", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasSetAtomicsMode(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    mode: cuda_types::cublas::cublasAtomicsMode_t,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasSetAtomicsMode", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(mode), ": ").as_bytes())?;
    crate::CudaDisplay::write(&mode, "cublasSetAtomicsMode", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasGetMathMode(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    mode: *mut cuda_types::cublas::cublasMath_t,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasGetMathMode", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(mode), ": ").as_bytes())?;
    crate::CudaDisplay::write(&mode, "cublasGetMathMode", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasSetMathMode(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    mode: cuda_types::cublas::cublasMath_t,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasSetMathMode", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(mode), ": ").as_bytes())?;
    crate::CudaDisplay::write(&mode, "cublasSetMathMode", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasGetSmCountTarget(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    smCountTarget: *mut ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasGetSmCountTarget", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(smCountTarget), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &smCountTarget,
        "cublasGetSmCountTarget",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cublasSetSmCountTarget(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    smCountTarget: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasSetSmCountTarget", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(smCountTarget), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &smCountTarget,
        "cublasSetSmCountTarget",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cublasGetStatusName(
    writer: &mut (impl std::io::Write + ?Sized),
    status: cuda_types::cublas::cublasStatus_t,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(status), ": ").as_bytes())?;
    crate::CudaDisplay::write(&status, "cublasGetStatusName", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasGetStatusString(
    writer: &mut (impl std::io::Write + ?Sized),
    status: cuda_types::cublas::cublasStatus_t,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(status), ": ").as_bytes())?;
    crate::CudaDisplay::write(&status, "cublasGetStatusString", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasLoggerConfigure(
    writer: &mut (impl std::io::Write + ?Sized),
    logIsOn: ::core::ffi::c_int,
    logToStdOut: ::core::ffi::c_int,
    logToStdErr: ::core::ffi::c_int,
    logFileName: *const ::core::ffi::c_char,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(logIsOn), ": ").as_bytes())?;
    crate::CudaDisplay::write(&logIsOn, "cublasLoggerConfigure", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(logToStdOut), ": ").as_bytes())?;
    crate::CudaDisplay::write(&logToStdOut, "cublasLoggerConfigure", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(logToStdErr), ": ").as_bytes())?;
    crate::CudaDisplay::write(&logToStdErr, "cublasLoggerConfigure", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(logFileName), ": ").as_bytes())?;
    crate::CudaDisplay::write(&logFileName, "cublasLoggerConfigure", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasSetLoggerCallback(
    writer: &mut (impl std::io::Write + ?Sized),
    userCallback: cuda_types::cublas::cublasLogCallback,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(userCallback), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &userCallback,
        "cublasSetLoggerCallback",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cublasGetLoggerCallback(
    writer: &mut (impl std::io::Write + ?Sized),
    userCallback: *mut cuda_types::cublas::cublasLogCallback,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(userCallback), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &userCallback,
        "cublasGetLoggerCallback",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cublasSetVector(
    writer: &mut (impl std::io::Write + ?Sized),
    n: ::core::ffi::c_int,
    elemSize: ::core::ffi::c_int,
    x: *const ::core::ffi::c_void,
    incx: ::core::ffi::c_int,
    devicePtr: *mut ::core::ffi::c_void,
    incy: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasSetVector", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(elemSize), ": ").as_bytes())?;
    crate::CudaDisplay::write(&elemSize, "cublasSetVector", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasSetVector", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasSetVector", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(devicePtr), ": ").as_bytes())?;
    crate::CudaDisplay::write(&devicePtr, "cublasSetVector", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasSetVector", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasSetVector_64(
    writer: &mut (impl std::io::Write + ?Sized),
    n: i64,
    elemSize: i64,
    x: *const ::core::ffi::c_void,
    incx: i64,
    devicePtr: *mut ::core::ffi::c_void,
    incy: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasSetVector_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(elemSize), ": ").as_bytes())?;
    crate::CudaDisplay::write(&elemSize, "cublasSetVector_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasSetVector_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasSetVector_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(devicePtr), ": ").as_bytes())?;
    crate::CudaDisplay::write(&devicePtr, "cublasSetVector_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasSetVector_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasGetVector(
    writer: &mut (impl std::io::Write + ?Sized),
    n: ::core::ffi::c_int,
    elemSize: ::core::ffi::c_int,
    x: *const ::core::ffi::c_void,
    incx: ::core::ffi::c_int,
    y: *mut ::core::ffi::c_void,
    incy: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasGetVector", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(elemSize), ": ").as_bytes())?;
    crate::CudaDisplay::write(&elemSize, "cublasGetVector", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasGetVector", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasGetVector", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasGetVector", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasGetVector", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasGetVector_64(
    writer: &mut (impl std::io::Write + ?Sized),
    n: i64,
    elemSize: i64,
    x: *const ::core::ffi::c_void,
    incx: i64,
    y: *mut ::core::ffi::c_void,
    incy: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasGetVector_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(elemSize), ": ").as_bytes())?;
    crate::CudaDisplay::write(&elemSize, "cublasGetVector_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasGetVector_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasGetVector_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasGetVector_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasGetVector_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasSetMatrix(
    writer: &mut (impl std::io::Write + ?Sized),
    rows: ::core::ffi::c_int,
    cols: ::core::ffi::c_int,
    elemSize: ::core::ffi::c_int,
    A: *const ::core::ffi::c_void,
    lda: ::core::ffi::c_int,
    B: *mut ::core::ffi::c_void,
    ldb: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(rows), ": ").as_bytes())?;
    crate::CudaDisplay::write(&rows, "cublasSetMatrix", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(cols), ": ").as_bytes())?;
    crate::CudaDisplay::write(&cols, "cublasSetMatrix", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(elemSize), ": ").as_bytes())?;
    crate::CudaDisplay::write(&elemSize, "cublasSetMatrix", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasSetMatrix", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasSetMatrix", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(B), ": ").as_bytes())?;
    crate::CudaDisplay::write(&B, "cublasSetMatrix", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cublasSetMatrix", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasSetMatrix_64(
    writer: &mut (impl std::io::Write + ?Sized),
    rows: i64,
    cols: i64,
    elemSize: i64,
    A: *const ::core::ffi::c_void,
    lda: i64,
    B: *mut ::core::ffi::c_void,
    ldb: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(rows), ": ").as_bytes())?;
    crate::CudaDisplay::write(&rows, "cublasSetMatrix_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(cols), ": ").as_bytes())?;
    crate::CudaDisplay::write(&cols, "cublasSetMatrix_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(elemSize), ": ").as_bytes())?;
    crate::CudaDisplay::write(&elemSize, "cublasSetMatrix_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasSetMatrix_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasSetMatrix_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(B), ": ").as_bytes())?;
    crate::CudaDisplay::write(&B, "cublasSetMatrix_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cublasSetMatrix_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasGetMatrix(
    writer: &mut (impl std::io::Write + ?Sized),
    rows: ::core::ffi::c_int,
    cols: ::core::ffi::c_int,
    elemSize: ::core::ffi::c_int,
    A: *const ::core::ffi::c_void,
    lda: ::core::ffi::c_int,
    B: *mut ::core::ffi::c_void,
    ldb: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(rows), ": ").as_bytes())?;
    crate::CudaDisplay::write(&rows, "cublasGetMatrix", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(cols), ": ").as_bytes())?;
    crate::CudaDisplay::write(&cols, "cublasGetMatrix", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(elemSize), ": ").as_bytes())?;
    crate::CudaDisplay::write(&elemSize, "cublasGetMatrix", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasGetMatrix", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasGetMatrix", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(B), ": ").as_bytes())?;
    crate::CudaDisplay::write(&B, "cublasGetMatrix", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cublasGetMatrix", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasGetMatrix_64(
    writer: &mut (impl std::io::Write + ?Sized),
    rows: i64,
    cols: i64,
    elemSize: i64,
    A: *const ::core::ffi::c_void,
    lda: i64,
    B: *mut ::core::ffi::c_void,
    ldb: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(rows), ": ").as_bytes())?;
    crate::CudaDisplay::write(&rows, "cublasGetMatrix_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(cols), ": ").as_bytes())?;
    crate::CudaDisplay::write(&cols, "cublasGetMatrix_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(elemSize), ": ").as_bytes())?;
    crate::CudaDisplay::write(&elemSize, "cublasGetMatrix_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasGetMatrix_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasGetMatrix_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(B), ": ").as_bytes())?;
    crate::CudaDisplay::write(&B, "cublasGetMatrix_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cublasGetMatrix_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasSetVectorAsync(
    writer: &mut (impl std::io::Write + ?Sized),
    n: ::core::ffi::c_int,
    elemSize: ::core::ffi::c_int,
    hostPtr: *const ::core::ffi::c_void,
    incx: ::core::ffi::c_int,
    devicePtr: *mut ::core::ffi::c_void,
    incy: ::core::ffi::c_int,
    stream: cuda_types::cublas::cudaStream_t,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasSetVectorAsync", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(elemSize), ": ").as_bytes())?;
    crate::CudaDisplay::write(&elemSize, "cublasSetVectorAsync", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(hostPtr), ": ").as_bytes())?;
    crate::CudaDisplay::write(&hostPtr, "cublasSetVectorAsync", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasSetVectorAsync", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(devicePtr), ": ").as_bytes())?;
    crate::CudaDisplay::write(&devicePtr, "cublasSetVectorAsync", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasSetVectorAsync", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(stream), ": ").as_bytes())?;
    crate::CudaDisplay::write(&stream, "cublasSetVectorAsync", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasSetVectorAsync_64(
    writer: &mut (impl std::io::Write + ?Sized),
    n: i64,
    elemSize: i64,
    hostPtr: *const ::core::ffi::c_void,
    incx: i64,
    devicePtr: *mut ::core::ffi::c_void,
    incy: i64,
    stream: cuda_types::cublas::cudaStream_t,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasSetVectorAsync_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(elemSize), ": ").as_bytes())?;
    crate::CudaDisplay::write(&elemSize, "cublasSetVectorAsync_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(hostPtr), ": ").as_bytes())?;
    crate::CudaDisplay::write(&hostPtr, "cublasSetVectorAsync_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasSetVectorAsync_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(devicePtr), ": ").as_bytes())?;
    crate::CudaDisplay::write(&devicePtr, "cublasSetVectorAsync_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasSetVectorAsync_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(stream), ": ").as_bytes())?;
    crate::CudaDisplay::write(&stream, "cublasSetVectorAsync_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasGetVectorAsync(
    writer: &mut (impl std::io::Write + ?Sized),
    n: ::core::ffi::c_int,
    elemSize: ::core::ffi::c_int,
    devicePtr: *const ::core::ffi::c_void,
    incx: ::core::ffi::c_int,
    hostPtr: *mut ::core::ffi::c_void,
    incy: ::core::ffi::c_int,
    stream: cuda_types::cublas::cudaStream_t,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasGetVectorAsync", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(elemSize), ": ").as_bytes())?;
    crate::CudaDisplay::write(&elemSize, "cublasGetVectorAsync", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(devicePtr), ": ").as_bytes())?;
    crate::CudaDisplay::write(&devicePtr, "cublasGetVectorAsync", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasGetVectorAsync", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(hostPtr), ": ").as_bytes())?;
    crate::CudaDisplay::write(&hostPtr, "cublasGetVectorAsync", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasGetVectorAsync", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(stream), ": ").as_bytes())?;
    crate::CudaDisplay::write(&stream, "cublasGetVectorAsync", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasGetVectorAsync_64(
    writer: &mut (impl std::io::Write + ?Sized),
    n: i64,
    elemSize: i64,
    devicePtr: *const ::core::ffi::c_void,
    incx: i64,
    hostPtr: *mut ::core::ffi::c_void,
    incy: i64,
    stream: cuda_types::cublas::cudaStream_t,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasGetVectorAsync_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(elemSize), ": ").as_bytes())?;
    crate::CudaDisplay::write(&elemSize, "cublasGetVectorAsync_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(devicePtr), ": ").as_bytes())?;
    crate::CudaDisplay::write(&devicePtr, "cublasGetVectorAsync_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasGetVectorAsync_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(hostPtr), ": ").as_bytes())?;
    crate::CudaDisplay::write(&hostPtr, "cublasGetVectorAsync_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasGetVectorAsync_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(stream), ": ").as_bytes())?;
    crate::CudaDisplay::write(&stream, "cublasGetVectorAsync_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasSetMatrixAsync(
    writer: &mut (impl std::io::Write + ?Sized),
    rows: ::core::ffi::c_int,
    cols: ::core::ffi::c_int,
    elemSize: ::core::ffi::c_int,
    A: *const ::core::ffi::c_void,
    lda: ::core::ffi::c_int,
    B: *mut ::core::ffi::c_void,
    ldb: ::core::ffi::c_int,
    stream: cuda_types::cublas::cudaStream_t,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(rows), ": ").as_bytes())?;
    crate::CudaDisplay::write(&rows, "cublasSetMatrixAsync", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(cols), ": ").as_bytes())?;
    crate::CudaDisplay::write(&cols, "cublasSetMatrixAsync", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(elemSize), ": ").as_bytes())?;
    crate::CudaDisplay::write(&elemSize, "cublasSetMatrixAsync", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasSetMatrixAsync", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasSetMatrixAsync", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(B), ": ").as_bytes())?;
    crate::CudaDisplay::write(&B, "cublasSetMatrixAsync", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cublasSetMatrixAsync", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(stream), ": ").as_bytes())?;
    crate::CudaDisplay::write(&stream, "cublasSetMatrixAsync", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasSetMatrixAsync_64(
    writer: &mut (impl std::io::Write + ?Sized),
    rows: i64,
    cols: i64,
    elemSize: i64,
    A: *const ::core::ffi::c_void,
    lda: i64,
    B: *mut ::core::ffi::c_void,
    ldb: i64,
    stream: cuda_types::cublas::cudaStream_t,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(rows), ": ").as_bytes())?;
    crate::CudaDisplay::write(&rows, "cublasSetMatrixAsync_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(cols), ": ").as_bytes())?;
    crate::CudaDisplay::write(&cols, "cublasSetMatrixAsync_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(elemSize), ": ").as_bytes())?;
    crate::CudaDisplay::write(&elemSize, "cublasSetMatrixAsync_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasSetMatrixAsync_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasSetMatrixAsync_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(B), ": ").as_bytes())?;
    crate::CudaDisplay::write(&B, "cublasSetMatrixAsync_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cublasSetMatrixAsync_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(stream), ": ").as_bytes())?;
    crate::CudaDisplay::write(&stream, "cublasSetMatrixAsync_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasGetMatrixAsync(
    writer: &mut (impl std::io::Write + ?Sized),
    rows: ::core::ffi::c_int,
    cols: ::core::ffi::c_int,
    elemSize: ::core::ffi::c_int,
    A: *const ::core::ffi::c_void,
    lda: ::core::ffi::c_int,
    B: *mut ::core::ffi::c_void,
    ldb: ::core::ffi::c_int,
    stream: cuda_types::cublas::cudaStream_t,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(rows), ": ").as_bytes())?;
    crate::CudaDisplay::write(&rows, "cublasGetMatrixAsync", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(cols), ": ").as_bytes())?;
    crate::CudaDisplay::write(&cols, "cublasGetMatrixAsync", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(elemSize), ": ").as_bytes())?;
    crate::CudaDisplay::write(&elemSize, "cublasGetMatrixAsync", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasGetMatrixAsync", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasGetMatrixAsync", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(B), ": ").as_bytes())?;
    crate::CudaDisplay::write(&B, "cublasGetMatrixAsync", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cublasGetMatrixAsync", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(stream), ": ").as_bytes())?;
    crate::CudaDisplay::write(&stream, "cublasGetMatrixAsync", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasGetMatrixAsync_64(
    writer: &mut (impl std::io::Write + ?Sized),
    rows: i64,
    cols: i64,
    elemSize: i64,
    A: *const ::core::ffi::c_void,
    lda: i64,
    B: *mut ::core::ffi::c_void,
    ldb: i64,
    stream: cuda_types::cublas::cudaStream_t,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(rows), ": ").as_bytes())?;
    crate::CudaDisplay::write(&rows, "cublasGetMatrixAsync_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(cols), ": ").as_bytes())?;
    crate::CudaDisplay::write(&cols, "cublasGetMatrixAsync_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(elemSize), ": ").as_bytes())?;
    crate::CudaDisplay::write(&elemSize, "cublasGetMatrixAsync_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasGetMatrixAsync_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasGetMatrixAsync_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(B), ": ").as_bytes())?;
    crate::CudaDisplay::write(&B, "cublasGetMatrixAsync_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cublasGetMatrixAsync_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(stream), ": ").as_bytes())?;
    crate::CudaDisplay::write(&stream, "cublasGetMatrixAsync_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasXerbla(
    writer: &mut (impl std::io::Write + ?Sized),
    srName: *const ::core::ffi::c_char,
    info: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(srName), ": ").as_bytes())?;
    crate::CudaDisplay::write(&srName, "cublasXerbla", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cublasXerbla", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasNrm2Ex(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    n: ::core::ffi::c_int,
    x: *const ::core::ffi::c_void,
    xType: cuda_types::cublas::cudaDataType,
    incx: ::core::ffi::c_int,
    result: *mut ::core::ffi::c_void,
    resultType: cuda_types::cublas::cudaDataType,
    executionType: cuda_types::cublas::cudaDataType,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasNrm2Ex", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasNrm2Ex", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasNrm2Ex", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(xType), ": ").as_bytes())?;
    crate::CudaDisplay::write(&xType, "cublasNrm2Ex", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasNrm2Ex", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(result), ": ").as_bytes())?;
    crate::CudaDisplay::write(&result, "cublasNrm2Ex", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(resultType), ": ").as_bytes())?;
    crate::CudaDisplay::write(&resultType, "cublasNrm2Ex", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(executionType), ": ").as_bytes())?;
    crate::CudaDisplay::write(&executionType, "cublasNrm2Ex", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasNrm2Ex_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    n: i64,
    x: *const ::core::ffi::c_void,
    xType: cuda_types::cublas::cudaDataType,
    incx: i64,
    result: *mut ::core::ffi::c_void,
    resultType: cuda_types::cublas::cudaDataType,
    executionType: cuda_types::cublas::cudaDataType,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasNrm2Ex_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasNrm2Ex_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasNrm2Ex_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(xType), ": ").as_bytes())?;
    crate::CudaDisplay::write(&xType, "cublasNrm2Ex_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasNrm2Ex_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(result), ": ").as_bytes())?;
    crate::CudaDisplay::write(&result, "cublasNrm2Ex_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(resultType), ": ").as_bytes())?;
    crate::CudaDisplay::write(&resultType, "cublasNrm2Ex_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(executionType), ": ").as_bytes())?;
    crate::CudaDisplay::write(&executionType, "cublasNrm2Ex_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasSnrm2_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    n: ::core::ffi::c_int,
    x: *const f32,
    incx: ::core::ffi::c_int,
    result: *mut f32,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasSnrm2_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasSnrm2_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasSnrm2_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasSnrm2_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(result), ": ").as_bytes())?;
    crate::CudaDisplay::write(&result, "cublasSnrm2_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasSnrm2_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    n: i64,
    x: *const f32,
    incx: i64,
    result: *mut f32,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasSnrm2_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasSnrm2_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasSnrm2_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasSnrm2_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(result), ": ").as_bytes())?;
    crate::CudaDisplay::write(&result, "cublasSnrm2_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasDnrm2_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    n: ::core::ffi::c_int,
    x: *const f64,
    incx: ::core::ffi::c_int,
    result: *mut f64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasDnrm2_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasDnrm2_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasDnrm2_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasDnrm2_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(result), ": ").as_bytes())?;
    crate::CudaDisplay::write(&result, "cublasDnrm2_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasDnrm2_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    n: i64,
    x: *const f64,
    incx: i64,
    result: *mut f64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasDnrm2_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasDnrm2_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasDnrm2_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasDnrm2_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(result), ": ").as_bytes())?;
    crate::CudaDisplay::write(&result, "cublasDnrm2_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasScnrm2_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    n: ::core::ffi::c_int,
    x: *const cuda_types::cublas::cuComplex,
    incx: ::core::ffi::c_int,
    result: *mut f32,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasScnrm2_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasScnrm2_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasScnrm2_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasScnrm2_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(result), ": ").as_bytes())?;
    crate::CudaDisplay::write(&result, "cublasScnrm2_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasScnrm2_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    n: i64,
    x: *const cuda_types::cublas::cuComplex,
    incx: i64,
    result: *mut f32,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasScnrm2_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasScnrm2_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasScnrm2_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasScnrm2_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(result), ": ").as_bytes())?;
    crate::CudaDisplay::write(&result, "cublasScnrm2_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasDznrm2_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    n: ::core::ffi::c_int,
    x: *const cuda_types::cublas::cuDoubleComplex,
    incx: ::core::ffi::c_int,
    result: *mut f64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasDznrm2_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasDznrm2_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasDznrm2_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasDznrm2_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(result), ": ").as_bytes())?;
    crate::CudaDisplay::write(&result, "cublasDznrm2_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasDznrm2_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    n: i64,
    x: *const cuda_types::cublas::cuDoubleComplex,
    incx: i64,
    result: *mut f64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasDznrm2_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasDznrm2_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasDznrm2_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasDznrm2_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(result), ": ").as_bytes())?;
    crate::CudaDisplay::write(&result, "cublasDznrm2_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasDotEx(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    n: ::core::ffi::c_int,
    x: *const ::core::ffi::c_void,
    xType: cuda_types::cublas::cudaDataType,
    incx: ::core::ffi::c_int,
    y: *const ::core::ffi::c_void,
    yType: cuda_types::cublas::cudaDataType,
    incy: ::core::ffi::c_int,
    result: *mut ::core::ffi::c_void,
    resultType: cuda_types::cublas::cudaDataType,
    executionType: cuda_types::cublas::cudaDataType,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasDotEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasDotEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasDotEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(xType), ": ").as_bytes())?;
    crate::CudaDisplay::write(&xType, "cublasDotEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasDotEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasDotEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(yType), ": ").as_bytes())?;
    crate::CudaDisplay::write(&yType, "cublasDotEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasDotEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(result), ": ").as_bytes())?;
    crate::CudaDisplay::write(&result, "cublasDotEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(resultType), ": ").as_bytes())?;
    crate::CudaDisplay::write(&resultType, "cublasDotEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(executionType), ": ").as_bytes())?;
    crate::CudaDisplay::write(&executionType, "cublasDotEx", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasDotEx_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    n: i64,
    x: *const ::core::ffi::c_void,
    xType: cuda_types::cublas::cudaDataType,
    incx: i64,
    y: *const ::core::ffi::c_void,
    yType: cuda_types::cublas::cudaDataType,
    incy: i64,
    result: *mut ::core::ffi::c_void,
    resultType: cuda_types::cublas::cudaDataType,
    executionType: cuda_types::cublas::cudaDataType,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasDotEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasDotEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasDotEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(xType), ": ").as_bytes())?;
    crate::CudaDisplay::write(&xType, "cublasDotEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasDotEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasDotEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(yType), ": ").as_bytes())?;
    crate::CudaDisplay::write(&yType, "cublasDotEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasDotEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(result), ": ").as_bytes())?;
    crate::CudaDisplay::write(&result, "cublasDotEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(resultType), ": ").as_bytes())?;
    crate::CudaDisplay::write(&resultType, "cublasDotEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(executionType), ": ").as_bytes())?;
    crate::CudaDisplay::write(&executionType, "cublasDotEx_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasDotcEx(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    n: ::core::ffi::c_int,
    x: *const ::core::ffi::c_void,
    xType: cuda_types::cublas::cudaDataType,
    incx: ::core::ffi::c_int,
    y: *const ::core::ffi::c_void,
    yType: cuda_types::cublas::cudaDataType,
    incy: ::core::ffi::c_int,
    result: *mut ::core::ffi::c_void,
    resultType: cuda_types::cublas::cudaDataType,
    executionType: cuda_types::cublas::cudaDataType,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasDotcEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasDotcEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasDotcEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(xType), ": ").as_bytes())?;
    crate::CudaDisplay::write(&xType, "cublasDotcEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasDotcEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasDotcEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(yType), ": ").as_bytes())?;
    crate::CudaDisplay::write(&yType, "cublasDotcEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasDotcEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(result), ": ").as_bytes())?;
    crate::CudaDisplay::write(&result, "cublasDotcEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(resultType), ": ").as_bytes())?;
    crate::CudaDisplay::write(&resultType, "cublasDotcEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(executionType), ": ").as_bytes())?;
    crate::CudaDisplay::write(&executionType, "cublasDotcEx", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasDotcEx_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    n: i64,
    x: *const ::core::ffi::c_void,
    xType: cuda_types::cublas::cudaDataType,
    incx: i64,
    y: *const ::core::ffi::c_void,
    yType: cuda_types::cublas::cudaDataType,
    incy: i64,
    result: *mut ::core::ffi::c_void,
    resultType: cuda_types::cublas::cudaDataType,
    executionType: cuda_types::cublas::cudaDataType,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasDotcEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasDotcEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasDotcEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(xType), ": ").as_bytes())?;
    crate::CudaDisplay::write(&xType, "cublasDotcEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasDotcEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasDotcEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(yType), ": ").as_bytes())?;
    crate::CudaDisplay::write(&yType, "cublasDotcEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasDotcEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(result), ": ").as_bytes())?;
    crate::CudaDisplay::write(&result, "cublasDotcEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(resultType), ": ").as_bytes())?;
    crate::CudaDisplay::write(&resultType, "cublasDotcEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(executionType), ": ").as_bytes())?;
    crate::CudaDisplay::write(&executionType, "cublasDotcEx_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasSdot_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    n: ::core::ffi::c_int,
    x: *const f32,
    incx: ::core::ffi::c_int,
    y: *const f32,
    incy: ::core::ffi::c_int,
    result: *mut f32,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasSdot_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasSdot_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasSdot_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasSdot_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasSdot_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasSdot_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(result), ": ").as_bytes())?;
    crate::CudaDisplay::write(&result, "cublasSdot_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasSdot_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    n: i64,
    x: *const f32,
    incx: i64,
    y: *const f32,
    incy: i64,
    result: *mut f32,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasSdot_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasSdot_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasSdot_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasSdot_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasSdot_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasSdot_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(result), ": ").as_bytes())?;
    crate::CudaDisplay::write(&result, "cublasSdot_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasDdot_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    n: ::core::ffi::c_int,
    x: *const f64,
    incx: ::core::ffi::c_int,
    y: *const f64,
    incy: ::core::ffi::c_int,
    result: *mut f64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasDdot_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasDdot_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasDdot_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasDdot_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasDdot_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasDdot_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(result), ": ").as_bytes())?;
    crate::CudaDisplay::write(&result, "cublasDdot_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasDdot_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    n: i64,
    x: *const f64,
    incx: i64,
    y: *const f64,
    incy: i64,
    result: *mut f64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasDdot_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasDdot_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasDdot_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasDdot_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasDdot_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasDdot_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(result), ": ").as_bytes())?;
    crate::CudaDisplay::write(&result, "cublasDdot_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasCdotu_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    n: ::core::ffi::c_int,
    x: *const cuda_types::cublas::cuComplex,
    incx: ::core::ffi::c_int,
    y: *const cuda_types::cublas::cuComplex,
    incy: ::core::ffi::c_int,
    result: *mut cuda_types::cublas::cuComplex,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasCdotu_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasCdotu_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasCdotu_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasCdotu_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasCdotu_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasCdotu_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(result), ": ").as_bytes())?;
    crate::CudaDisplay::write(&result, "cublasCdotu_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasCdotu_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    n: i64,
    x: *const cuda_types::cublas::cuComplex,
    incx: i64,
    y: *const cuda_types::cublas::cuComplex,
    incy: i64,
    result: *mut cuda_types::cublas::cuComplex,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasCdotu_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasCdotu_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasCdotu_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasCdotu_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasCdotu_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasCdotu_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(result), ": ").as_bytes())?;
    crate::CudaDisplay::write(&result, "cublasCdotu_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasCdotc_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    n: ::core::ffi::c_int,
    x: *const cuda_types::cublas::cuComplex,
    incx: ::core::ffi::c_int,
    y: *const cuda_types::cublas::cuComplex,
    incy: ::core::ffi::c_int,
    result: *mut cuda_types::cublas::cuComplex,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasCdotc_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasCdotc_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasCdotc_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasCdotc_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasCdotc_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasCdotc_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(result), ": ").as_bytes())?;
    crate::CudaDisplay::write(&result, "cublasCdotc_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasCdotc_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    n: i64,
    x: *const cuda_types::cublas::cuComplex,
    incx: i64,
    y: *const cuda_types::cublas::cuComplex,
    incy: i64,
    result: *mut cuda_types::cublas::cuComplex,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasCdotc_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasCdotc_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasCdotc_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasCdotc_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasCdotc_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasCdotc_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(result), ": ").as_bytes())?;
    crate::CudaDisplay::write(&result, "cublasCdotc_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasZdotu_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    n: ::core::ffi::c_int,
    x: *const cuda_types::cublas::cuDoubleComplex,
    incx: ::core::ffi::c_int,
    y: *const cuda_types::cublas::cuDoubleComplex,
    incy: ::core::ffi::c_int,
    result: *mut cuda_types::cublas::cuDoubleComplex,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasZdotu_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasZdotu_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasZdotu_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasZdotu_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasZdotu_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasZdotu_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(result), ": ").as_bytes())?;
    crate::CudaDisplay::write(&result, "cublasZdotu_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasZdotu_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    n: i64,
    x: *const cuda_types::cublas::cuDoubleComplex,
    incx: i64,
    y: *const cuda_types::cublas::cuDoubleComplex,
    incy: i64,
    result: *mut cuda_types::cublas::cuDoubleComplex,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasZdotu_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasZdotu_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasZdotu_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasZdotu_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasZdotu_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasZdotu_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(result), ": ").as_bytes())?;
    crate::CudaDisplay::write(&result, "cublasZdotu_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasZdotc_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    n: ::core::ffi::c_int,
    x: *const cuda_types::cublas::cuDoubleComplex,
    incx: ::core::ffi::c_int,
    y: *const cuda_types::cublas::cuDoubleComplex,
    incy: ::core::ffi::c_int,
    result: *mut cuda_types::cublas::cuDoubleComplex,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasZdotc_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasZdotc_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasZdotc_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasZdotc_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasZdotc_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasZdotc_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(result), ": ").as_bytes())?;
    crate::CudaDisplay::write(&result, "cublasZdotc_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasZdotc_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    n: i64,
    x: *const cuda_types::cublas::cuDoubleComplex,
    incx: i64,
    y: *const cuda_types::cublas::cuDoubleComplex,
    incy: i64,
    result: *mut cuda_types::cublas::cuDoubleComplex,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasZdotc_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasZdotc_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasZdotc_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasZdotc_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasZdotc_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasZdotc_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(result), ": ").as_bytes())?;
    crate::CudaDisplay::write(&result, "cublasZdotc_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasScalEx(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    n: ::core::ffi::c_int,
    alpha: *const ::core::ffi::c_void,
    alphaType: cuda_types::cublas::cudaDataType,
    x: *mut ::core::ffi::c_void,
    xType: cuda_types::cublas::cudaDataType,
    incx: ::core::ffi::c_int,
    executionType: cuda_types::cublas::cudaDataType,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasScalEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasScalEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasScalEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alphaType), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alphaType, "cublasScalEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasScalEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(xType), ": ").as_bytes())?;
    crate::CudaDisplay::write(&xType, "cublasScalEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasScalEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(executionType), ": ").as_bytes())?;
    crate::CudaDisplay::write(&executionType, "cublasScalEx", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasScalEx_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    n: i64,
    alpha: *const ::core::ffi::c_void,
    alphaType: cuda_types::cublas::cudaDataType,
    x: *mut ::core::ffi::c_void,
    xType: cuda_types::cublas::cudaDataType,
    incx: i64,
    executionType: cuda_types::cublas::cudaDataType,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasScalEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasScalEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasScalEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alphaType), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alphaType, "cublasScalEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasScalEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(xType), ": ").as_bytes())?;
    crate::CudaDisplay::write(&xType, "cublasScalEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasScalEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(executionType), ": ").as_bytes())?;
    crate::CudaDisplay::write(&executionType, "cublasScalEx_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasSscal_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    n: ::core::ffi::c_int,
    alpha: *const f32,
    x: *mut f32,
    incx: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasSscal_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasSscal_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasSscal_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasSscal_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasSscal_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasSscal_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    n: i64,
    alpha: *const f32,
    x: *mut f32,
    incx: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasSscal_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasSscal_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasSscal_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasSscal_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasSscal_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasDscal_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    n: ::core::ffi::c_int,
    alpha: *const f64,
    x: *mut f64,
    incx: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasDscal_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasDscal_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasDscal_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasDscal_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasDscal_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasDscal_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    n: i64,
    alpha: *const f64,
    x: *mut f64,
    incx: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasDscal_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasDscal_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasDscal_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasDscal_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasDscal_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasCscal_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    n: ::core::ffi::c_int,
    alpha: *const cuda_types::cublas::cuComplex,
    x: *mut cuda_types::cublas::cuComplex,
    incx: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasCscal_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasCscal_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasCscal_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasCscal_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasCscal_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasCscal_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    n: i64,
    alpha: *const cuda_types::cublas::cuComplex,
    x: *mut cuda_types::cublas::cuComplex,
    incx: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasCscal_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasCscal_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasCscal_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasCscal_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasCscal_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasCsscal_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    n: ::core::ffi::c_int,
    alpha: *const f32,
    x: *mut cuda_types::cublas::cuComplex,
    incx: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasCsscal_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasCsscal_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasCsscal_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasCsscal_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasCsscal_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasCsscal_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    n: i64,
    alpha: *const f32,
    x: *mut cuda_types::cublas::cuComplex,
    incx: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasCsscal_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasCsscal_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasCsscal_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasCsscal_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasCsscal_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasZscal_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    n: ::core::ffi::c_int,
    alpha: *const cuda_types::cublas::cuDoubleComplex,
    x: *mut cuda_types::cublas::cuDoubleComplex,
    incx: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasZscal_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasZscal_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasZscal_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasZscal_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasZscal_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasZscal_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    n: i64,
    alpha: *const cuda_types::cublas::cuDoubleComplex,
    x: *mut cuda_types::cublas::cuDoubleComplex,
    incx: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasZscal_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasZscal_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasZscal_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasZscal_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasZscal_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasZdscal_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    n: ::core::ffi::c_int,
    alpha: *const f64,
    x: *mut cuda_types::cublas::cuDoubleComplex,
    incx: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasZdscal_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasZdscal_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasZdscal_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasZdscal_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasZdscal_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasZdscal_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    n: i64,
    alpha: *const f64,
    x: *mut cuda_types::cublas::cuDoubleComplex,
    incx: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasZdscal_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasZdscal_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasZdscal_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasZdscal_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasZdscal_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasAxpyEx(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    n: ::core::ffi::c_int,
    alpha: *const ::core::ffi::c_void,
    alphaType: cuda_types::cublas::cudaDataType,
    x: *const ::core::ffi::c_void,
    xType: cuda_types::cublas::cudaDataType,
    incx: ::core::ffi::c_int,
    y: *mut ::core::ffi::c_void,
    yType: cuda_types::cublas::cudaDataType,
    incy: ::core::ffi::c_int,
    executiontype: cuda_types::cublas::cudaDataType,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasAxpyEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasAxpyEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasAxpyEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alphaType), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alphaType, "cublasAxpyEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasAxpyEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(xType), ": ").as_bytes())?;
    crate::CudaDisplay::write(&xType, "cublasAxpyEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasAxpyEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasAxpyEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(yType), ": ").as_bytes())?;
    crate::CudaDisplay::write(&yType, "cublasAxpyEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasAxpyEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(executiontype), ": ").as_bytes())?;
    crate::CudaDisplay::write(&executiontype, "cublasAxpyEx", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasAxpyEx_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    n: i64,
    alpha: *const ::core::ffi::c_void,
    alphaType: cuda_types::cublas::cudaDataType,
    x: *const ::core::ffi::c_void,
    xType: cuda_types::cublas::cudaDataType,
    incx: i64,
    y: *mut ::core::ffi::c_void,
    yType: cuda_types::cublas::cudaDataType,
    incy: i64,
    executiontype: cuda_types::cublas::cudaDataType,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasAxpyEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasAxpyEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasAxpyEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alphaType), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alphaType, "cublasAxpyEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasAxpyEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(xType), ": ").as_bytes())?;
    crate::CudaDisplay::write(&xType, "cublasAxpyEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasAxpyEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasAxpyEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(yType), ": ").as_bytes())?;
    crate::CudaDisplay::write(&yType, "cublasAxpyEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasAxpyEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(executiontype), ": ").as_bytes())?;
    crate::CudaDisplay::write(&executiontype, "cublasAxpyEx_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasSaxpy_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    n: ::core::ffi::c_int,
    alpha: *const f32,
    x: *const f32,
    incx: ::core::ffi::c_int,
    y: *mut f32,
    incy: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasSaxpy_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasSaxpy_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasSaxpy_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasSaxpy_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasSaxpy_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasSaxpy_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasSaxpy_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasSaxpy_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    n: i64,
    alpha: *const f32,
    x: *const f32,
    incx: i64,
    y: *mut f32,
    incy: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasSaxpy_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasSaxpy_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasSaxpy_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasSaxpy_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasSaxpy_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasSaxpy_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasSaxpy_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasDaxpy_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    n: ::core::ffi::c_int,
    alpha: *const f64,
    x: *const f64,
    incx: ::core::ffi::c_int,
    y: *mut f64,
    incy: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasDaxpy_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasDaxpy_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasDaxpy_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasDaxpy_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasDaxpy_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasDaxpy_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasDaxpy_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasDaxpy_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    n: i64,
    alpha: *const f64,
    x: *const f64,
    incx: i64,
    y: *mut f64,
    incy: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasDaxpy_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasDaxpy_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasDaxpy_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasDaxpy_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasDaxpy_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasDaxpy_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasDaxpy_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasCaxpy_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    n: ::core::ffi::c_int,
    alpha: *const cuda_types::cublas::cuComplex,
    x: *const cuda_types::cublas::cuComplex,
    incx: ::core::ffi::c_int,
    y: *mut cuda_types::cublas::cuComplex,
    incy: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasCaxpy_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasCaxpy_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasCaxpy_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasCaxpy_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasCaxpy_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasCaxpy_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasCaxpy_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasCaxpy_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    n: i64,
    alpha: *const cuda_types::cublas::cuComplex,
    x: *const cuda_types::cublas::cuComplex,
    incx: i64,
    y: *mut cuda_types::cublas::cuComplex,
    incy: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasCaxpy_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasCaxpy_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasCaxpy_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasCaxpy_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasCaxpy_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasCaxpy_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasCaxpy_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasZaxpy_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    n: ::core::ffi::c_int,
    alpha: *const cuda_types::cublas::cuDoubleComplex,
    x: *const cuda_types::cublas::cuDoubleComplex,
    incx: ::core::ffi::c_int,
    y: *mut cuda_types::cublas::cuDoubleComplex,
    incy: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasZaxpy_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasZaxpy_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasZaxpy_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasZaxpy_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasZaxpy_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasZaxpy_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasZaxpy_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasZaxpy_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    n: i64,
    alpha: *const cuda_types::cublas::cuDoubleComplex,
    x: *const cuda_types::cublas::cuDoubleComplex,
    incx: i64,
    y: *mut cuda_types::cublas::cuDoubleComplex,
    incy: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasZaxpy_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasZaxpy_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasZaxpy_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasZaxpy_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasZaxpy_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasZaxpy_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasZaxpy_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasCopyEx(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    n: ::core::ffi::c_int,
    x: *const ::core::ffi::c_void,
    xType: cuda_types::cublas::cudaDataType,
    incx: ::core::ffi::c_int,
    y: *mut ::core::ffi::c_void,
    yType: cuda_types::cublas::cudaDataType,
    incy: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasCopyEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasCopyEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasCopyEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(xType), ": ").as_bytes())?;
    crate::CudaDisplay::write(&xType, "cublasCopyEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasCopyEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasCopyEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(yType), ": ").as_bytes())?;
    crate::CudaDisplay::write(&yType, "cublasCopyEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasCopyEx", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasCopyEx_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    n: i64,
    x: *const ::core::ffi::c_void,
    xType: cuda_types::cublas::cudaDataType,
    incx: i64,
    y: *mut ::core::ffi::c_void,
    yType: cuda_types::cublas::cudaDataType,
    incy: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasCopyEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasCopyEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasCopyEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(xType), ": ").as_bytes())?;
    crate::CudaDisplay::write(&xType, "cublasCopyEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasCopyEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasCopyEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(yType), ": ").as_bytes())?;
    crate::CudaDisplay::write(&yType, "cublasCopyEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasCopyEx_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasScopy_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    n: ::core::ffi::c_int,
    x: *const f32,
    incx: ::core::ffi::c_int,
    y: *mut f32,
    incy: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasScopy_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasScopy_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasScopy_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasScopy_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasScopy_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasScopy_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasScopy_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    n: i64,
    x: *const f32,
    incx: i64,
    y: *mut f32,
    incy: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasScopy_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasScopy_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasScopy_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasScopy_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasScopy_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasScopy_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasDcopy_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    n: ::core::ffi::c_int,
    x: *const f64,
    incx: ::core::ffi::c_int,
    y: *mut f64,
    incy: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasDcopy_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasDcopy_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasDcopy_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasDcopy_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasDcopy_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasDcopy_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasDcopy_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    n: i64,
    x: *const f64,
    incx: i64,
    y: *mut f64,
    incy: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasDcopy_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasDcopy_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasDcopy_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasDcopy_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasDcopy_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasDcopy_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasCcopy_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    n: ::core::ffi::c_int,
    x: *const cuda_types::cublas::cuComplex,
    incx: ::core::ffi::c_int,
    y: *mut cuda_types::cublas::cuComplex,
    incy: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasCcopy_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasCcopy_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasCcopy_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasCcopy_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasCcopy_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasCcopy_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasCcopy_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    n: i64,
    x: *const cuda_types::cublas::cuComplex,
    incx: i64,
    y: *mut cuda_types::cublas::cuComplex,
    incy: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasCcopy_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasCcopy_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasCcopy_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasCcopy_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasCcopy_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasCcopy_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasZcopy_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    n: ::core::ffi::c_int,
    x: *const cuda_types::cublas::cuDoubleComplex,
    incx: ::core::ffi::c_int,
    y: *mut cuda_types::cublas::cuDoubleComplex,
    incy: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasZcopy_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasZcopy_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasZcopy_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasZcopy_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasZcopy_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasZcopy_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasZcopy_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    n: i64,
    x: *const cuda_types::cublas::cuDoubleComplex,
    incx: i64,
    y: *mut cuda_types::cublas::cuDoubleComplex,
    incy: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasZcopy_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasZcopy_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasZcopy_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasZcopy_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasZcopy_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasZcopy_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasSswap_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    n: ::core::ffi::c_int,
    x: *mut f32,
    incx: ::core::ffi::c_int,
    y: *mut f32,
    incy: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasSswap_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasSswap_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasSswap_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasSswap_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasSswap_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasSswap_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasSswap_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    n: i64,
    x: *mut f32,
    incx: i64,
    y: *mut f32,
    incy: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasSswap_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasSswap_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasSswap_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasSswap_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasSswap_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasSswap_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasDswap_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    n: ::core::ffi::c_int,
    x: *mut f64,
    incx: ::core::ffi::c_int,
    y: *mut f64,
    incy: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasDswap_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasDswap_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasDswap_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasDswap_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasDswap_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasDswap_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasDswap_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    n: i64,
    x: *mut f64,
    incx: i64,
    y: *mut f64,
    incy: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasDswap_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasDswap_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasDswap_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasDswap_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasDswap_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasDswap_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasCswap_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    n: ::core::ffi::c_int,
    x: *mut cuda_types::cublas::cuComplex,
    incx: ::core::ffi::c_int,
    y: *mut cuda_types::cublas::cuComplex,
    incy: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasCswap_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasCswap_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasCswap_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasCswap_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasCswap_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasCswap_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasCswap_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    n: i64,
    x: *mut cuda_types::cublas::cuComplex,
    incx: i64,
    y: *mut cuda_types::cublas::cuComplex,
    incy: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasCswap_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasCswap_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasCswap_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasCswap_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasCswap_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasCswap_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasZswap_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    n: ::core::ffi::c_int,
    x: *mut cuda_types::cublas::cuDoubleComplex,
    incx: ::core::ffi::c_int,
    y: *mut cuda_types::cublas::cuDoubleComplex,
    incy: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasZswap_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasZswap_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasZswap_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasZswap_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasZswap_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasZswap_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasZswap_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    n: i64,
    x: *mut cuda_types::cublas::cuDoubleComplex,
    incx: i64,
    y: *mut cuda_types::cublas::cuDoubleComplex,
    incy: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasZswap_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasZswap_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasZswap_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasZswap_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasZswap_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasZswap_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasSwapEx(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    n: ::core::ffi::c_int,
    x: *mut ::core::ffi::c_void,
    xType: cuda_types::cublas::cudaDataType,
    incx: ::core::ffi::c_int,
    y: *mut ::core::ffi::c_void,
    yType: cuda_types::cublas::cudaDataType,
    incy: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasSwapEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasSwapEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasSwapEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(xType), ": ").as_bytes())?;
    crate::CudaDisplay::write(&xType, "cublasSwapEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasSwapEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasSwapEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(yType), ": ").as_bytes())?;
    crate::CudaDisplay::write(&yType, "cublasSwapEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasSwapEx", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasSwapEx_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    n: i64,
    x: *mut ::core::ffi::c_void,
    xType: cuda_types::cublas::cudaDataType,
    incx: i64,
    y: *mut ::core::ffi::c_void,
    yType: cuda_types::cublas::cudaDataType,
    incy: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasSwapEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasSwapEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasSwapEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(xType), ": ").as_bytes())?;
    crate::CudaDisplay::write(&xType, "cublasSwapEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasSwapEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasSwapEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(yType), ": ").as_bytes())?;
    crate::CudaDisplay::write(&yType, "cublasSwapEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasSwapEx_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasIsamax_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    n: ::core::ffi::c_int,
    x: *const f32,
    incx: ::core::ffi::c_int,
    result: *mut ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasIsamax_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasIsamax_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasIsamax_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasIsamax_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(result), ": ").as_bytes())?;
    crate::CudaDisplay::write(&result, "cublasIsamax_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasIsamax_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    n: i64,
    x: *const f32,
    incx: i64,
    result: *mut i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasIsamax_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasIsamax_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasIsamax_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasIsamax_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(result), ": ").as_bytes())?;
    crate::CudaDisplay::write(&result, "cublasIsamax_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasIdamax_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    n: ::core::ffi::c_int,
    x: *const f64,
    incx: ::core::ffi::c_int,
    result: *mut ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasIdamax_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasIdamax_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasIdamax_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasIdamax_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(result), ": ").as_bytes())?;
    crate::CudaDisplay::write(&result, "cublasIdamax_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasIdamax_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    n: i64,
    x: *const f64,
    incx: i64,
    result: *mut i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasIdamax_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasIdamax_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasIdamax_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasIdamax_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(result), ": ").as_bytes())?;
    crate::CudaDisplay::write(&result, "cublasIdamax_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasIcamax_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    n: ::core::ffi::c_int,
    x: *const cuda_types::cublas::cuComplex,
    incx: ::core::ffi::c_int,
    result: *mut ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasIcamax_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasIcamax_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasIcamax_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasIcamax_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(result), ": ").as_bytes())?;
    crate::CudaDisplay::write(&result, "cublasIcamax_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasIcamax_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    n: i64,
    x: *const cuda_types::cublas::cuComplex,
    incx: i64,
    result: *mut i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasIcamax_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasIcamax_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasIcamax_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasIcamax_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(result), ": ").as_bytes())?;
    crate::CudaDisplay::write(&result, "cublasIcamax_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasIzamax_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    n: ::core::ffi::c_int,
    x: *const cuda_types::cublas::cuDoubleComplex,
    incx: ::core::ffi::c_int,
    result: *mut ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasIzamax_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasIzamax_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasIzamax_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasIzamax_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(result), ": ").as_bytes())?;
    crate::CudaDisplay::write(&result, "cublasIzamax_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasIzamax_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    n: i64,
    x: *const cuda_types::cublas::cuDoubleComplex,
    incx: i64,
    result: *mut i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasIzamax_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasIzamax_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasIzamax_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasIzamax_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(result), ": ").as_bytes())?;
    crate::CudaDisplay::write(&result, "cublasIzamax_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasIamaxEx(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    n: ::core::ffi::c_int,
    x: *const ::core::ffi::c_void,
    xType: cuda_types::cublas::cudaDataType,
    incx: ::core::ffi::c_int,
    result: *mut ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasIamaxEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasIamaxEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasIamaxEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(xType), ": ").as_bytes())?;
    crate::CudaDisplay::write(&xType, "cublasIamaxEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasIamaxEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(result), ": ").as_bytes())?;
    crate::CudaDisplay::write(&result, "cublasIamaxEx", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasIamaxEx_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    n: i64,
    x: *const ::core::ffi::c_void,
    xType: cuda_types::cublas::cudaDataType,
    incx: i64,
    result: *mut i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasIamaxEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasIamaxEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasIamaxEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(xType), ": ").as_bytes())?;
    crate::CudaDisplay::write(&xType, "cublasIamaxEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasIamaxEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(result), ": ").as_bytes())?;
    crate::CudaDisplay::write(&result, "cublasIamaxEx_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasIsamin_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    n: ::core::ffi::c_int,
    x: *const f32,
    incx: ::core::ffi::c_int,
    result: *mut ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasIsamin_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasIsamin_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasIsamin_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasIsamin_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(result), ": ").as_bytes())?;
    crate::CudaDisplay::write(&result, "cublasIsamin_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasIsamin_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    n: i64,
    x: *const f32,
    incx: i64,
    result: *mut i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasIsamin_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasIsamin_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasIsamin_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasIsamin_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(result), ": ").as_bytes())?;
    crate::CudaDisplay::write(&result, "cublasIsamin_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasIdamin_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    n: ::core::ffi::c_int,
    x: *const f64,
    incx: ::core::ffi::c_int,
    result: *mut ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasIdamin_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasIdamin_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasIdamin_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasIdamin_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(result), ": ").as_bytes())?;
    crate::CudaDisplay::write(&result, "cublasIdamin_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasIdamin_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    n: i64,
    x: *const f64,
    incx: i64,
    result: *mut i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasIdamin_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasIdamin_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasIdamin_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasIdamin_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(result), ": ").as_bytes())?;
    crate::CudaDisplay::write(&result, "cublasIdamin_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasIcamin_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    n: ::core::ffi::c_int,
    x: *const cuda_types::cublas::cuComplex,
    incx: ::core::ffi::c_int,
    result: *mut ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasIcamin_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasIcamin_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasIcamin_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasIcamin_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(result), ": ").as_bytes())?;
    crate::CudaDisplay::write(&result, "cublasIcamin_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasIcamin_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    n: i64,
    x: *const cuda_types::cublas::cuComplex,
    incx: i64,
    result: *mut i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasIcamin_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasIcamin_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasIcamin_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasIcamin_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(result), ": ").as_bytes())?;
    crate::CudaDisplay::write(&result, "cublasIcamin_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasIzamin_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    n: ::core::ffi::c_int,
    x: *const cuda_types::cublas::cuDoubleComplex,
    incx: ::core::ffi::c_int,
    result: *mut ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasIzamin_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasIzamin_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasIzamin_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasIzamin_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(result), ": ").as_bytes())?;
    crate::CudaDisplay::write(&result, "cublasIzamin_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasIzamin_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    n: i64,
    x: *const cuda_types::cublas::cuDoubleComplex,
    incx: i64,
    result: *mut i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasIzamin_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasIzamin_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasIzamin_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasIzamin_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(result), ": ").as_bytes())?;
    crate::CudaDisplay::write(&result, "cublasIzamin_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasIaminEx(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    n: ::core::ffi::c_int,
    x: *const ::core::ffi::c_void,
    xType: cuda_types::cublas::cudaDataType,
    incx: ::core::ffi::c_int,
    result: *mut ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasIaminEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasIaminEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasIaminEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(xType), ": ").as_bytes())?;
    crate::CudaDisplay::write(&xType, "cublasIaminEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasIaminEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(result), ": ").as_bytes())?;
    crate::CudaDisplay::write(&result, "cublasIaminEx", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasIaminEx_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    n: i64,
    x: *const ::core::ffi::c_void,
    xType: cuda_types::cublas::cudaDataType,
    incx: i64,
    result: *mut i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasIaminEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasIaminEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasIaminEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(xType), ": ").as_bytes())?;
    crate::CudaDisplay::write(&xType, "cublasIaminEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasIaminEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(result), ": ").as_bytes())?;
    crate::CudaDisplay::write(&result, "cublasIaminEx_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasAsumEx(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    n: ::core::ffi::c_int,
    x: *const ::core::ffi::c_void,
    xType: cuda_types::cublas::cudaDataType,
    incx: ::core::ffi::c_int,
    result: *mut ::core::ffi::c_void,
    resultType: cuda_types::cublas::cudaDataType,
    executiontype: cuda_types::cublas::cudaDataType,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasAsumEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasAsumEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasAsumEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(xType), ": ").as_bytes())?;
    crate::CudaDisplay::write(&xType, "cublasAsumEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasAsumEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(result), ": ").as_bytes())?;
    crate::CudaDisplay::write(&result, "cublasAsumEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(resultType), ": ").as_bytes())?;
    crate::CudaDisplay::write(&resultType, "cublasAsumEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(executiontype), ": ").as_bytes())?;
    crate::CudaDisplay::write(&executiontype, "cublasAsumEx", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasAsumEx_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    n: i64,
    x: *const ::core::ffi::c_void,
    xType: cuda_types::cublas::cudaDataType,
    incx: i64,
    result: *mut ::core::ffi::c_void,
    resultType: cuda_types::cublas::cudaDataType,
    executiontype: cuda_types::cublas::cudaDataType,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasAsumEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasAsumEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasAsumEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(xType), ": ").as_bytes())?;
    crate::CudaDisplay::write(&xType, "cublasAsumEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasAsumEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(result), ": ").as_bytes())?;
    crate::CudaDisplay::write(&result, "cublasAsumEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(resultType), ": ").as_bytes())?;
    crate::CudaDisplay::write(&resultType, "cublasAsumEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(executiontype), ": ").as_bytes())?;
    crate::CudaDisplay::write(&executiontype, "cublasAsumEx_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasSasum_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    n: ::core::ffi::c_int,
    x: *const f32,
    incx: ::core::ffi::c_int,
    result: *mut f32,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasSasum_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasSasum_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasSasum_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasSasum_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(result), ": ").as_bytes())?;
    crate::CudaDisplay::write(&result, "cublasSasum_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasSasum_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    n: i64,
    x: *const f32,
    incx: i64,
    result: *mut f32,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasSasum_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasSasum_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasSasum_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasSasum_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(result), ": ").as_bytes())?;
    crate::CudaDisplay::write(&result, "cublasSasum_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasDasum_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    n: ::core::ffi::c_int,
    x: *const f64,
    incx: ::core::ffi::c_int,
    result: *mut f64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasDasum_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasDasum_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasDasum_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasDasum_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(result), ": ").as_bytes())?;
    crate::CudaDisplay::write(&result, "cublasDasum_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasDasum_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    n: i64,
    x: *const f64,
    incx: i64,
    result: *mut f64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasDasum_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasDasum_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasDasum_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasDasum_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(result), ": ").as_bytes())?;
    crate::CudaDisplay::write(&result, "cublasDasum_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasScasum_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    n: ::core::ffi::c_int,
    x: *const cuda_types::cublas::cuComplex,
    incx: ::core::ffi::c_int,
    result: *mut f32,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasScasum_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasScasum_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasScasum_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasScasum_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(result), ": ").as_bytes())?;
    crate::CudaDisplay::write(&result, "cublasScasum_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasScasum_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    n: i64,
    x: *const cuda_types::cublas::cuComplex,
    incx: i64,
    result: *mut f32,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasScasum_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasScasum_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasScasum_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasScasum_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(result), ": ").as_bytes())?;
    crate::CudaDisplay::write(&result, "cublasScasum_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasDzasum_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    n: ::core::ffi::c_int,
    x: *const cuda_types::cublas::cuDoubleComplex,
    incx: ::core::ffi::c_int,
    result: *mut f64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasDzasum_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasDzasum_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasDzasum_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasDzasum_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(result), ": ").as_bytes())?;
    crate::CudaDisplay::write(&result, "cublasDzasum_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasDzasum_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    n: i64,
    x: *const cuda_types::cublas::cuDoubleComplex,
    incx: i64,
    result: *mut f64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasDzasum_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasDzasum_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasDzasum_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasDzasum_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(result), ": ").as_bytes())?;
    crate::CudaDisplay::write(&result, "cublasDzasum_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasSrot_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    n: ::core::ffi::c_int,
    x: *mut f32,
    incx: ::core::ffi::c_int,
    y: *mut f32,
    incy: ::core::ffi::c_int,
    c: *const f32,
    s: *const f32,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasSrot_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasSrot_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasSrot_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasSrot_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasSrot_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasSrot_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(c), ": ").as_bytes())?;
    crate::CudaDisplay::write(&c, "cublasSrot_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(s), ": ").as_bytes())?;
    crate::CudaDisplay::write(&s, "cublasSrot_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasSrot_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    n: i64,
    x: *mut f32,
    incx: i64,
    y: *mut f32,
    incy: i64,
    c: *const f32,
    s: *const f32,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasSrot_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasSrot_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasSrot_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasSrot_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasSrot_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasSrot_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(c), ": ").as_bytes())?;
    crate::CudaDisplay::write(&c, "cublasSrot_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(s), ": ").as_bytes())?;
    crate::CudaDisplay::write(&s, "cublasSrot_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasDrot_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    n: ::core::ffi::c_int,
    x: *mut f64,
    incx: ::core::ffi::c_int,
    y: *mut f64,
    incy: ::core::ffi::c_int,
    c: *const f64,
    s: *const f64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasDrot_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasDrot_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasDrot_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasDrot_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasDrot_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasDrot_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(c), ": ").as_bytes())?;
    crate::CudaDisplay::write(&c, "cublasDrot_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(s), ": ").as_bytes())?;
    crate::CudaDisplay::write(&s, "cublasDrot_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasDrot_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    n: i64,
    x: *mut f64,
    incx: i64,
    y: *mut f64,
    incy: i64,
    c: *const f64,
    s: *const f64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasDrot_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasDrot_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasDrot_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasDrot_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasDrot_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasDrot_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(c), ": ").as_bytes())?;
    crate::CudaDisplay::write(&c, "cublasDrot_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(s), ": ").as_bytes())?;
    crate::CudaDisplay::write(&s, "cublasDrot_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasCrot_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    n: ::core::ffi::c_int,
    x: *mut cuda_types::cublas::cuComplex,
    incx: ::core::ffi::c_int,
    y: *mut cuda_types::cublas::cuComplex,
    incy: ::core::ffi::c_int,
    c: *const f32,
    s: *const cuda_types::cublas::cuComplex,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasCrot_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasCrot_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasCrot_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasCrot_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasCrot_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasCrot_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(c), ": ").as_bytes())?;
    crate::CudaDisplay::write(&c, "cublasCrot_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(s), ": ").as_bytes())?;
    crate::CudaDisplay::write(&s, "cublasCrot_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasCrot_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    n: i64,
    x: *mut cuda_types::cublas::cuComplex,
    incx: i64,
    y: *mut cuda_types::cublas::cuComplex,
    incy: i64,
    c: *const f32,
    s: *const cuda_types::cublas::cuComplex,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasCrot_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasCrot_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasCrot_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasCrot_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasCrot_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasCrot_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(c), ": ").as_bytes())?;
    crate::CudaDisplay::write(&c, "cublasCrot_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(s), ": ").as_bytes())?;
    crate::CudaDisplay::write(&s, "cublasCrot_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasCsrot_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    n: ::core::ffi::c_int,
    x: *mut cuda_types::cublas::cuComplex,
    incx: ::core::ffi::c_int,
    y: *mut cuda_types::cublas::cuComplex,
    incy: ::core::ffi::c_int,
    c: *const f32,
    s: *const f32,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasCsrot_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasCsrot_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasCsrot_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasCsrot_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasCsrot_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasCsrot_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(c), ": ").as_bytes())?;
    crate::CudaDisplay::write(&c, "cublasCsrot_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(s), ": ").as_bytes())?;
    crate::CudaDisplay::write(&s, "cublasCsrot_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasCsrot_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    n: i64,
    x: *mut cuda_types::cublas::cuComplex,
    incx: i64,
    y: *mut cuda_types::cublas::cuComplex,
    incy: i64,
    c: *const f32,
    s: *const f32,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasCsrot_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasCsrot_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasCsrot_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasCsrot_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasCsrot_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasCsrot_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(c), ": ").as_bytes())?;
    crate::CudaDisplay::write(&c, "cublasCsrot_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(s), ": ").as_bytes())?;
    crate::CudaDisplay::write(&s, "cublasCsrot_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasZrot_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    n: ::core::ffi::c_int,
    x: *mut cuda_types::cublas::cuDoubleComplex,
    incx: ::core::ffi::c_int,
    y: *mut cuda_types::cublas::cuDoubleComplex,
    incy: ::core::ffi::c_int,
    c: *const f64,
    s: *const cuda_types::cublas::cuDoubleComplex,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasZrot_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasZrot_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasZrot_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasZrot_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasZrot_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasZrot_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(c), ": ").as_bytes())?;
    crate::CudaDisplay::write(&c, "cublasZrot_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(s), ": ").as_bytes())?;
    crate::CudaDisplay::write(&s, "cublasZrot_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasZrot_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    n: i64,
    x: *mut cuda_types::cublas::cuDoubleComplex,
    incx: i64,
    y: *mut cuda_types::cublas::cuDoubleComplex,
    incy: i64,
    c: *const f64,
    s: *const cuda_types::cublas::cuDoubleComplex,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasZrot_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasZrot_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasZrot_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasZrot_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasZrot_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasZrot_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(c), ": ").as_bytes())?;
    crate::CudaDisplay::write(&c, "cublasZrot_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(s), ": ").as_bytes())?;
    crate::CudaDisplay::write(&s, "cublasZrot_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasZdrot_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    n: ::core::ffi::c_int,
    x: *mut cuda_types::cublas::cuDoubleComplex,
    incx: ::core::ffi::c_int,
    y: *mut cuda_types::cublas::cuDoubleComplex,
    incy: ::core::ffi::c_int,
    c: *const f64,
    s: *const f64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasZdrot_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasZdrot_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasZdrot_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasZdrot_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasZdrot_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasZdrot_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(c), ": ").as_bytes())?;
    crate::CudaDisplay::write(&c, "cublasZdrot_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(s), ": ").as_bytes())?;
    crate::CudaDisplay::write(&s, "cublasZdrot_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasZdrot_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    n: i64,
    x: *mut cuda_types::cublas::cuDoubleComplex,
    incx: i64,
    y: *mut cuda_types::cublas::cuDoubleComplex,
    incy: i64,
    c: *const f64,
    s: *const f64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasZdrot_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasZdrot_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasZdrot_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasZdrot_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasZdrot_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasZdrot_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(c), ": ").as_bytes())?;
    crate::CudaDisplay::write(&c, "cublasZdrot_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(s), ": ").as_bytes())?;
    crate::CudaDisplay::write(&s, "cublasZdrot_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasRotEx(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    n: ::core::ffi::c_int,
    x: *mut ::core::ffi::c_void,
    xType: cuda_types::cublas::cudaDataType,
    incx: ::core::ffi::c_int,
    y: *mut ::core::ffi::c_void,
    yType: cuda_types::cublas::cudaDataType,
    incy: ::core::ffi::c_int,
    c: *const ::core::ffi::c_void,
    s: *const ::core::ffi::c_void,
    csType: cuda_types::cublas::cudaDataType,
    executiontype: cuda_types::cublas::cudaDataType,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasRotEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasRotEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasRotEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(xType), ": ").as_bytes())?;
    crate::CudaDisplay::write(&xType, "cublasRotEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasRotEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasRotEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(yType), ": ").as_bytes())?;
    crate::CudaDisplay::write(&yType, "cublasRotEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasRotEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(c), ": ").as_bytes())?;
    crate::CudaDisplay::write(&c, "cublasRotEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(s), ": ").as_bytes())?;
    crate::CudaDisplay::write(&s, "cublasRotEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csType), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csType, "cublasRotEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(executiontype), ": ").as_bytes())?;
    crate::CudaDisplay::write(&executiontype, "cublasRotEx", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasRotEx_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    n: i64,
    x: *mut ::core::ffi::c_void,
    xType: cuda_types::cublas::cudaDataType,
    incx: i64,
    y: *mut ::core::ffi::c_void,
    yType: cuda_types::cublas::cudaDataType,
    incy: i64,
    c: *const ::core::ffi::c_void,
    s: *const ::core::ffi::c_void,
    csType: cuda_types::cublas::cudaDataType,
    executiontype: cuda_types::cublas::cudaDataType,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasRotEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasRotEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasRotEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(xType), ": ").as_bytes())?;
    crate::CudaDisplay::write(&xType, "cublasRotEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasRotEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasRotEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(yType), ": ").as_bytes())?;
    crate::CudaDisplay::write(&yType, "cublasRotEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasRotEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(c), ": ").as_bytes())?;
    crate::CudaDisplay::write(&c, "cublasRotEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(s), ": ").as_bytes())?;
    crate::CudaDisplay::write(&s, "cublasRotEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csType), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csType, "cublasRotEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(executiontype), ": ").as_bytes())?;
    crate::CudaDisplay::write(&executiontype, "cublasRotEx_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasSrotg_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    a: *mut f32,
    b: *mut f32,
    c: *mut f32,
    s: *mut f32,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasSrotg_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(a), ": ").as_bytes())?;
    crate::CudaDisplay::write(&a, "cublasSrotg_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(b), ": ").as_bytes())?;
    crate::CudaDisplay::write(&b, "cublasSrotg_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(c), ": ").as_bytes())?;
    crate::CudaDisplay::write(&c, "cublasSrotg_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(s), ": ").as_bytes())?;
    crate::CudaDisplay::write(&s, "cublasSrotg_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasDrotg_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    a: *mut f64,
    b: *mut f64,
    c: *mut f64,
    s: *mut f64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasDrotg_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(a), ": ").as_bytes())?;
    crate::CudaDisplay::write(&a, "cublasDrotg_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(b), ": ").as_bytes())?;
    crate::CudaDisplay::write(&b, "cublasDrotg_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(c), ": ").as_bytes())?;
    crate::CudaDisplay::write(&c, "cublasDrotg_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(s), ": ").as_bytes())?;
    crate::CudaDisplay::write(&s, "cublasDrotg_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasCrotg_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    a: *mut cuda_types::cublas::cuComplex,
    b: *mut cuda_types::cublas::cuComplex,
    c: *mut f32,
    s: *mut cuda_types::cublas::cuComplex,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasCrotg_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(a), ": ").as_bytes())?;
    crate::CudaDisplay::write(&a, "cublasCrotg_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(b), ": ").as_bytes())?;
    crate::CudaDisplay::write(&b, "cublasCrotg_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(c), ": ").as_bytes())?;
    crate::CudaDisplay::write(&c, "cublasCrotg_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(s), ": ").as_bytes())?;
    crate::CudaDisplay::write(&s, "cublasCrotg_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasZrotg_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    a: *mut cuda_types::cublas::cuDoubleComplex,
    b: *mut cuda_types::cublas::cuDoubleComplex,
    c: *mut f64,
    s: *mut cuda_types::cublas::cuDoubleComplex,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasZrotg_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(a), ": ").as_bytes())?;
    crate::CudaDisplay::write(&a, "cublasZrotg_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(b), ": ").as_bytes())?;
    crate::CudaDisplay::write(&b, "cublasZrotg_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(c), ": ").as_bytes())?;
    crate::CudaDisplay::write(&c, "cublasZrotg_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(s), ": ").as_bytes())?;
    crate::CudaDisplay::write(&s, "cublasZrotg_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasRotgEx(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    a: *mut ::core::ffi::c_void,
    b: *mut ::core::ffi::c_void,
    abType: cuda_types::cublas::cudaDataType,
    c: *mut ::core::ffi::c_void,
    s: *mut ::core::ffi::c_void,
    csType: cuda_types::cublas::cudaDataType,
    executiontype: cuda_types::cublas::cudaDataType,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasRotgEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(a), ": ").as_bytes())?;
    crate::CudaDisplay::write(&a, "cublasRotgEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(b), ": ").as_bytes())?;
    crate::CudaDisplay::write(&b, "cublasRotgEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(abType), ": ").as_bytes())?;
    crate::CudaDisplay::write(&abType, "cublasRotgEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(c), ": ").as_bytes())?;
    crate::CudaDisplay::write(&c, "cublasRotgEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(s), ": ").as_bytes())?;
    crate::CudaDisplay::write(&s, "cublasRotgEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csType), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csType, "cublasRotgEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(executiontype), ": ").as_bytes())?;
    crate::CudaDisplay::write(&executiontype, "cublasRotgEx", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasSrotm_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    n: ::core::ffi::c_int,
    x: *mut f32,
    incx: ::core::ffi::c_int,
    y: *mut f32,
    incy: ::core::ffi::c_int,
    param: *const f32,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasSrotm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasSrotm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasSrotm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasSrotm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasSrotm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasSrotm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(param), ": ").as_bytes())?;
    crate::CudaDisplay::write(&param, "cublasSrotm_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasSrotm_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    n: i64,
    x: *mut f32,
    incx: i64,
    y: *mut f32,
    incy: i64,
    param: *const f32,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasSrotm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasSrotm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasSrotm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasSrotm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasSrotm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasSrotm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(param), ": ").as_bytes())?;
    crate::CudaDisplay::write(&param, "cublasSrotm_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasDrotm_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    n: ::core::ffi::c_int,
    x: *mut f64,
    incx: ::core::ffi::c_int,
    y: *mut f64,
    incy: ::core::ffi::c_int,
    param: *const f64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasDrotm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasDrotm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasDrotm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasDrotm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasDrotm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasDrotm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(param), ": ").as_bytes())?;
    crate::CudaDisplay::write(&param, "cublasDrotm_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasDrotm_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    n: i64,
    x: *mut f64,
    incx: i64,
    y: *mut f64,
    incy: i64,
    param: *const f64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasDrotm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasDrotm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasDrotm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasDrotm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasDrotm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasDrotm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(param), ": ").as_bytes())?;
    crate::CudaDisplay::write(&param, "cublasDrotm_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasRotmEx(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    n: ::core::ffi::c_int,
    x: *mut ::core::ffi::c_void,
    xType: cuda_types::cublas::cudaDataType,
    incx: ::core::ffi::c_int,
    y: *mut ::core::ffi::c_void,
    yType: cuda_types::cublas::cudaDataType,
    incy: ::core::ffi::c_int,
    param: *const ::core::ffi::c_void,
    paramType: cuda_types::cublas::cudaDataType,
    executiontype: cuda_types::cublas::cudaDataType,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasRotmEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasRotmEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasRotmEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(xType), ": ").as_bytes())?;
    crate::CudaDisplay::write(&xType, "cublasRotmEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasRotmEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasRotmEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(yType), ": ").as_bytes())?;
    crate::CudaDisplay::write(&yType, "cublasRotmEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasRotmEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(param), ": ").as_bytes())?;
    crate::CudaDisplay::write(&param, "cublasRotmEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(paramType), ": ").as_bytes())?;
    crate::CudaDisplay::write(&paramType, "cublasRotmEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(executiontype), ": ").as_bytes())?;
    crate::CudaDisplay::write(&executiontype, "cublasRotmEx", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasRotmEx_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    n: i64,
    x: *mut ::core::ffi::c_void,
    xType: cuda_types::cublas::cudaDataType,
    incx: i64,
    y: *mut ::core::ffi::c_void,
    yType: cuda_types::cublas::cudaDataType,
    incy: i64,
    param: *const ::core::ffi::c_void,
    paramType: cuda_types::cublas::cudaDataType,
    executiontype: cuda_types::cublas::cudaDataType,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasRotmEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasRotmEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasRotmEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(xType), ": ").as_bytes())?;
    crate::CudaDisplay::write(&xType, "cublasRotmEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasRotmEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasRotmEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(yType), ": ").as_bytes())?;
    crate::CudaDisplay::write(&yType, "cublasRotmEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasRotmEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(param), ": ").as_bytes())?;
    crate::CudaDisplay::write(&param, "cublasRotmEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(paramType), ": ").as_bytes())?;
    crate::CudaDisplay::write(&paramType, "cublasRotmEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(executiontype), ": ").as_bytes())?;
    crate::CudaDisplay::write(&executiontype, "cublasRotmEx_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasSrotmg_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    d1: *mut f32,
    d2: *mut f32,
    x1: *mut f32,
    y1: *const f32,
    param: *mut f32,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasSrotmg_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(d1), ": ").as_bytes())?;
    crate::CudaDisplay::write(&d1, "cublasSrotmg_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(d2), ": ").as_bytes())?;
    crate::CudaDisplay::write(&d2, "cublasSrotmg_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x1), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x1, "cublasSrotmg_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y1), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y1, "cublasSrotmg_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(param), ": ").as_bytes())?;
    crate::CudaDisplay::write(&param, "cublasSrotmg_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasDrotmg_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    d1: *mut f64,
    d2: *mut f64,
    x1: *mut f64,
    y1: *const f64,
    param: *mut f64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasDrotmg_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(d1), ": ").as_bytes())?;
    crate::CudaDisplay::write(&d1, "cublasDrotmg_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(d2), ": ").as_bytes())?;
    crate::CudaDisplay::write(&d2, "cublasDrotmg_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x1), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x1, "cublasDrotmg_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y1), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y1, "cublasDrotmg_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(param), ": ").as_bytes())?;
    crate::CudaDisplay::write(&param, "cublasDrotmg_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasRotmgEx(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    d1: *mut ::core::ffi::c_void,
    d1Type: cuda_types::cublas::cudaDataType,
    d2: *mut ::core::ffi::c_void,
    d2Type: cuda_types::cublas::cudaDataType,
    x1: *mut ::core::ffi::c_void,
    x1Type: cuda_types::cublas::cudaDataType,
    y1: *const ::core::ffi::c_void,
    y1Type: cuda_types::cublas::cudaDataType,
    param: *mut ::core::ffi::c_void,
    paramType: cuda_types::cublas::cudaDataType,
    executiontype: cuda_types::cublas::cudaDataType,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasRotmgEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(d1), ": ").as_bytes())?;
    crate::CudaDisplay::write(&d1, "cublasRotmgEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(d1Type), ": ").as_bytes())?;
    crate::CudaDisplay::write(&d1Type, "cublasRotmgEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(d2), ": ").as_bytes())?;
    crate::CudaDisplay::write(&d2, "cublasRotmgEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(d2Type), ": ").as_bytes())?;
    crate::CudaDisplay::write(&d2Type, "cublasRotmgEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x1), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x1, "cublasRotmgEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x1Type), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x1Type, "cublasRotmgEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y1), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y1, "cublasRotmgEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y1Type), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y1Type, "cublasRotmgEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(param), ": ").as_bytes())?;
    crate::CudaDisplay::write(&param, "cublasRotmgEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(paramType), ": ").as_bytes())?;
    crate::CudaDisplay::write(&paramType, "cublasRotmgEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(executiontype), ": ").as_bytes())?;
    crate::CudaDisplay::write(&executiontype, "cublasRotmgEx", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasSgemv_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    trans: cuda_types::cublas::cublasOperation_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    alpha: *const f32,
    A: *const f32,
    lda: ::core::ffi::c_int,
    x: *const f32,
    incx: ::core::ffi::c_int,
    beta: *const f32,
    y: *mut f32,
    incy: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasSgemv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasSgemv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasSgemv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasSgemv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasSgemv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasSgemv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasSgemv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasSgemv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasSgemv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasSgemv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasSgemv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasSgemv_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasSgemv_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    trans: cuda_types::cublas::cublasOperation_t,
    m: i64,
    n: i64,
    alpha: *const f32,
    A: *const f32,
    lda: i64,
    x: *const f32,
    incx: i64,
    beta: *const f32,
    y: *mut f32,
    incy: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasSgemv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasSgemv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasSgemv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasSgemv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasSgemv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasSgemv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasSgemv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasSgemv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasSgemv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasSgemv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasSgemv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasSgemv_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasDgemv_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    trans: cuda_types::cublas::cublasOperation_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    alpha: *const f64,
    A: *const f64,
    lda: ::core::ffi::c_int,
    x: *const f64,
    incx: ::core::ffi::c_int,
    beta: *const f64,
    y: *mut f64,
    incy: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasDgemv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasDgemv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasDgemv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasDgemv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasDgemv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasDgemv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasDgemv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasDgemv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasDgemv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasDgemv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasDgemv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasDgemv_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasDgemv_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    trans: cuda_types::cublas::cublasOperation_t,
    m: i64,
    n: i64,
    alpha: *const f64,
    A: *const f64,
    lda: i64,
    x: *const f64,
    incx: i64,
    beta: *const f64,
    y: *mut f64,
    incy: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasDgemv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasDgemv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasDgemv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasDgemv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasDgemv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasDgemv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasDgemv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasDgemv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasDgemv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasDgemv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasDgemv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasDgemv_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasCgemv_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    trans: cuda_types::cublas::cublasOperation_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    alpha: *const cuda_types::cublas::cuComplex,
    A: *const cuda_types::cublas::cuComplex,
    lda: ::core::ffi::c_int,
    x: *const cuda_types::cublas::cuComplex,
    incx: ::core::ffi::c_int,
    beta: *const cuda_types::cublas::cuComplex,
    y: *mut cuda_types::cublas::cuComplex,
    incy: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasCgemv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasCgemv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasCgemv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasCgemv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasCgemv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasCgemv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasCgemv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasCgemv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasCgemv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasCgemv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasCgemv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasCgemv_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasCgemv_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    trans: cuda_types::cublas::cublasOperation_t,
    m: i64,
    n: i64,
    alpha: *const cuda_types::cublas::cuComplex,
    A: *const cuda_types::cublas::cuComplex,
    lda: i64,
    x: *const cuda_types::cublas::cuComplex,
    incx: i64,
    beta: *const cuda_types::cublas::cuComplex,
    y: *mut cuda_types::cublas::cuComplex,
    incy: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasCgemv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasCgemv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasCgemv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasCgemv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasCgemv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasCgemv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasCgemv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasCgemv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasCgemv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasCgemv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasCgemv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasCgemv_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasZgemv_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    trans: cuda_types::cublas::cublasOperation_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    alpha: *const cuda_types::cublas::cuDoubleComplex,
    A: *const cuda_types::cublas::cuDoubleComplex,
    lda: ::core::ffi::c_int,
    x: *const cuda_types::cublas::cuDoubleComplex,
    incx: ::core::ffi::c_int,
    beta: *const cuda_types::cublas::cuDoubleComplex,
    y: *mut cuda_types::cublas::cuDoubleComplex,
    incy: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasZgemv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasZgemv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasZgemv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasZgemv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasZgemv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasZgemv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasZgemv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasZgemv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasZgemv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasZgemv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasZgemv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasZgemv_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasZgemv_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    trans: cuda_types::cublas::cublasOperation_t,
    m: i64,
    n: i64,
    alpha: *const cuda_types::cublas::cuDoubleComplex,
    A: *const cuda_types::cublas::cuDoubleComplex,
    lda: i64,
    x: *const cuda_types::cublas::cuDoubleComplex,
    incx: i64,
    beta: *const cuda_types::cublas::cuDoubleComplex,
    y: *mut cuda_types::cublas::cuDoubleComplex,
    incy: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasZgemv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasZgemv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasZgemv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasZgemv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasZgemv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasZgemv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasZgemv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasZgemv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasZgemv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasZgemv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasZgemv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasZgemv_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasSgbmv_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    trans: cuda_types::cublas::cublasOperation_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    kl: ::core::ffi::c_int,
    ku: ::core::ffi::c_int,
    alpha: *const f32,
    A: *const f32,
    lda: ::core::ffi::c_int,
    x: *const f32,
    incx: ::core::ffi::c_int,
    beta: *const f32,
    y: *mut f32,
    incy: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasSgbmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasSgbmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasSgbmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasSgbmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(kl), ": ").as_bytes())?;
    crate::CudaDisplay::write(&kl, "cublasSgbmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ku), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ku, "cublasSgbmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasSgbmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasSgbmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasSgbmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasSgbmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasSgbmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasSgbmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasSgbmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasSgbmv_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasSgbmv_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    trans: cuda_types::cublas::cublasOperation_t,
    m: i64,
    n: i64,
    kl: i64,
    ku: i64,
    alpha: *const f32,
    A: *const f32,
    lda: i64,
    x: *const f32,
    incx: i64,
    beta: *const f32,
    y: *mut f32,
    incy: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasSgbmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasSgbmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasSgbmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasSgbmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(kl), ": ").as_bytes())?;
    crate::CudaDisplay::write(&kl, "cublasSgbmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ku), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ku, "cublasSgbmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasSgbmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasSgbmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasSgbmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasSgbmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasSgbmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasSgbmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasSgbmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasSgbmv_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasDgbmv_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    trans: cuda_types::cublas::cublasOperation_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    kl: ::core::ffi::c_int,
    ku: ::core::ffi::c_int,
    alpha: *const f64,
    A: *const f64,
    lda: ::core::ffi::c_int,
    x: *const f64,
    incx: ::core::ffi::c_int,
    beta: *const f64,
    y: *mut f64,
    incy: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasDgbmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasDgbmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasDgbmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasDgbmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(kl), ": ").as_bytes())?;
    crate::CudaDisplay::write(&kl, "cublasDgbmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ku), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ku, "cublasDgbmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasDgbmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasDgbmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasDgbmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasDgbmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasDgbmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasDgbmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasDgbmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasDgbmv_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasDgbmv_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    trans: cuda_types::cublas::cublasOperation_t,
    m: i64,
    n: i64,
    kl: i64,
    ku: i64,
    alpha: *const f64,
    A: *const f64,
    lda: i64,
    x: *const f64,
    incx: i64,
    beta: *const f64,
    y: *mut f64,
    incy: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasDgbmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasDgbmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasDgbmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasDgbmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(kl), ": ").as_bytes())?;
    crate::CudaDisplay::write(&kl, "cublasDgbmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ku), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ku, "cublasDgbmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasDgbmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasDgbmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasDgbmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasDgbmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasDgbmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasDgbmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasDgbmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasDgbmv_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasCgbmv_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    trans: cuda_types::cublas::cublasOperation_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    kl: ::core::ffi::c_int,
    ku: ::core::ffi::c_int,
    alpha: *const cuda_types::cublas::cuComplex,
    A: *const cuda_types::cublas::cuComplex,
    lda: ::core::ffi::c_int,
    x: *const cuda_types::cublas::cuComplex,
    incx: ::core::ffi::c_int,
    beta: *const cuda_types::cublas::cuComplex,
    y: *mut cuda_types::cublas::cuComplex,
    incy: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasCgbmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasCgbmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasCgbmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasCgbmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(kl), ": ").as_bytes())?;
    crate::CudaDisplay::write(&kl, "cublasCgbmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ku), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ku, "cublasCgbmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasCgbmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasCgbmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasCgbmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasCgbmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasCgbmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasCgbmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasCgbmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasCgbmv_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasCgbmv_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    trans: cuda_types::cublas::cublasOperation_t,
    m: i64,
    n: i64,
    kl: i64,
    ku: i64,
    alpha: *const cuda_types::cublas::cuComplex,
    A: *const cuda_types::cublas::cuComplex,
    lda: i64,
    x: *const cuda_types::cublas::cuComplex,
    incx: i64,
    beta: *const cuda_types::cublas::cuComplex,
    y: *mut cuda_types::cublas::cuComplex,
    incy: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasCgbmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasCgbmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasCgbmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasCgbmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(kl), ": ").as_bytes())?;
    crate::CudaDisplay::write(&kl, "cublasCgbmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ku), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ku, "cublasCgbmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasCgbmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasCgbmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasCgbmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasCgbmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasCgbmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasCgbmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasCgbmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasCgbmv_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasZgbmv_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    trans: cuda_types::cublas::cublasOperation_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    kl: ::core::ffi::c_int,
    ku: ::core::ffi::c_int,
    alpha: *const cuda_types::cublas::cuDoubleComplex,
    A: *const cuda_types::cublas::cuDoubleComplex,
    lda: ::core::ffi::c_int,
    x: *const cuda_types::cublas::cuDoubleComplex,
    incx: ::core::ffi::c_int,
    beta: *const cuda_types::cublas::cuDoubleComplex,
    y: *mut cuda_types::cublas::cuDoubleComplex,
    incy: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasZgbmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasZgbmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasZgbmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasZgbmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(kl), ": ").as_bytes())?;
    crate::CudaDisplay::write(&kl, "cublasZgbmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ku), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ku, "cublasZgbmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasZgbmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasZgbmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasZgbmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasZgbmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasZgbmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasZgbmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasZgbmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasZgbmv_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasZgbmv_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    trans: cuda_types::cublas::cublasOperation_t,
    m: i64,
    n: i64,
    kl: i64,
    ku: i64,
    alpha: *const cuda_types::cublas::cuDoubleComplex,
    A: *const cuda_types::cublas::cuDoubleComplex,
    lda: i64,
    x: *const cuda_types::cublas::cuDoubleComplex,
    incx: i64,
    beta: *const cuda_types::cublas::cuDoubleComplex,
    y: *mut cuda_types::cublas::cuDoubleComplex,
    incy: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasZgbmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasZgbmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasZgbmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasZgbmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(kl), ": ").as_bytes())?;
    crate::CudaDisplay::write(&kl, "cublasZgbmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ku), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ku, "cublasZgbmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasZgbmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasZgbmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasZgbmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasZgbmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasZgbmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasZgbmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasZgbmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasZgbmv_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasStrmv_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    trans: cuda_types::cublas::cublasOperation_t,
    diag: cuda_types::cublas::cublasDiagType_t,
    n: ::core::ffi::c_int,
    A: *const f32,
    lda: ::core::ffi::c_int,
    x: *mut f32,
    incx: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasStrmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasStrmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasStrmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(diag), ": ").as_bytes())?;
    crate::CudaDisplay::write(&diag, "cublasStrmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasStrmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasStrmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasStrmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasStrmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasStrmv_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasStrmv_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    trans: cuda_types::cublas::cublasOperation_t,
    diag: cuda_types::cublas::cublasDiagType_t,
    n: i64,
    A: *const f32,
    lda: i64,
    x: *mut f32,
    incx: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasStrmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasStrmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasStrmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(diag), ": ").as_bytes())?;
    crate::CudaDisplay::write(&diag, "cublasStrmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasStrmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasStrmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasStrmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasStrmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasStrmv_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasDtrmv_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    trans: cuda_types::cublas::cublasOperation_t,
    diag: cuda_types::cublas::cublasDiagType_t,
    n: ::core::ffi::c_int,
    A: *const f64,
    lda: ::core::ffi::c_int,
    x: *mut f64,
    incx: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasDtrmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasDtrmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasDtrmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(diag), ": ").as_bytes())?;
    crate::CudaDisplay::write(&diag, "cublasDtrmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasDtrmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasDtrmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasDtrmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasDtrmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasDtrmv_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasDtrmv_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    trans: cuda_types::cublas::cublasOperation_t,
    diag: cuda_types::cublas::cublasDiagType_t,
    n: i64,
    A: *const f64,
    lda: i64,
    x: *mut f64,
    incx: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasDtrmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasDtrmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasDtrmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(diag), ": ").as_bytes())?;
    crate::CudaDisplay::write(&diag, "cublasDtrmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasDtrmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasDtrmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasDtrmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasDtrmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasDtrmv_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasCtrmv_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    trans: cuda_types::cublas::cublasOperation_t,
    diag: cuda_types::cublas::cublasDiagType_t,
    n: ::core::ffi::c_int,
    A: *const cuda_types::cublas::cuComplex,
    lda: ::core::ffi::c_int,
    x: *mut cuda_types::cublas::cuComplex,
    incx: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasCtrmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasCtrmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasCtrmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(diag), ": ").as_bytes())?;
    crate::CudaDisplay::write(&diag, "cublasCtrmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasCtrmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasCtrmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasCtrmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasCtrmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasCtrmv_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasCtrmv_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    trans: cuda_types::cublas::cublasOperation_t,
    diag: cuda_types::cublas::cublasDiagType_t,
    n: i64,
    A: *const cuda_types::cublas::cuComplex,
    lda: i64,
    x: *mut cuda_types::cublas::cuComplex,
    incx: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasCtrmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasCtrmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasCtrmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(diag), ": ").as_bytes())?;
    crate::CudaDisplay::write(&diag, "cublasCtrmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasCtrmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasCtrmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasCtrmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasCtrmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasCtrmv_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasZtrmv_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    trans: cuda_types::cublas::cublasOperation_t,
    diag: cuda_types::cublas::cublasDiagType_t,
    n: ::core::ffi::c_int,
    A: *const cuda_types::cublas::cuDoubleComplex,
    lda: ::core::ffi::c_int,
    x: *mut cuda_types::cublas::cuDoubleComplex,
    incx: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasZtrmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasZtrmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasZtrmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(diag), ": ").as_bytes())?;
    crate::CudaDisplay::write(&diag, "cublasZtrmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasZtrmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasZtrmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasZtrmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasZtrmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasZtrmv_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasZtrmv_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    trans: cuda_types::cublas::cublasOperation_t,
    diag: cuda_types::cublas::cublasDiagType_t,
    n: i64,
    A: *const cuda_types::cublas::cuDoubleComplex,
    lda: i64,
    x: *mut cuda_types::cublas::cuDoubleComplex,
    incx: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasZtrmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasZtrmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasZtrmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(diag), ": ").as_bytes())?;
    crate::CudaDisplay::write(&diag, "cublasZtrmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasZtrmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasZtrmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasZtrmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasZtrmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasZtrmv_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasStbmv_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    trans: cuda_types::cublas::cublasOperation_t,
    diag: cuda_types::cublas::cublasDiagType_t,
    n: ::core::ffi::c_int,
    k: ::core::ffi::c_int,
    A: *const f32,
    lda: ::core::ffi::c_int,
    x: *mut f32,
    incx: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasStbmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasStbmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasStbmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(diag), ": ").as_bytes())?;
    crate::CudaDisplay::write(&diag, "cublasStbmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasStbmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(k), ": ").as_bytes())?;
    crate::CudaDisplay::write(&k, "cublasStbmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasStbmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasStbmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasStbmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasStbmv_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasStbmv_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    trans: cuda_types::cublas::cublasOperation_t,
    diag: cuda_types::cublas::cublasDiagType_t,
    n: i64,
    k: i64,
    A: *const f32,
    lda: i64,
    x: *mut f32,
    incx: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasStbmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasStbmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasStbmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(diag), ": ").as_bytes())?;
    crate::CudaDisplay::write(&diag, "cublasStbmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasStbmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(k), ": ").as_bytes())?;
    crate::CudaDisplay::write(&k, "cublasStbmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasStbmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasStbmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasStbmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasStbmv_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasDtbmv_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    trans: cuda_types::cublas::cublasOperation_t,
    diag: cuda_types::cublas::cublasDiagType_t,
    n: ::core::ffi::c_int,
    k: ::core::ffi::c_int,
    A: *const f64,
    lda: ::core::ffi::c_int,
    x: *mut f64,
    incx: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasDtbmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasDtbmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasDtbmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(diag), ": ").as_bytes())?;
    crate::CudaDisplay::write(&diag, "cublasDtbmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasDtbmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(k), ": ").as_bytes())?;
    crate::CudaDisplay::write(&k, "cublasDtbmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasDtbmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasDtbmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasDtbmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasDtbmv_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasDtbmv_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    trans: cuda_types::cublas::cublasOperation_t,
    diag: cuda_types::cublas::cublasDiagType_t,
    n: i64,
    k: i64,
    A: *const f64,
    lda: i64,
    x: *mut f64,
    incx: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasDtbmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasDtbmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasDtbmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(diag), ": ").as_bytes())?;
    crate::CudaDisplay::write(&diag, "cublasDtbmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasDtbmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(k), ": ").as_bytes())?;
    crate::CudaDisplay::write(&k, "cublasDtbmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasDtbmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasDtbmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasDtbmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasDtbmv_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasCtbmv_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    trans: cuda_types::cublas::cublasOperation_t,
    diag: cuda_types::cublas::cublasDiagType_t,
    n: ::core::ffi::c_int,
    k: ::core::ffi::c_int,
    A: *const cuda_types::cublas::cuComplex,
    lda: ::core::ffi::c_int,
    x: *mut cuda_types::cublas::cuComplex,
    incx: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasCtbmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasCtbmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasCtbmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(diag), ": ").as_bytes())?;
    crate::CudaDisplay::write(&diag, "cublasCtbmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasCtbmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(k), ": ").as_bytes())?;
    crate::CudaDisplay::write(&k, "cublasCtbmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasCtbmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasCtbmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasCtbmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasCtbmv_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasCtbmv_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    trans: cuda_types::cublas::cublasOperation_t,
    diag: cuda_types::cublas::cublasDiagType_t,
    n: i64,
    k: i64,
    A: *const cuda_types::cublas::cuComplex,
    lda: i64,
    x: *mut cuda_types::cublas::cuComplex,
    incx: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasCtbmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasCtbmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasCtbmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(diag), ": ").as_bytes())?;
    crate::CudaDisplay::write(&diag, "cublasCtbmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasCtbmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(k), ": ").as_bytes())?;
    crate::CudaDisplay::write(&k, "cublasCtbmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasCtbmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasCtbmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasCtbmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasCtbmv_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasZtbmv_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    trans: cuda_types::cublas::cublasOperation_t,
    diag: cuda_types::cublas::cublasDiagType_t,
    n: ::core::ffi::c_int,
    k: ::core::ffi::c_int,
    A: *const cuda_types::cublas::cuDoubleComplex,
    lda: ::core::ffi::c_int,
    x: *mut cuda_types::cublas::cuDoubleComplex,
    incx: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasZtbmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasZtbmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasZtbmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(diag), ": ").as_bytes())?;
    crate::CudaDisplay::write(&diag, "cublasZtbmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasZtbmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(k), ": ").as_bytes())?;
    crate::CudaDisplay::write(&k, "cublasZtbmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasZtbmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasZtbmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasZtbmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasZtbmv_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasZtbmv_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    trans: cuda_types::cublas::cublasOperation_t,
    diag: cuda_types::cublas::cublasDiagType_t,
    n: i64,
    k: i64,
    A: *const cuda_types::cublas::cuDoubleComplex,
    lda: i64,
    x: *mut cuda_types::cublas::cuDoubleComplex,
    incx: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasZtbmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasZtbmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasZtbmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(diag), ": ").as_bytes())?;
    crate::CudaDisplay::write(&diag, "cublasZtbmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasZtbmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(k), ": ").as_bytes())?;
    crate::CudaDisplay::write(&k, "cublasZtbmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasZtbmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasZtbmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasZtbmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasZtbmv_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasStpmv_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    trans: cuda_types::cublas::cublasOperation_t,
    diag: cuda_types::cublas::cublasDiagType_t,
    n: ::core::ffi::c_int,
    AP: *const f32,
    x: *mut f32,
    incx: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasStpmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasStpmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasStpmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(diag), ": ").as_bytes())?;
    crate::CudaDisplay::write(&diag, "cublasStpmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasStpmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(AP), ": ").as_bytes())?;
    crate::CudaDisplay::write(&AP, "cublasStpmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasStpmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasStpmv_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasStpmv_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    trans: cuda_types::cublas::cublasOperation_t,
    diag: cuda_types::cublas::cublasDiagType_t,
    n: i64,
    AP: *const f32,
    x: *mut f32,
    incx: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasStpmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasStpmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasStpmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(diag), ": ").as_bytes())?;
    crate::CudaDisplay::write(&diag, "cublasStpmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasStpmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(AP), ": ").as_bytes())?;
    crate::CudaDisplay::write(&AP, "cublasStpmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasStpmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasStpmv_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasDtpmv_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    trans: cuda_types::cublas::cublasOperation_t,
    diag: cuda_types::cublas::cublasDiagType_t,
    n: ::core::ffi::c_int,
    AP: *const f64,
    x: *mut f64,
    incx: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasDtpmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasDtpmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasDtpmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(diag), ": ").as_bytes())?;
    crate::CudaDisplay::write(&diag, "cublasDtpmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasDtpmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(AP), ": ").as_bytes())?;
    crate::CudaDisplay::write(&AP, "cublasDtpmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasDtpmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasDtpmv_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasDtpmv_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    trans: cuda_types::cublas::cublasOperation_t,
    diag: cuda_types::cublas::cublasDiagType_t,
    n: i64,
    AP: *const f64,
    x: *mut f64,
    incx: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasDtpmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasDtpmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasDtpmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(diag), ": ").as_bytes())?;
    crate::CudaDisplay::write(&diag, "cublasDtpmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasDtpmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(AP), ": ").as_bytes())?;
    crate::CudaDisplay::write(&AP, "cublasDtpmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasDtpmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasDtpmv_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasCtpmv_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    trans: cuda_types::cublas::cublasOperation_t,
    diag: cuda_types::cublas::cublasDiagType_t,
    n: ::core::ffi::c_int,
    AP: *const cuda_types::cublas::cuComplex,
    x: *mut cuda_types::cublas::cuComplex,
    incx: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasCtpmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasCtpmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasCtpmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(diag), ": ").as_bytes())?;
    crate::CudaDisplay::write(&diag, "cublasCtpmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasCtpmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(AP), ": ").as_bytes())?;
    crate::CudaDisplay::write(&AP, "cublasCtpmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasCtpmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasCtpmv_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasCtpmv_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    trans: cuda_types::cublas::cublasOperation_t,
    diag: cuda_types::cublas::cublasDiagType_t,
    n: i64,
    AP: *const cuda_types::cublas::cuComplex,
    x: *mut cuda_types::cublas::cuComplex,
    incx: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasCtpmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasCtpmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasCtpmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(diag), ": ").as_bytes())?;
    crate::CudaDisplay::write(&diag, "cublasCtpmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasCtpmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(AP), ": ").as_bytes())?;
    crate::CudaDisplay::write(&AP, "cublasCtpmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasCtpmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasCtpmv_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasZtpmv_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    trans: cuda_types::cublas::cublasOperation_t,
    diag: cuda_types::cublas::cublasDiagType_t,
    n: ::core::ffi::c_int,
    AP: *const cuda_types::cublas::cuDoubleComplex,
    x: *mut cuda_types::cublas::cuDoubleComplex,
    incx: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasZtpmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasZtpmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasZtpmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(diag), ": ").as_bytes())?;
    crate::CudaDisplay::write(&diag, "cublasZtpmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasZtpmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(AP), ": ").as_bytes())?;
    crate::CudaDisplay::write(&AP, "cublasZtpmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasZtpmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasZtpmv_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasZtpmv_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    trans: cuda_types::cublas::cublasOperation_t,
    diag: cuda_types::cublas::cublasDiagType_t,
    n: i64,
    AP: *const cuda_types::cublas::cuDoubleComplex,
    x: *mut cuda_types::cublas::cuDoubleComplex,
    incx: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasZtpmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasZtpmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasZtpmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(diag), ": ").as_bytes())?;
    crate::CudaDisplay::write(&diag, "cublasZtpmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasZtpmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(AP), ": ").as_bytes())?;
    crate::CudaDisplay::write(&AP, "cublasZtpmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasZtpmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasZtpmv_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasStrsv_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    trans: cuda_types::cublas::cublasOperation_t,
    diag: cuda_types::cublas::cublasDiagType_t,
    n: ::core::ffi::c_int,
    A: *const f32,
    lda: ::core::ffi::c_int,
    x: *mut f32,
    incx: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasStrsv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasStrsv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasStrsv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(diag), ": ").as_bytes())?;
    crate::CudaDisplay::write(&diag, "cublasStrsv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasStrsv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasStrsv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasStrsv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasStrsv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasStrsv_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasStrsv_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    trans: cuda_types::cublas::cublasOperation_t,
    diag: cuda_types::cublas::cublasDiagType_t,
    n: i64,
    A: *const f32,
    lda: i64,
    x: *mut f32,
    incx: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasStrsv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasStrsv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasStrsv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(diag), ": ").as_bytes())?;
    crate::CudaDisplay::write(&diag, "cublasStrsv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasStrsv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasStrsv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasStrsv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasStrsv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasStrsv_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasDtrsv_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    trans: cuda_types::cublas::cublasOperation_t,
    diag: cuda_types::cublas::cublasDiagType_t,
    n: ::core::ffi::c_int,
    A: *const f64,
    lda: ::core::ffi::c_int,
    x: *mut f64,
    incx: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasDtrsv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasDtrsv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasDtrsv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(diag), ": ").as_bytes())?;
    crate::CudaDisplay::write(&diag, "cublasDtrsv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasDtrsv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasDtrsv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasDtrsv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasDtrsv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasDtrsv_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasDtrsv_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    trans: cuda_types::cublas::cublasOperation_t,
    diag: cuda_types::cublas::cublasDiagType_t,
    n: i64,
    A: *const f64,
    lda: i64,
    x: *mut f64,
    incx: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasDtrsv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasDtrsv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasDtrsv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(diag), ": ").as_bytes())?;
    crate::CudaDisplay::write(&diag, "cublasDtrsv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasDtrsv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasDtrsv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasDtrsv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasDtrsv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasDtrsv_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasCtrsv_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    trans: cuda_types::cublas::cublasOperation_t,
    diag: cuda_types::cublas::cublasDiagType_t,
    n: ::core::ffi::c_int,
    A: *const cuda_types::cublas::cuComplex,
    lda: ::core::ffi::c_int,
    x: *mut cuda_types::cublas::cuComplex,
    incx: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasCtrsv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasCtrsv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasCtrsv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(diag), ": ").as_bytes())?;
    crate::CudaDisplay::write(&diag, "cublasCtrsv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasCtrsv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasCtrsv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasCtrsv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasCtrsv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasCtrsv_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasCtrsv_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    trans: cuda_types::cublas::cublasOperation_t,
    diag: cuda_types::cublas::cublasDiagType_t,
    n: i64,
    A: *const cuda_types::cublas::cuComplex,
    lda: i64,
    x: *mut cuda_types::cublas::cuComplex,
    incx: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasCtrsv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasCtrsv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasCtrsv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(diag), ": ").as_bytes())?;
    crate::CudaDisplay::write(&diag, "cublasCtrsv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasCtrsv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasCtrsv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasCtrsv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasCtrsv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasCtrsv_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasZtrsv_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    trans: cuda_types::cublas::cublasOperation_t,
    diag: cuda_types::cublas::cublasDiagType_t,
    n: ::core::ffi::c_int,
    A: *const cuda_types::cublas::cuDoubleComplex,
    lda: ::core::ffi::c_int,
    x: *mut cuda_types::cublas::cuDoubleComplex,
    incx: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasZtrsv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasZtrsv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasZtrsv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(diag), ": ").as_bytes())?;
    crate::CudaDisplay::write(&diag, "cublasZtrsv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasZtrsv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasZtrsv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasZtrsv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasZtrsv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasZtrsv_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasZtrsv_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    trans: cuda_types::cublas::cublasOperation_t,
    diag: cuda_types::cublas::cublasDiagType_t,
    n: i64,
    A: *const cuda_types::cublas::cuDoubleComplex,
    lda: i64,
    x: *mut cuda_types::cublas::cuDoubleComplex,
    incx: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasZtrsv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasZtrsv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasZtrsv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(diag), ": ").as_bytes())?;
    crate::CudaDisplay::write(&diag, "cublasZtrsv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasZtrsv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasZtrsv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasZtrsv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasZtrsv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasZtrsv_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasStpsv_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    trans: cuda_types::cublas::cublasOperation_t,
    diag: cuda_types::cublas::cublasDiagType_t,
    n: ::core::ffi::c_int,
    AP: *const f32,
    x: *mut f32,
    incx: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasStpsv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasStpsv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasStpsv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(diag), ": ").as_bytes())?;
    crate::CudaDisplay::write(&diag, "cublasStpsv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasStpsv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(AP), ": ").as_bytes())?;
    crate::CudaDisplay::write(&AP, "cublasStpsv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasStpsv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasStpsv_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasStpsv_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    trans: cuda_types::cublas::cublasOperation_t,
    diag: cuda_types::cublas::cublasDiagType_t,
    n: i64,
    AP: *const f32,
    x: *mut f32,
    incx: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasStpsv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasStpsv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasStpsv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(diag), ": ").as_bytes())?;
    crate::CudaDisplay::write(&diag, "cublasStpsv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasStpsv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(AP), ": ").as_bytes())?;
    crate::CudaDisplay::write(&AP, "cublasStpsv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasStpsv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasStpsv_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasDtpsv_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    trans: cuda_types::cublas::cublasOperation_t,
    diag: cuda_types::cublas::cublasDiagType_t,
    n: ::core::ffi::c_int,
    AP: *const f64,
    x: *mut f64,
    incx: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasDtpsv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasDtpsv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasDtpsv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(diag), ": ").as_bytes())?;
    crate::CudaDisplay::write(&diag, "cublasDtpsv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasDtpsv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(AP), ": ").as_bytes())?;
    crate::CudaDisplay::write(&AP, "cublasDtpsv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasDtpsv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasDtpsv_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasDtpsv_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    trans: cuda_types::cublas::cublasOperation_t,
    diag: cuda_types::cublas::cublasDiagType_t,
    n: i64,
    AP: *const f64,
    x: *mut f64,
    incx: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasDtpsv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasDtpsv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasDtpsv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(diag), ": ").as_bytes())?;
    crate::CudaDisplay::write(&diag, "cublasDtpsv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasDtpsv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(AP), ": ").as_bytes())?;
    crate::CudaDisplay::write(&AP, "cublasDtpsv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasDtpsv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasDtpsv_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasCtpsv_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    trans: cuda_types::cublas::cublasOperation_t,
    diag: cuda_types::cublas::cublasDiagType_t,
    n: ::core::ffi::c_int,
    AP: *const cuda_types::cublas::cuComplex,
    x: *mut cuda_types::cublas::cuComplex,
    incx: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasCtpsv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasCtpsv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasCtpsv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(diag), ": ").as_bytes())?;
    crate::CudaDisplay::write(&diag, "cublasCtpsv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasCtpsv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(AP), ": ").as_bytes())?;
    crate::CudaDisplay::write(&AP, "cublasCtpsv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasCtpsv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasCtpsv_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasCtpsv_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    trans: cuda_types::cublas::cublasOperation_t,
    diag: cuda_types::cublas::cublasDiagType_t,
    n: i64,
    AP: *const cuda_types::cublas::cuComplex,
    x: *mut cuda_types::cublas::cuComplex,
    incx: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasCtpsv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasCtpsv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasCtpsv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(diag), ": ").as_bytes())?;
    crate::CudaDisplay::write(&diag, "cublasCtpsv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasCtpsv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(AP), ": ").as_bytes())?;
    crate::CudaDisplay::write(&AP, "cublasCtpsv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasCtpsv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasCtpsv_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasZtpsv_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    trans: cuda_types::cublas::cublasOperation_t,
    diag: cuda_types::cublas::cublasDiagType_t,
    n: ::core::ffi::c_int,
    AP: *const cuda_types::cublas::cuDoubleComplex,
    x: *mut cuda_types::cublas::cuDoubleComplex,
    incx: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasZtpsv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasZtpsv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasZtpsv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(diag), ": ").as_bytes())?;
    crate::CudaDisplay::write(&diag, "cublasZtpsv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasZtpsv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(AP), ": ").as_bytes())?;
    crate::CudaDisplay::write(&AP, "cublasZtpsv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasZtpsv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasZtpsv_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasZtpsv_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    trans: cuda_types::cublas::cublasOperation_t,
    diag: cuda_types::cublas::cublasDiagType_t,
    n: i64,
    AP: *const cuda_types::cublas::cuDoubleComplex,
    x: *mut cuda_types::cublas::cuDoubleComplex,
    incx: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasZtpsv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasZtpsv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasZtpsv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(diag), ": ").as_bytes())?;
    crate::CudaDisplay::write(&diag, "cublasZtpsv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasZtpsv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(AP), ": ").as_bytes())?;
    crate::CudaDisplay::write(&AP, "cublasZtpsv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasZtpsv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasZtpsv_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasStbsv_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    trans: cuda_types::cublas::cublasOperation_t,
    diag: cuda_types::cublas::cublasDiagType_t,
    n: ::core::ffi::c_int,
    k: ::core::ffi::c_int,
    A: *const f32,
    lda: ::core::ffi::c_int,
    x: *mut f32,
    incx: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasStbsv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasStbsv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasStbsv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(diag), ": ").as_bytes())?;
    crate::CudaDisplay::write(&diag, "cublasStbsv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasStbsv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(k), ": ").as_bytes())?;
    crate::CudaDisplay::write(&k, "cublasStbsv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasStbsv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasStbsv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasStbsv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasStbsv_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasStbsv_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    trans: cuda_types::cublas::cublasOperation_t,
    diag: cuda_types::cublas::cublasDiagType_t,
    n: i64,
    k: i64,
    A: *const f32,
    lda: i64,
    x: *mut f32,
    incx: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasStbsv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasStbsv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasStbsv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(diag), ": ").as_bytes())?;
    crate::CudaDisplay::write(&diag, "cublasStbsv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasStbsv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(k), ": ").as_bytes())?;
    crate::CudaDisplay::write(&k, "cublasStbsv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasStbsv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasStbsv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasStbsv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasStbsv_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasDtbsv_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    trans: cuda_types::cublas::cublasOperation_t,
    diag: cuda_types::cublas::cublasDiagType_t,
    n: ::core::ffi::c_int,
    k: ::core::ffi::c_int,
    A: *const f64,
    lda: ::core::ffi::c_int,
    x: *mut f64,
    incx: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasDtbsv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasDtbsv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasDtbsv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(diag), ": ").as_bytes())?;
    crate::CudaDisplay::write(&diag, "cublasDtbsv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasDtbsv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(k), ": ").as_bytes())?;
    crate::CudaDisplay::write(&k, "cublasDtbsv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasDtbsv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasDtbsv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasDtbsv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasDtbsv_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasDtbsv_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    trans: cuda_types::cublas::cublasOperation_t,
    diag: cuda_types::cublas::cublasDiagType_t,
    n: i64,
    k: i64,
    A: *const f64,
    lda: i64,
    x: *mut f64,
    incx: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasDtbsv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasDtbsv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasDtbsv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(diag), ": ").as_bytes())?;
    crate::CudaDisplay::write(&diag, "cublasDtbsv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasDtbsv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(k), ": ").as_bytes())?;
    crate::CudaDisplay::write(&k, "cublasDtbsv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasDtbsv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasDtbsv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasDtbsv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasDtbsv_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasCtbsv_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    trans: cuda_types::cublas::cublasOperation_t,
    diag: cuda_types::cublas::cublasDiagType_t,
    n: ::core::ffi::c_int,
    k: ::core::ffi::c_int,
    A: *const cuda_types::cublas::cuComplex,
    lda: ::core::ffi::c_int,
    x: *mut cuda_types::cublas::cuComplex,
    incx: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasCtbsv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasCtbsv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasCtbsv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(diag), ": ").as_bytes())?;
    crate::CudaDisplay::write(&diag, "cublasCtbsv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasCtbsv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(k), ": ").as_bytes())?;
    crate::CudaDisplay::write(&k, "cublasCtbsv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasCtbsv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasCtbsv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasCtbsv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasCtbsv_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasCtbsv_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    trans: cuda_types::cublas::cublasOperation_t,
    diag: cuda_types::cublas::cublasDiagType_t,
    n: i64,
    k: i64,
    A: *const cuda_types::cublas::cuComplex,
    lda: i64,
    x: *mut cuda_types::cublas::cuComplex,
    incx: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasCtbsv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasCtbsv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasCtbsv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(diag), ": ").as_bytes())?;
    crate::CudaDisplay::write(&diag, "cublasCtbsv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasCtbsv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(k), ": ").as_bytes())?;
    crate::CudaDisplay::write(&k, "cublasCtbsv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasCtbsv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasCtbsv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasCtbsv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasCtbsv_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasZtbsv_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    trans: cuda_types::cublas::cublasOperation_t,
    diag: cuda_types::cublas::cublasDiagType_t,
    n: ::core::ffi::c_int,
    k: ::core::ffi::c_int,
    A: *const cuda_types::cublas::cuDoubleComplex,
    lda: ::core::ffi::c_int,
    x: *mut cuda_types::cublas::cuDoubleComplex,
    incx: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasZtbsv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasZtbsv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasZtbsv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(diag), ": ").as_bytes())?;
    crate::CudaDisplay::write(&diag, "cublasZtbsv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasZtbsv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(k), ": ").as_bytes())?;
    crate::CudaDisplay::write(&k, "cublasZtbsv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasZtbsv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasZtbsv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasZtbsv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasZtbsv_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasZtbsv_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    trans: cuda_types::cublas::cublasOperation_t,
    diag: cuda_types::cublas::cublasDiagType_t,
    n: i64,
    k: i64,
    A: *const cuda_types::cublas::cuDoubleComplex,
    lda: i64,
    x: *mut cuda_types::cublas::cuDoubleComplex,
    incx: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasZtbsv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasZtbsv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasZtbsv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(diag), ": ").as_bytes())?;
    crate::CudaDisplay::write(&diag, "cublasZtbsv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasZtbsv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(k), ": ").as_bytes())?;
    crate::CudaDisplay::write(&k, "cublasZtbsv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasZtbsv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasZtbsv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasZtbsv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasZtbsv_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasSsymv_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    n: ::core::ffi::c_int,
    alpha: *const f32,
    A: *const f32,
    lda: ::core::ffi::c_int,
    x: *const f32,
    incx: ::core::ffi::c_int,
    beta: *const f32,
    y: *mut f32,
    incy: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasSsymv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasSsymv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasSsymv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasSsymv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasSsymv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasSsymv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasSsymv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasSsymv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasSsymv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasSsymv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasSsymv_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasSsymv_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    n: i64,
    alpha: *const f32,
    A: *const f32,
    lda: i64,
    x: *const f32,
    incx: i64,
    beta: *const f32,
    y: *mut f32,
    incy: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasSsymv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasSsymv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasSsymv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasSsymv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasSsymv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasSsymv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasSsymv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasSsymv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasSsymv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasSsymv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasSsymv_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasDsymv_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    n: ::core::ffi::c_int,
    alpha: *const f64,
    A: *const f64,
    lda: ::core::ffi::c_int,
    x: *const f64,
    incx: ::core::ffi::c_int,
    beta: *const f64,
    y: *mut f64,
    incy: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasDsymv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasDsymv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasDsymv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasDsymv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasDsymv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasDsymv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasDsymv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasDsymv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasDsymv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasDsymv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasDsymv_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasDsymv_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    n: i64,
    alpha: *const f64,
    A: *const f64,
    lda: i64,
    x: *const f64,
    incx: i64,
    beta: *const f64,
    y: *mut f64,
    incy: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasDsymv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasDsymv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasDsymv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasDsymv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasDsymv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasDsymv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasDsymv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasDsymv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasDsymv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasDsymv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasDsymv_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasCsymv_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    n: ::core::ffi::c_int,
    alpha: *const cuda_types::cublas::cuComplex,
    A: *const cuda_types::cublas::cuComplex,
    lda: ::core::ffi::c_int,
    x: *const cuda_types::cublas::cuComplex,
    incx: ::core::ffi::c_int,
    beta: *const cuda_types::cublas::cuComplex,
    y: *mut cuda_types::cublas::cuComplex,
    incy: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasCsymv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasCsymv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasCsymv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasCsymv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasCsymv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasCsymv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasCsymv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasCsymv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasCsymv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasCsymv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasCsymv_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasCsymv_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    n: i64,
    alpha: *const cuda_types::cublas::cuComplex,
    A: *const cuda_types::cublas::cuComplex,
    lda: i64,
    x: *const cuda_types::cublas::cuComplex,
    incx: i64,
    beta: *const cuda_types::cublas::cuComplex,
    y: *mut cuda_types::cublas::cuComplex,
    incy: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasCsymv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasCsymv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasCsymv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasCsymv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasCsymv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasCsymv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasCsymv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasCsymv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasCsymv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasCsymv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasCsymv_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasZsymv_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    n: ::core::ffi::c_int,
    alpha: *const cuda_types::cublas::cuDoubleComplex,
    A: *const cuda_types::cublas::cuDoubleComplex,
    lda: ::core::ffi::c_int,
    x: *const cuda_types::cublas::cuDoubleComplex,
    incx: ::core::ffi::c_int,
    beta: *const cuda_types::cublas::cuDoubleComplex,
    y: *mut cuda_types::cublas::cuDoubleComplex,
    incy: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasZsymv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasZsymv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasZsymv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasZsymv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasZsymv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasZsymv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasZsymv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasZsymv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasZsymv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasZsymv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasZsymv_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasZsymv_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    n: i64,
    alpha: *const cuda_types::cublas::cuDoubleComplex,
    A: *const cuda_types::cublas::cuDoubleComplex,
    lda: i64,
    x: *const cuda_types::cublas::cuDoubleComplex,
    incx: i64,
    beta: *const cuda_types::cublas::cuDoubleComplex,
    y: *mut cuda_types::cublas::cuDoubleComplex,
    incy: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasZsymv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasZsymv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasZsymv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasZsymv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasZsymv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasZsymv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasZsymv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasZsymv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasZsymv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasZsymv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasZsymv_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasChemv_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    n: ::core::ffi::c_int,
    alpha: *const cuda_types::cublas::cuComplex,
    A: *const cuda_types::cublas::cuComplex,
    lda: ::core::ffi::c_int,
    x: *const cuda_types::cublas::cuComplex,
    incx: ::core::ffi::c_int,
    beta: *const cuda_types::cublas::cuComplex,
    y: *mut cuda_types::cublas::cuComplex,
    incy: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasChemv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasChemv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasChemv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasChemv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasChemv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasChemv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasChemv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasChemv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasChemv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasChemv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasChemv_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasChemv_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    n: i64,
    alpha: *const cuda_types::cublas::cuComplex,
    A: *const cuda_types::cublas::cuComplex,
    lda: i64,
    x: *const cuda_types::cublas::cuComplex,
    incx: i64,
    beta: *const cuda_types::cublas::cuComplex,
    y: *mut cuda_types::cublas::cuComplex,
    incy: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasChemv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasChemv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasChemv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasChemv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasChemv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasChemv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasChemv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasChemv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasChemv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasChemv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasChemv_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasZhemv_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    n: ::core::ffi::c_int,
    alpha: *const cuda_types::cublas::cuDoubleComplex,
    A: *const cuda_types::cublas::cuDoubleComplex,
    lda: ::core::ffi::c_int,
    x: *const cuda_types::cublas::cuDoubleComplex,
    incx: ::core::ffi::c_int,
    beta: *const cuda_types::cublas::cuDoubleComplex,
    y: *mut cuda_types::cublas::cuDoubleComplex,
    incy: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasZhemv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasZhemv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasZhemv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasZhemv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasZhemv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasZhemv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasZhemv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasZhemv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasZhemv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasZhemv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasZhemv_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasZhemv_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    n: i64,
    alpha: *const cuda_types::cublas::cuDoubleComplex,
    A: *const cuda_types::cublas::cuDoubleComplex,
    lda: i64,
    x: *const cuda_types::cublas::cuDoubleComplex,
    incx: i64,
    beta: *const cuda_types::cublas::cuDoubleComplex,
    y: *mut cuda_types::cublas::cuDoubleComplex,
    incy: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasZhemv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasZhemv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasZhemv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasZhemv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasZhemv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasZhemv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasZhemv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasZhemv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasZhemv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasZhemv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasZhemv_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasSsbmv_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    n: ::core::ffi::c_int,
    k: ::core::ffi::c_int,
    alpha: *const f32,
    A: *const f32,
    lda: ::core::ffi::c_int,
    x: *const f32,
    incx: ::core::ffi::c_int,
    beta: *const f32,
    y: *mut f32,
    incy: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasSsbmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasSsbmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasSsbmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(k), ": ").as_bytes())?;
    crate::CudaDisplay::write(&k, "cublasSsbmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasSsbmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasSsbmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasSsbmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasSsbmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasSsbmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasSsbmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasSsbmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasSsbmv_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasSsbmv_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    n: i64,
    k: i64,
    alpha: *const f32,
    A: *const f32,
    lda: i64,
    x: *const f32,
    incx: i64,
    beta: *const f32,
    y: *mut f32,
    incy: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasSsbmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasSsbmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasSsbmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(k), ": ").as_bytes())?;
    crate::CudaDisplay::write(&k, "cublasSsbmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasSsbmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasSsbmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasSsbmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasSsbmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasSsbmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasSsbmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasSsbmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasSsbmv_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasDsbmv_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    n: ::core::ffi::c_int,
    k: ::core::ffi::c_int,
    alpha: *const f64,
    A: *const f64,
    lda: ::core::ffi::c_int,
    x: *const f64,
    incx: ::core::ffi::c_int,
    beta: *const f64,
    y: *mut f64,
    incy: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasDsbmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasDsbmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasDsbmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(k), ": ").as_bytes())?;
    crate::CudaDisplay::write(&k, "cublasDsbmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasDsbmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasDsbmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasDsbmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasDsbmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasDsbmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasDsbmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasDsbmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasDsbmv_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasDsbmv_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    n: i64,
    k: i64,
    alpha: *const f64,
    A: *const f64,
    lda: i64,
    x: *const f64,
    incx: i64,
    beta: *const f64,
    y: *mut f64,
    incy: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasDsbmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasDsbmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasDsbmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(k), ": ").as_bytes())?;
    crate::CudaDisplay::write(&k, "cublasDsbmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasDsbmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasDsbmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasDsbmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasDsbmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasDsbmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasDsbmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasDsbmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasDsbmv_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasChbmv_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    n: ::core::ffi::c_int,
    k: ::core::ffi::c_int,
    alpha: *const cuda_types::cublas::cuComplex,
    A: *const cuda_types::cublas::cuComplex,
    lda: ::core::ffi::c_int,
    x: *const cuda_types::cublas::cuComplex,
    incx: ::core::ffi::c_int,
    beta: *const cuda_types::cublas::cuComplex,
    y: *mut cuda_types::cublas::cuComplex,
    incy: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasChbmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasChbmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasChbmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(k), ": ").as_bytes())?;
    crate::CudaDisplay::write(&k, "cublasChbmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasChbmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasChbmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasChbmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasChbmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasChbmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasChbmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasChbmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasChbmv_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasChbmv_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    n: i64,
    k: i64,
    alpha: *const cuda_types::cublas::cuComplex,
    A: *const cuda_types::cublas::cuComplex,
    lda: i64,
    x: *const cuda_types::cublas::cuComplex,
    incx: i64,
    beta: *const cuda_types::cublas::cuComplex,
    y: *mut cuda_types::cublas::cuComplex,
    incy: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasChbmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasChbmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasChbmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(k), ": ").as_bytes())?;
    crate::CudaDisplay::write(&k, "cublasChbmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasChbmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasChbmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasChbmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasChbmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasChbmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasChbmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasChbmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasChbmv_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasZhbmv_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    n: ::core::ffi::c_int,
    k: ::core::ffi::c_int,
    alpha: *const cuda_types::cublas::cuDoubleComplex,
    A: *const cuda_types::cublas::cuDoubleComplex,
    lda: ::core::ffi::c_int,
    x: *const cuda_types::cublas::cuDoubleComplex,
    incx: ::core::ffi::c_int,
    beta: *const cuda_types::cublas::cuDoubleComplex,
    y: *mut cuda_types::cublas::cuDoubleComplex,
    incy: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasZhbmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasZhbmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasZhbmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(k), ": ").as_bytes())?;
    crate::CudaDisplay::write(&k, "cublasZhbmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasZhbmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasZhbmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasZhbmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasZhbmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasZhbmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasZhbmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasZhbmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasZhbmv_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasZhbmv_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    n: i64,
    k: i64,
    alpha: *const cuda_types::cublas::cuDoubleComplex,
    A: *const cuda_types::cublas::cuDoubleComplex,
    lda: i64,
    x: *const cuda_types::cublas::cuDoubleComplex,
    incx: i64,
    beta: *const cuda_types::cublas::cuDoubleComplex,
    y: *mut cuda_types::cublas::cuDoubleComplex,
    incy: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasZhbmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasZhbmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasZhbmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(k), ": ").as_bytes())?;
    crate::CudaDisplay::write(&k, "cublasZhbmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasZhbmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasZhbmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasZhbmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasZhbmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasZhbmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasZhbmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasZhbmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasZhbmv_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasSspmv_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    n: ::core::ffi::c_int,
    alpha: *const f32,
    AP: *const f32,
    x: *const f32,
    incx: ::core::ffi::c_int,
    beta: *const f32,
    y: *mut f32,
    incy: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasSspmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasSspmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasSspmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasSspmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(AP), ": ").as_bytes())?;
    crate::CudaDisplay::write(&AP, "cublasSspmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasSspmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasSspmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasSspmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasSspmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasSspmv_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasSspmv_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    n: i64,
    alpha: *const f32,
    AP: *const f32,
    x: *const f32,
    incx: i64,
    beta: *const f32,
    y: *mut f32,
    incy: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasSspmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasSspmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasSspmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasSspmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(AP), ": ").as_bytes())?;
    crate::CudaDisplay::write(&AP, "cublasSspmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasSspmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasSspmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasSspmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasSspmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasSspmv_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasDspmv_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    n: ::core::ffi::c_int,
    alpha: *const f64,
    AP: *const f64,
    x: *const f64,
    incx: ::core::ffi::c_int,
    beta: *const f64,
    y: *mut f64,
    incy: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasDspmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasDspmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasDspmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasDspmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(AP), ": ").as_bytes())?;
    crate::CudaDisplay::write(&AP, "cublasDspmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasDspmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasDspmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasDspmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasDspmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasDspmv_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasDspmv_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    n: i64,
    alpha: *const f64,
    AP: *const f64,
    x: *const f64,
    incx: i64,
    beta: *const f64,
    y: *mut f64,
    incy: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasDspmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasDspmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasDspmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasDspmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(AP), ": ").as_bytes())?;
    crate::CudaDisplay::write(&AP, "cublasDspmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasDspmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasDspmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasDspmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasDspmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasDspmv_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasChpmv_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    n: ::core::ffi::c_int,
    alpha: *const cuda_types::cublas::cuComplex,
    AP: *const cuda_types::cublas::cuComplex,
    x: *const cuda_types::cublas::cuComplex,
    incx: ::core::ffi::c_int,
    beta: *const cuda_types::cublas::cuComplex,
    y: *mut cuda_types::cublas::cuComplex,
    incy: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasChpmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasChpmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasChpmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasChpmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(AP), ": ").as_bytes())?;
    crate::CudaDisplay::write(&AP, "cublasChpmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasChpmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasChpmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasChpmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasChpmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasChpmv_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasChpmv_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    n: i64,
    alpha: *const cuda_types::cublas::cuComplex,
    AP: *const cuda_types::cublas::cuComplex,
    x: *const cuda_types::cublas::cuComplex,
    incx: i64,
    beta: *const cuda_types::cublas::cuComplex,
    y: *mut cuda_types::cublas::cuComplex,
    incy: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasChpmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasChpmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasChpmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasChpmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(AP), ": ").as_bytes())?;
    crate::CudaDisplay::write(&AP, "cublasChpmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasChpmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasChpmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasChpmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasChpmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasChpmv_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasZhpmv_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    n: ::core::ffi::c_int,
    alpha: *const cuda_types::cublas::cuDoubleComplex,
    AP: *const cuda_types::cublas::cuDoubleComplex,
    x: *const cuda_types::cublas::cuDoubleComplex,
    incx: ::core::ffi::c_int,
    beta: *const cuda_types::cublas::cuDoubleComplex,
    y: *mut cuda_types::cublas::cuDoubleComplex,
    incy: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasZhpmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasZhpmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasZhpmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasZhpmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(AP), ": ").as_bytes())?;
    crate::CudaDisplay::write(&AP, "cublasZhpmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasZhpmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasZhpmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasZhpmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasZhpmv_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasZhpmv_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasZhpmv_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    n: i64,
    alpha: *const cuda_types::cublas::cuDoubleComplex,
    AP: *const cuda_types::cublas::cuDoubleComplex,
    x: *const cuda_types::cublas::cuDoubleComplex,
    incx: i64,
    beta: *const cuda_types::cublas::cuDoubleComplex,
    y: *mut cuda_types::cublas::cuDoubleComplex,
    incy: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasZhpmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasZhpmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasZhpmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasZhpmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(AP), ": ").as_bytes())?;
    crate::CudaDisplay::write(&AP, "cublasZhpmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasZhpmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasZhpmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasZhpmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasZhpmv_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasZhpmv_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasSger_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    alpha: *const f32,
    x: *const f32,
    incx: ::core::ffi::c_int,
    y: *const f32,
    incy: ::core::ffi::c_int,
    A: *mut f32,
    lda: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasSger_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasSger_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasSger_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasSger_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasSger_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasSger_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasSger_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasSger_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasSger_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasSger_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasSger_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    m: i64,
    n: i64,
    alpha: *const f32,
    x: *const f32,
    incx: i64,
    y: *const f32,
    incy: i64,
    A: *mut f32,
    lda: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasSger_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasSger_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasSger_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasSger_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasSger_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasSger_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasSger_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasSger_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasSger_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasSger_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasDger_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    alpha: *const f64,
    x: *const f64,
    incx: ::core::ffi::c_int,
    y: *const f64,
    incy: ::core::ffi::c_int,
    A: *mut f64,
    lda: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasDger_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasDger_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasDger_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasDger_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasDger_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasDger_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasDger_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasDger_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasDger_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasDger_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasDger_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    m: i64,
    n: i64,
    alpha: *const f64,
    x: *const f64,
    incx: i64,
    y: *const f64,
    incy: i64,
    A: *mut f64,
    lda: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasDger_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasDger_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasDger_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasDger_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasDger_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasDger_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasDger_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasDger_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasDger_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasDger_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasCgeru_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    alpha: *const cuda_types::cublas::cuComplex,
    x: *const cuda_types::cublas::cuComplex,
    incx: ::core::ffi::c_int,
    y: *const cuda_types::cublas::cuComplex,
    incy: ::core::ffi::c_int,
    A: *mut cuda_types::cublas::cuComplex,
    lda: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasCgeru_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasCgeru_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasCgeru_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasCgeru_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasCgeru_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasCgeru_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasCgeru_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasCgeru_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasCgeru_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasCgeru_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasCgeru_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    m: i64,
    n: i64,
    alpha: *const cuda_types::cublas::cuComplex,
    x: *const cuda_types::cublas::cuComplex,
    incx: i64,
    y: *const cuda_types::cublas::cuComplex,
    incy: i64,
    A: *mut cuda_types::cublas::cuComplex,
    lda: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasCgeru_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasCgeru_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasCgeru_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasCgeru_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasCgeru_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasCgeru_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasCgeru_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasCgeru_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasCgeru_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasCgeru_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasCgerc_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    alpha: *const cuda_types::cublas::cuComplex,
    x: *const cuda_types::cublas::cuComplex,
    incx: ::core::ffi::c_int,
    y: *const cuda_types::cublas::cuComplex,
    incy: ::core::ffi::c_int,
    A: *mut cuda_types::cublas::cuComplex,
    lda: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasCgerc_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasCgerc_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasCgerc_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasCgerc_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasCgerc_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasCgerc_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasCgerc_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasCgerc_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasCgerc_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasCgerc_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasCgerc_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    m: i64,
    n: i64,
    alpha: *const cuda_types::cublas::cuComplex,
    x: *const cuda_types::cublas::cuComplex,
    incx: i64,
    y: *const cuda_types::cublas::cuComplex,
    incy: i64,
    A: *mut cuda_types::cublas::cuComplex,
    lda: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasCgerc_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasCgerc_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasCgerc_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasCgerc_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasCgerc_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasCgerc_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasCgerc_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasCgerc_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasCgerc_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasCgerc_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasZgeru_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    alpha: *const cuda_types::cublas::cuDoubleComplex,
    x: *const cuda_types::cublas::cuDoubleComplex,
    incx: ::core::ffi::c_int,
    y: *const cuda_types::cublas::cuDoubleComplex,
    incy: ::core::ffi::c_int,
    A: *mut cuda_types::cublas::cuDoubleComplex,
    lda: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasZgeru_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasZgeru_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasZgeru_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasZgeru_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasZgeru_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasZgeru_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasZgeru_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasZgeru_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasZgeru_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasZgeru_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasZgeru_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    m: i64,
    n: i64,
    alpha: *const cuda_types::cublas::cuDoubleComplex,
    x: *const cuda_types::cublas::cuDoubleComplex,
    incx: i64,
    y: *const cuda_types::cublas::cuDoubleComplex,
    incy: i64,
    A: *mut cuda_types::cublas::cuDoubleComplex,
    lda: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasZgeru_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasZgeru_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasZgeru_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasZgeru_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasZgeru_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasZgeru_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasZgeru_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasZgeru_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasZgeru_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasZgeru_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasZgerc_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    alpha: *const cuda_types::cublas::cuDoubleComplex,
    x: *const cuda_types::cublas::cuDoubleComplex,
    incx: ::core::ffi::c_int,
    y: *const cuda_types::cublas::cuDoubleComplex,
    incy: ::core::ffi::c_int,
    A: *mut cuda_types::cublas::cuDoubleComplex,
    lda: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasZgerc_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasZgerc_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasZgerc_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasZgerc_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasZgerc_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasZgerc_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasZgerc_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasZgerc_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasZgerc_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasZgerc_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasZgerc_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    m: i64,
    n: i64,
    alpha: *const cuda_types::cublas::cuDoubleComplex,
    x: *const cuda_types::cublas::cuDoubleComplex,
    incx: i64,
    y: *const cuda_types::cublas::cuDoubleComplex,
    incy: i64,
    A: *mut cuda_types::cublas::cuDoubleComplex,
    lda: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasZgerc_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasZgerc_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasZgerc_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasZgerc_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasZgerc_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasZgerc_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasZgerc_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasZgerc_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasZgerc_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasZgerc_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasSsyr_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    n: ::core::ffi::c_int,
    alpha: *const f32,
    x: *const f32,
    incx: ::core::ffi::c_int,
    A: *mut f32,
    lda: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasSsyr_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasSsyr_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasSsyr_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasSsyr_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasSsyr_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasSsyr_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasSsyr_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasSsyr_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasSsyr_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    n: i64,
    alpha: *const f32,
    x: *const f32,
    incx: i64,
    A: *mut f32,
    lda: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasSsyr_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasSsyr_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasSsyr_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasSsyr_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasSsyr_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasSsyr_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasSsyr_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasSsyr_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasDsyr_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    n: ::core::ffi::c_int,
    alpha: *const f64,
    x: *const f64,
    incx: ::core::ffi::c_int,
    A: *mut f64,
    lda: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasDsyr_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasDsyr_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasDsyr_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasDsyr_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasDsyr_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasDsyr_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasDsyr_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasDsyr_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasDsyr_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    n: i64,
    alpha: *const f64,
    x: *const f64,
    incx: i64,
    A: *mut f64,
    lda: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasDsyr_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasDsyr_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasDsyr_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasDsyr_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasDsyr_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasDsyr_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasDsyr_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasDsyr_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasCsyr_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    n: ::core::ffi::c_int,
    alpha: *const cuda_types::cublas::cuComplex,
    x: *const cuda_types::cublas::cuComplex,
    incx: ::core::ffi::c_int,
    A: *mut cuda_types::cublas::cuComplex,
    lda: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasCsyr_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasCsyr_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasCsyr_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasCsyr_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasCsyr_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasCsyr_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasCsyr_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasCsyr_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasCsyr_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    n: i64,
    alpha: *const cuda_types::cublas::cuComplex,
    x: *const cuda_types::cublas::cuComplex,
    incx: i64,
    A: *mut cuda_types::cublas::cuComplex,
    lda: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasCsyr_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasCsyr_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasCsyr_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasCsyr_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasCsyr_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasCsyr_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasCsyr_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasCsyr_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasZsyr_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    n: ::core::ffi::c_int,
    alpha: *const cuda_types::cublas::cuDoubleComplex,
    x: *const cuda_types::cublas::cuDoubleComplex,
    incx: ::core::ffi::c_int,
    A: *mut cuda_types::cublas::cuDoubleComplex,
    lda: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasZsyr_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasZsyr_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasZsyr_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasZsyr_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasZsyr_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasZsyr_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasZsyr_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasZsyr_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasZsyr_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    n: i64,
    alpha: *const cuda_types::cublas::cuDoubleComplex,
    x: *const cuda_types::cublas::cuDoubleComplex,
    incx: i64,
    A: *mut cuda_types::cublas::cuDoubleComplex,
    lda: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasZsyr_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasZsyr_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasZsyr_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasZsyr_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasZsyr_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasZsyr_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasZsyr_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasZsyr_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasCher_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    n: ::core::ffi::c_int,
    alpha: *const f32,
    x: *const cuda_types::cublas::cuComplex,
    incx: ::core::ffi::c_int,
    A: *mut cuda_types::cublas::cuComplex,
    lda: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasCher_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasCher_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasCher_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasCher_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasCher_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasCher_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasCher_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasCher_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasCher_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    n: i64,
    alpha: *const f32,
    x: *const cuda_types::cublas::cuComplex,
    incx: i64,
    A: *mut cuda_types::cublas::cuComplex,
    lda: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasCher_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasCher_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasCher_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasCher_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasCher_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasCher_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasCher_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasCher_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasZher_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    n: ::core::ffi::c_int,
    alpha: *const f64,
    x: *const cuda_types::cublas::cuDoubleComplex,
    incx: ::core::ffi::c_int,
    A: *mut cuda_types::cublas::cuDoubleComplex,
    lda: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasZher_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasZher_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasZher_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasZher_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasZher_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasZher_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasZher_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasZher_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasZher_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    n: i64,
    alpha: *const f64,
    x: *const cuda_types::cublas::cuDoubleComplex,
    incx: i64,
    A: *mut cuda_types::cublas::cuDoubleComplex,
    lda: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasZher_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasZher_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasZher_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasZher_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasZher_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasZher_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasZher_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasZher_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasSspr_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    n: ::core::ffi::c_int,
    alpha: *const f32,
    x: *const f32,
    incx: ::core::ffi::c_int,
    AP: *mut f32,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasSspr_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasSspr_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasSspr_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasSspr_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasSspr_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasSspr_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(AP), ": ").as_bytes())?;
    crate::CudaDisplay::write(&AP, "cublasSspr_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasSspr_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    n: i64,
    alpha: *const f32,
    x: *const f32,
    incx: i64,
    AP: *mut f32,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasSspr_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasSspr_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasSspr_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasSspr_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasSspr_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasSspr_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(AP), ": ").as_bytes())?;
    crate::CudaDisplay::write(&AP, "cublasSspr_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasDspr_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    n: ::core::ffi::c_int,
    alpha: *const f64,
    x: *const f64,
    incx: ::core::ffi::c_int,
    AP: *mut f64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasDspr_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasDspr_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasDspr_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasDspr_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasDspr_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasDspr_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(AP), ": ").as_bytes())?;
    crate::CudaDisplay::write(&AP, "cublasDspr_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasDspr_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    n: i64,
    alpha: *const f64,
    x: *const f64,
    incx: i64,
    AP: *mut f64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasDspr_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasDspr_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasDspr_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasDspr_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasDspr_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasDspr_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(AP), ": ").as_bytes())?;
    crate::CudaDisplay::write(&AP, "cublasDspr_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasChpr_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    n: ::core::ffi::c_int,
    alpha: *const f32,
    x: *const cuda_types::cublas::cuComplex,
    incx: ::core::ffi::c_int,
    AP: *mut cuda_types::cublas::cuComplex,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasChpr_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasChpr_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasChpr_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasChpr_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasChpr_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasChpr_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(AP), ": ").as_bytes())?;
    crate::CudaDisplay::write(&AP, "cublasChpr_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasChpr_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    n: i64,
    alpha: *const f32,
    x: *const cuda_types::cublas::cuComplex,
    incx: i64,
    AP: *mut cuda_types::cublas::cuComplex,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasChpr_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasChpr_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasChpr_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasChpr_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasChpr_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasChpr_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(AP), ": ").as_bytes())?;
    crate::CudaDisplay::write(&AP, "cublasChpr_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasZhpr_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    n: ::core::ffi::c_int,
    alpha: *const f64,
    x: *const cuda_types::cublas::cuDoubleComplex,
    incx: ::core::ffi::c_int,
    AP: *mut cuda_types::cublas::cuDoubleComplex,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasZhpr_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasZhpr_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasZhpr_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasZhpr_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasZhpr_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasZhpr_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(AP), ": ").as_bytes())?;
    crate::CudaDisplay::write(&AP, "cublasZhpr_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasZhpr_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    n: i64,
    alpha: *const f64,
    x: *const cuda_types::cublas::cuDoubleComplex,
    incx: i64,
    AP: *mut cuda_types::cublas::cuDoubleComplex,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasZhpr_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasZhpr_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasZhpr_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasZhpr_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasZhpr_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasZhpr_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(AP), ": ").as_bytes())?;
    crate::CudaDisplay::write(&AP, "cublasZhpr_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasSsyr2_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    n: ::core::ffi::c_int,
    alpha: *const f32,
    x: *const f32,
    incx: ::core::ffi::c_int,
    y: *const f32,
    incy: ::core::ffi::c_int,
    A: *mut f32,
    lda: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasSsyr2_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasSsyr2_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasSsyr2_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasSsyr2_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasSsyr2_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasSsyr2_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasSsyr2_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasSsyr2_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasSsyr2_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasSsyr2_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasSsyr2_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    n: i64,
    alpha: *const f32,
    x: *const f32,
    incx: i64,
    y: *const f32,
    incy: i64,
    A: *mut f32,
    lda: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasSsyr2_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasSsyr2_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasSsyr2_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasSsyr2_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasSsyr2_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasSsyr2_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasSsyr2_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasSsyr2_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasSsyr2_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasSsyr2_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasDsyr2_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    n: ::core::ffi::c_int,
    alpha: *const f64,
    x: *const f64,
    incx: ::core::ffi::c_int,
    y: *const f64,
    incy: ::core::ffi::c_int,
    A: *mut f64,
    lda: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasDsyr2_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasDsyr2_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasDsyr2_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasDsyr2_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasDsyr2_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasDsyr2_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasDsyr2_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasDsyr2_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasDsyr2_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasDsyr2_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasDsyr2_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    n: i64,
    alpha: *const f64,
    x: *const f64,
    incx: i64,
    y: *const f64,
    incy: i64,
    A: *mut f64,
    lda: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasDsyr2_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasDsyr2_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasDsyr2_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasDsyr2_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasDsyr2_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasDsyr2_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasDsyr2_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasDsyr2_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasDsyr2_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasDsyr2_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasCsyr2_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    n: ::core::ffi::c_int,
    alpha: *const cuda_types::cublas::cuComplex,
    x: *const cuda_types::cublas::cuComplex,
    incx: ::core::ffi::c_int,
    y: *const cuda_types::cublas::cuComplex,
    incy: ::core::ffi::c_int,
    A: *mut cuda_types::cublas::cuComplex,
    lda: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasCsyr2_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasCsyr2_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasCsyr2_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasCsyr2_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasCsyr2_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasCsyr2_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasCsyr2_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasCsyr2_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasCsyr2_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasCsyr2_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasCsyr2_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    n: i64,
    alpha: *const cuda_types::cublas::cuComplex,
    x: *const cuda_types::cublas::cuComplex,
    incx: i64,
    y: *const cuda_types::cublas::cuComplex,
    incy: i64,
    A: *mut cuda_types::cublas::cuComplex,
    lda: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasCsyr2_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasCsyr2_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasCsyr2_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasCsyr2_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasCsyr2_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasCsyr2_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasCsyr2_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasCsyr2_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasCsyr2_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasCsyr2_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasZsyr2_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    n: ::core::ffi::c_int,
    alpha: *const cuda_types::cublas::cuDoubleComplex,
    x: *const cuda_types::cublas::cuDoubleComplex,
    incx: ::core::ffi::c_int,
    y: *const cuda_types::cublas::cuDoubleComplex,
    incy: ::core::ffi::c_int,
    A: *mut cuda_types::cublas::cuDoubleComplex,
    lda: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasZsyr2_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasZsyr2_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasZsyr2_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasZsyr2_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasZsyr2_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasZsyr2_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasZsyr2_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasZsyr2_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasZsyr2_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasZsyr2_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasZsyr2_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    n: i64,
    alpha: *const cuda_types::cublas::cuDoubleComplex,
    x: *const cuda_types::cublas::cuDoubleComplex,
    incx: i64,
    y: *const cuda_types::cublas::cuDoubleComplex,
    incy: i64,
    A: *mut cuda_types::cublas::cuDoubleComplex,
    lda: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasZsyr2_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasZsyr2_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasZsyr2_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasZsyr2_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasZsyr2_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasZsyr2_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasZsyr2_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasZsyr2_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasZsyr2_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasZsyr2_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasCher2_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    n: ::core::ffi::c_int,
    alpha: *const cuda_types::cublas::cuComplex,
    x: *const cuda_types::cublas::cuComplex,
    incx: ::core::ffi::c_int,
    y: *const cuda_types::cublas::cuComplex,
    incy: ::core::ffi::c_int,
    A: *mut cuda_types::cublas::cuComplex,
    lda: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasCher2_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasCher2_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasCher2_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasCher2_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasCher2_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasCher2_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasCher2_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasCher2_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasCher2_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasCher2_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasCher2_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    n: i64,
    alpha: *const cuda_types::cublas::cuComplex,
    x: *const cuda_types::cublas::cuComplex,
    incx: i64,
    y: *const cuda_types::cublas::cuComplex,
    incy: i64,
    A: *mut cuda_types::cublas::cuComplex,
    lda: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasCher2_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasCher2_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasCher2_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasCher2_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasCher2_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasCher2_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasCher2_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasCher2_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasCher2_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasCher2_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasZher2_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    n: ::core::ffi::c_int,
    alpha: *const cuda_types::cublas::cuDoubleComplex,
    x: *const cuda_types::cublas::cuDoubleComplex,
    incx: ::core::ffi::c_int,
    y: *const cuda_types::cublas::cuDoubleComplex,
    incy: ::core::ffi::c_int,
    A: *mut cuda_types::cublas::cuDoubleComplex,
    lda: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasZher2_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasZher2_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasZher2_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasZher2_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasZher2_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasZher2_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasZher2_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasZher2_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasZher2_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasZher2_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasZher2_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    n: i64,
    alpha: *const cuda_types::cublas::cuDoubleComplex,
    x: *const cuda_types::cublas::cuDoubleComplex,
    incx: i64,
    y: *const cuda_types::cublas::cuDoubleComplex,
    incy: i64,
    A: *mut cuda_types::cublas::cuDoubleComplex,
    lda: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasZher2_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasZher2_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasZher2_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasZher2_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasZher2_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasZher2_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasZher2_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasZher2_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasZher2_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasZher2_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasSspr2_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    n: ::core::ffi::c_int,
    alpha: *const f32,
    x: *const f32,
    incx: ::core::ffi::c_int,
    y: *const f32,
    incy: ::core::ffi::c_int,
    AP: *mut f32,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasSspr2_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasSspr2_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasSspr2_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasSspr2_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasSspr2_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasSspr2_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasSspr2_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasSspr2_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(AP), ": ").as_bytes())?;
    crate::CudaDisplay::write(&AP, "cublasSspr2_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasSspr2_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    n: i64,
    alpha: *const f32,
    x: *const f32,
    incx: i64,
    y: *const f32,
    incy: i64,
    AP: *mut f32,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasSspr2_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasSspr2_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasSspr2_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasSspr2_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasSspr2_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasSspr2_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasSspr2_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasSspr2_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(AP), ": ").as_bytes())?;
    crate::CudaDisplay::write(&AP, "cublasSspr2_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasDspr2_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    n: ::core::ffi::c_int,
    alpha: *const f64,
    x: *const f64,
    incx: ::core::ffi::c_int,
    y: *const f64,
    incy: ::core::ffi::c_int,
    AP: *mut f64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasDspr2_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasDspr2_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasDspr2_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasDspr2_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasDspr2_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasDspr2_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasDspr2_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasDspr2_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(AP), ": ").as_bytes())?;
    crate::CudaDisplay::write(&AP, "cublasDspr2_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasDspr2_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    n: i64,
    alpha: *const f64,
    x: *const f64,
    incx: i64,
    y: *const f64,
    incy: i64,
    AP: *mut f64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasDspr2_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasDspr2_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasDspr2_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasDspr2_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasDspr2_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasDspr2_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasDspr2_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasDspr2_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(AP), ": ").as_bytes())?;
    crate::CudaDisplay::write(&AP, "cublasDspr2_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasChpr2_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    n: ::core::ffi::c_int,
    alpha: *const cuda_types::cublas::cuComplex,
    x: *const cuda_types::cublas::cuComplex,
    incx: ::core::ffi::c_int,
    y: *const cuda_types::cublas::cuComplex,
    incy: ::core::ffi::c_int,
    AP: *mut cuda_types::cublas::cuComplex,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasChpr2_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasChpr2_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasChpr2_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasChpr2_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasChpr2_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasChpr2_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasChpr2_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasChpr2_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(AP), ": ").as_bytes())?;
    crate::CudaDisplay::write(&AP, "cublasChpr2_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasChpr2_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    n: i64,
    alpha: *const cuda_types::cublas::cuComplex,
    x: *const cuda_types::cublas::cuComplex,
    incx: i64,
    y: *const cuda_types::cublas::cuComplex,
    incy: i64,
    AP: *mut cuda_types::cublas::cuComplex,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasChpr2_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasChpr2_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasChpr2_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasChpr2_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasChpr2_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasChpr2_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasChpr2_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasChpr2_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(AP), ": ").as_bytes())?;
    crate::CudaDisplay::write(&AP, "cublasChpr2_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasZhpr2_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    n: ::core::ffi::c_int,
    alpha: *const cuda_types::cublas::cuDoubleComplex,
    x: *const cuda_types::cublas::cuDoubleComplex,
    incx: ::core::ffi::c_int,
    y: *const cuda_types::cublas::cuDoubleComplex,
    incy: ::core::ffi::c_int,
    AP: *mut cuda_types::cublas::cuDoubleComplex,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasZhpr2_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasZhpr2_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasZhpr2_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasZhpr2_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasZhpr2_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasZhpr2_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasZhpr2_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasZhpr2_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(AP), ": ").as_bytes())?;
    crate::CudaDisplay::write(&AP, "cublasZhpr2_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasZhpr2_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    n: i64,
    alpha: *const cuda_types::cublas::cuDoubleComplex,
    x: *const cuda_types::cublas::cuDoubleComplex,
    incx: i64,
    y: *const cuda_types::cublas::cuDoubleComplex,
    incy: i64,
    AP: *mut cuda_types::cublas::cuDoubleComplex,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasZhpr2_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasZhpr2_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasZhpr2_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasZhpr2_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasZhpr2_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasZhpr2_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasZhpr2_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasZhpr2_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(AP), ": ").as_bytes())?;
    crate::CudaDisplay::write(&AP, "cublasZhpr2_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasSgemvBatched(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    trans: cuda_types::cublas::cublasOperation_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    alpha: *const f32,
    Aarray: *const *const f32,
    lda: ::core::ffi::c_int,
    xarray: *const *const f32,
    incx: ::core::ffi::c_int,
    beta: *const f32,
    yarray: *const *mut f32,
    incy: ::core::ffi::c_int,
    batchCount: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasSgemvBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasSgemvBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasSgemvBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasSgemvBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasSgemvBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Aarray), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Aarray, "cublasSgemvBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasSgemvBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(xarray), ": ").as_bytes())?;
    crate::CudaDisplay::write(&xarray, "cublasSgemvBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasSgemvBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasSgemvBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(yarray), ": ").as_bytes())?;
    crate::CudaDisplay::write(&yarray, "cublasSgemvBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasSgemvBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(batchCount), ": ").as_bytes())?;
    crate::CudaDisplay::write(&batchCount, "cublasSgemvBatched", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasSgemvBatched_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    trans: cuda_types::cublas::cublasOperation_t,
    m: i64,
    n: i64,
    alpha: *const f32,
    Aarray: *const *const f32,
    lda: i64,
    xarray: *const *const f32,
    incx: i64,
    beta: *const f32,
    yarray: *const *mut f32,
    incy: i64,
    batchCount: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasSgemvBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasSgemvBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasSgemvBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasSgemvBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasSgemvBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Aarray), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Aarray, "cublasSgemvBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasSgemvBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(xarray), ": ").as_bytes())?;
    crate::CudaDisplay::write(&xarray, "cublasSgemvBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasSgemvBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasSgemvBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(yarray), ": ").as_bytes())?;
    crate::CudaDisplay::write(&yarray, "cublasSgemvBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasSgemvBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(batchCount), ": ").as_bytes())?;
    crate::CudaDisplay::write(&batchCount, "cublasSgemvBatched_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasDgemvBatched(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    trans: cuda_types::cublas::cublasOperation_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    alpha: *const f64,
    Aarray: *const *const f64,
    lda: ::core::ffi::c_int,
    xarray: *const *const f64,
    incx: ::core::ffi::c_int,
    beta: *const f64,
    yarray: *const *mut f64,
    incy: ::core::ffi::c_int,
    batchCount: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasDgemvBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasDgemvBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasDgemvBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasDgemvBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasDgemvBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Aarray), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Aarray, "cublasDgemvBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasDgemvBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(xarray), ": ").as_bytes())?;
    crate::CudaDisplay::write(&xarray, "cublasDgemvBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasDgemvBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasDgemvBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(yarray), ": ").as_bytes())?;
    crate::CudaDisplay::write(&yarray, "cublasDgemvBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasDgemvBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(batchCount), ": ").as_bytes())?;
    crate::CudaDisplay::write(&batchCount, "cublasDgemvBatched", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasDgemvBatched_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    trans: cuda_types::cublas::cublasOperation_t,
    m: i64,
    n: i64,
    alpha: *const f64,
    Aarray: *const *const f64,
    lda: i64,
    xarray: *const *const f64,
    incx: i64,
    beta: *const f64,
    yarray: *const *mut f64,
    incy: i64,
    batchCount: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasDgemvBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasDgemvBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasDgemvBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasDgemvBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasDgemvBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Aarray), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Aarray, "cublasDgemvBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasDgemvBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(xarray), ": ").as_bytes())?;
    crate::CudaDisplay::write(&xarray, "cublasDgemvBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasDgemvBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasDgemvBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(yarray), ": ").as_bytes())?;
    crate::CudaDisplay::write(&yarray, "cublasDgemvBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasDgemvBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(batchCount), ": ").as_bytes())?;
    crate::CudaDisplay::write(&batchCount, "cublasDgemvBatched_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasCgemvBatched(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    trans: cuda_types::cublas::cublasOperation_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    alpha: *const cuda_types::cublas::cuComplex,
    Aarray: *const *const cuda_types::cublas::cuComplex,
    lda: ::core::ffi::c_int,
    xarray: *const *const cuda_types::cublas::cuComplex,
    incx: ::core::ffi::c_int,
    beta: *const cuda_types::cublas::cuComplex,
    yarray: *const *mut cuda_types::cublas::cuComplex,
    incy: ::core::ffi::c_int,
    batchCount: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasCgemvBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasCgemvBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasCgemvBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasCgemvBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasCgemvBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Aarray), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Aarray, "cublasCgemvBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasCgemvBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(xarray), ": ").as_bytes())?;
    crate::CudaDisplay::write(&xarray, "cublasCgemvBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasCgemvBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasCgemvBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(yarray), ": ").as_bytes())?;
    crate::CudaDisplay::write(&yarray, "cublasCgemvBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasCgemvBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(batchCount), ": ").as_bytes())?;
    crate::CudaDisplay::write(&batchCount, "cublasCgemvBatched", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasCgemvBatched_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    trans: cuda_types::cublas::cublasOperation_t,
    m: i64,
    n: i64,
    alpha: *const cuda_types::cublas::cuComplex,
    Aarray: *const *const cuda_types::cublas::cuComplex,
    lda: i64,
    xarray: *const *const cuda_types::cublas::cuComplex,
    incx: i64,
    beta: *const cuda_types::cublas::cuComplex,
    yarray: *const *mut cuda_types::cublas::cuComplex,
    incy: i64,
    batchCount: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasCgemvBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasCgemvBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasCgemvBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasCgemvBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasCgemvBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Aarray), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Aarray, "cublasCgemvBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasCgemvBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(xarray), ": ").as_bytes())?;
    crate::CudaDisplay::write(&xarray, "cublasCgemvBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasCgemvBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasCgemvBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(yarray), ": ").as_bytes())?;
    crate::CudaDisplay::write(&yarray, "cublasCgemvBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasCgemvBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(batchCount), ": ").as_bytes())?;
    crate::CudaDisplay::write(&batchCount, "cublasCgemvBatched_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasZgemvBatched(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    trans: cuda_types::cublas::cublasOperation_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    alpha: *const cuda_types::cublas::cuDoubleComplex,
    Aarray: *const *const cuda_types::cublas::cuDoubleComplex,
    lda: ::core::ffi::c_int,
    xarray: *const *const cuda_types::cublas::cuDoubleComplex,
    incx: ::core::ffi::c_int,
    beta: *const cuda_types::cublas::cuDoubleComplex,
    yarray: *const *mut cuda_types::cublas::cuDoubleComplex,
    incy: ::core::ffi::c_int,
    batchCount: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasZgemvBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasZgemvBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasZgemvBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasZgemvBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasZgemvBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Aarray), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Aarray, "cublasZgemvBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasZgemvBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(xarray), ": ").as_bytes())?;
    crate::CudaDisplay::write(&xarray, "cublasZgemvBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasZgemvBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasZgemvBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(yarray), ": ").as_bytes())?;
    crate::CudaDisplay::write(&yarray, "cublasZgemvBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasZgemvBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(batchCount), ": ").as_bytes())?;
    crate::CudaDisplay::write(&batchCount, "cublasZgemvBatched", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasZgemvBatched_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    trans: cuda_types::cublas::cublasOperation_t,
    m: i64,
    n: i64,
    alpha: *const cuda_types::cublas::cuDoubleComplex,
    Aarray: *const *const cuda_types::cublas::cuDoubleComplex,
    lda: i64,
    xarray: *const *const cuda_types::cublas::cuDoubleComplex,
    incx: i64,
    beta: *const cuda_types::cublas::cuDoubleComplex,
    yarray: *const *mut cuda_types::cublas::cuDoubleComplex,
    incy: i64,
    batchCount: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasZgemvBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasZgemvBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasZgemvBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasZgemvBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasZgemvBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Aarray), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Aarray, "cublasZgemvBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasZgemvBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(xarray), ": ").as_bytes())?;
    crate::CudaDisplay::write(&xarray, "cublasZgemvBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasZgemvBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasZgemvBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(yarray), ": ").as_bytes())?;
    crate::CudaDisplay::write(&yarray, "cublasZgemvBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasZgemvBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(batchCount), ": ").as_bytes())?;
    crate::CudaDisplay::write(&batchCount, "cublasZgemvBatched_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasHSHgemvBatched(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    trans: cuda_types::cublas::cublasOperation_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    alpha: *const f32,
    Aarray: *const *const cuda_types::cublas::__half,
    lda: ::core::ffi::c_int,
    xarray: *const *const cuda_types::cublas::__half,
    incx: ::core::ffi::c_int,
    beta: *const f32,
    yarray: *const *mut cuda_types::cublas::__half,
    incy: ::core::ffi::c_int,
    batchCount: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasHSHgemvBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasHSHgemvBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasHSHgemvBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasHSHgemvBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasHSHgemvBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Aarray), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Aarray, "cublasHSHgemvBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasHSHgemvBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(xarray), ": ").as_bytes())?;
    crate::CudaDisplay::write(&xarray, "cublasHSHgemvBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasHSHgemvBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasHSHgemvBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(yarray), ": ").as_bytes())?;
    crate::CudaDisplay::write(&yarray, "cublasHSHgemvBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasHSHgemvBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(batchCount), ": ").as_bytes())?;
    crate::CudaDisplay::write(&batchCount, "cublasHSHgemvBatched", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasHSHgemvBatched_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    trans: cuda_types::cublas::cublasOperation_t,
    m: i64,
    n: i64,
    alpha: *const f32,
    Aarray: *const *const cuda_types::cublas::__half,
    lda: i64,
    xarray: *const *const cuda_types::cublas::__half,
    incx: i64,
    beta: *const f32,
    yarray: *const *mut cuda_types::cublas::__half,
    incy: i64,
    batchCount: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasHSHgemvBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasHSHgemvBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasHSHgemvBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasHSHgemvBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasHSHgemvBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Aarray), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Aarray, "cublasHSHgemvBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasHSHgemvBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(xarray), ": ").as_bytes())?;
    crate::CudaDisplay::write(&xarray, "cublasHSHgemvBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasHSHgemvBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasHSHgemvBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(yarray), ": ").as_bytes())?;
    crate::CudaDisplay::write(&yarray, "cublasHSHgemvBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasHSHgemvBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(batchCount), ": ").as_bytes())?;
    crate::CudaDisplay::write(&batchCount, "cublasHSHgemvBatched_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasHSSgemvBatched(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    trans: cuda_types::cublas::cublasOperation_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    alpha: *const f32,
    Aarray: *const *const cuda_types::cublas::__half,
    lda: ::core::ffi::c_int,
    xarray: *const *const cuda_types::cublas::__half,
    incx: ::core::ffi::c_int,
    beta: *const f32,
    yarray: *const *mut f32,
    incy: ::core::ffi::c_int,
    batchCount: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasHSSgemvBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasHSSgemvBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasHSSgemvBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasHSSgemvBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasHSSgemvBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Aarray), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Aarray, "cublasHSSgemvBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasHSSgemvBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(xarray), ": ").as_bytes())?;
    crate::CudaDisplay::write(&xarray, "cublasHSSgemvBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasHSSgemvBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasHSSgemvBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(yarray), ": ").as_bytes())?;
    crate::CudaDisplay::write(&yarray, "cublasHSSgemvBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasHSSgemvBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(batchCount), ": ").as_bytes())?;
    crate::CudaDisplay::write(&batchCount, "cublasHSSgemvBatched", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasHSSgemvBatched_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    trans: cuda_types::cublas::cublasOperation_t,
    m: i64,
    n: i64,
    alpha: *const f32,
    Aarray: *const *const cuda_types::cublas::__half,
    lda: i64,
    xarray: *const *const cuda_types::cublas::__half,
    incx: i64,
    beta: *const f32,
    yarray: *const *mut f32,
    incy: i64,
    batchCount: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasHSSgemvBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasHSSgemvBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasHSSgemvBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasHSSgemvBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasHSSgemvBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Aarray), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Aarray, "cublasHSSgemvBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasHSSgemvBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(xarray), ": ").as_bytes())?;
    crate::CudaDisplay::write(&xarray, "cublasHSSgemvBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasHSSgemvBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasHSSgemvBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(yarray), ": ").as_bytes())?;
    crate::CudaDisplay::write(&yarray, "cublasHSSgemvBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasHSSgemvBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(batchCount), ": ").as_bytes())?;
    crate::CudaDisplay::write(&batchCount, "cublasHSSgemvBatched_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasTSTgemvBatched(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    trans: cuda_types::cublas::cublasOperation_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    alpha: *const f32,
    Aarray: *const *const cuda_types::cublas::__nv_bfloat16,
    lda: ::core::ffi::c_int,
    xarray: *const *const cuda_types::cublas::__nv_bfloat16,
    incx: ::core::ffi::c_int,
    beta: *const f32,
    yarray: *const *mut cuda_types::cublas::__nv_bfloat16,
    incy: ::core::ffi::c_int,
    batchCount: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasTSTgemvBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasTSTgemvBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasTSTgemvBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasTSTgemvBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasTSTgemvBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Aarray), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Aarray, "cublasTSTgemvBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasTSTgemvBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(xarray), ": ").as_bytes())?;
    crate::CudaDisplay::write(&xarray, "cublasTSTgemvBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasTSTgemvBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasTSTgemvBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(yarray), ": ").as_bytes())?;
    crate::CudaDisplay::write(&yarray, "cublasTSTgemvBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasTSTgemvBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(batchCount), ": ").as_bytes())?;
    crate::CudaDisplay::write(&batchCount, "cublasTSTgemvBatched", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasTSTgemvBatched_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    trans: cuda_types::cublas::cublasOperation_t,
    m: i64,
    n: i64,
    alpha: *const f32,
    Aarray: *const *const cuda_types::cublas::__nv_bfloat16,
    lda: i64,
    xarray: *const *const cuda_types::cublas::__nv_bfloat16,
    incx: i64,
    beta: *const f32,
    yarray: *const *mut cuda_types::cublas::__nv_bfloat16,
    incy: i64,
    batchCount: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasTSTgemvBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasTSTgemvBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasTSTgemvBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasTSTgemvBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasTSTgemvBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Aarray), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Aarray, "cublasTSTgemvBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasTSTgemvBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(xarray), ": ").as_bytes())?;
    crate::CudaDisplay::write(&xarray, "cublasTSTgemvBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasTSTgemvBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasTSTgemvBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(yarray), ": ").as_bytes())?;
    crate::CudaDisplay::write(&yarray, "cublasTSTgemvBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasTSTgemvBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(batchCount), ": ").as_bytes())?;
    crate::CudaDisplay::write(&batchCount, "cublasTSTgemvBatched_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasTSSgemvBatched(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    trans: cuda_types::cublas::cublasOperation_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    alpha: *const f32,
    Aarray: *const *const cuda_types::cublas::__nv_bfloat16,
    lda: ::core::ffi::c_int,
    xarray: *const *const cuda_types::cublas::__nv_bfloat16,
    incx: ::core::ffi::c_int,
    beta: *const f32,
    yarray: *const *mut f32,
    incy: ::core::ffi::c_int,
    batchCount: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasTSSgemvBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasTSSgemvBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasTSSgemvBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasTSSgemvBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasTSSgemvBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Aarray), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Aarray, "cublasTSSgemvBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasTSSgemvBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(xarray), ": ").as_bytes())?;
    crate::CudaDisplay::write(&xarray, "cublasTSSgemvBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasTSSgemvBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasTSSgemvBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(yarray), ": ").as_bytes())?;
    crate::CudaDisplay::write(&yarray, "cublasTSSgemvBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasTSSgemvBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(batchCount), ": ").as_bytes())?;
    crate::CudaDisplay::write(&batchCount, "cublasTSSgemvBatched", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasTSSgemvBatched_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    trans: cuda_types::cublas::cublasOperation_t,
    m: i64,
    n: i64,
    alpha: *const f32,
    Aarray: *const *const cuda_types::cublas::__nv_bfloat16,
    lda: i64,
    xarray: *const *const cuda_types::cublas::__nv_bfloat16,
    incx: i64,
    beta: *const f32,
    yarray: *const *mut f32,
    incy: i64,
    batchCount: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasTSSgemvBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasTSSgemvBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasTSSgemvBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasTSSgemvBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasTSSgemvBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Aarray), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Aarray, "cublasTSSgemvBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasTSSgemvBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(xarray), ": ").as_bytes())?;
    crate::CudaDisplay::write(&xarray, "cublasTSSgemvBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasTSSgemvBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasTSSgemvBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(yarray), ": ").as_bytes())?;
    crate::CudaDisplay::write(&yarray, "cublasTSSgemvBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasTSSgemvBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(batchCount), ": ").as_bytes())?;
    crate::CudaDisplay::write(&batchCount, "cublasTSSgemvBatched_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasSgemvStridedBatched(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    trans: cuda_types::cublas::cublasOperation_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    alpha: *const f32,
    A: *const f32,
    lda: ::core::ffi::c_int,
    strideA: ::core::ffi::c_longlong,
    x: *const f32,
    incx: ::core::ffi::c_int,
    stridex: ::core::ffi::c_longlong,
    beta: *const f32,
    y: *mut f32,
    incy: ::core::ffi::c_int,
    stridey: ::core::ffi::c_longlong,
    batchCount: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasSgemvStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasSgemvStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasSgemvStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasSgemvStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasSgemvStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasSgemvStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasSgemvStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(strideA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&strideA, "cublasSgemvStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasSgemvStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasSgemvStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(stridex), ": ").as_bytes())?;
    crate::CudaDisplay::write(&stridex, "cublasSgemvStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasSgemvStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasSgemvStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasSgemvStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(stridey), ": ").as_bytes())?;
    crate::CudaDisplay::write(&stridey, "cublasSgemvStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(batchCount), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &batchCount,
        "cublasSgemvStridedBatched",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cublasSgemvStridedBatched_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    trans: cuda_types::cublas::cublasOperation_t,
    m: i64,
    n: i64,
    alpha: *const f32,
    A: *const f32,
    lda: i64,
    strideA: ::core::ffi::c_longlong,
    x: *const f32,
    incx: i64,
    stridex: ::core::ffi::c_longlong,
    beta: *const f32,
    y: *mut f32,
    incy: i64,
    stridey: ::core::ffi::c_longlong,
    batchCount: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasSgemvStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasSgemvStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasSgemvStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasSgemvStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasSgemvStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasSgemvStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasSgemvStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(strideA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &strideA,
        "cublasSgemvStridedBatched_64",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasSgemvStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasSgemvStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(stridex), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &stridex,
        "cublasSgemvStridedBatched_64",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasSgemvStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasSgemvStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasSgemvStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(stridey), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &stridey,
        "cublasSgemvStridedBatched_64",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(batchCount), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &batchCount,
        "cublasSgemvStridedBatched_64",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cublasDgemvStridedBatched(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    trans: cuda_types::cublas::cublasOperation_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    alpha: *const f64,
    A: *const f64,
    lda: ::core::ffi::c_int,
    strideA: ::core::ffi::c_longlong,
    x: *const f64,
    incx: ::core::ffi::c_int,
    stridex: ::core::ffi::c_longlong,
    beta: *const f64,
    y: *mut f64,
    incy: ::core::ffi::c_int,
    stridey: ::core::ffi::c_longlong,
    batchCount: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasDgemvStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasDgemvStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasDgemvStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasDgemvStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasDgemvStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasDgemvStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasDgemvStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(strideA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&strideA, "cublasDgemvStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasDgemvStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasDgemvStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(stridex), ": ").as_bytes())?;
    crate::CudaDisplay::write(&stridex, "cublasDgemvStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasDgemvStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasDgemvStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasDgemvStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(stridey), ": ").as_bytes())?;
    crate::CudaDisplay::write(&stridey, "cublasDgemvStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(batchCount), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &batchCount,
        "cublasDgemvStridedBatched",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cublasDgemvStridedBatched_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    trans: cuda_types::cublas::cublasOperation_t,
    m: i64,
    n: i64,
    alpha: *const f64,
    A: *const f64,
    lda: i64,
    strideA: ::core::ffi::c_longlong,
    x: *const f64,
    incx: i64,
    stridex: ::core::ffi::c_longlong,
    beta: *const f64,
    y: *mut f64,
    incy: i64,
    stridey: ::core::ffi::c_longlong,
    batchCount: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasDgemvStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasDgemvStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasDgemvStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasDgemvStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasDgemvStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasDgemvStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasDgemvStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(strideA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &strideA,
        "cublasDgemvStridedBatched_64",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasDgemvStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasDgemvStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(stridex), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &stridex,
        "cublasDgemvStridedBatched_64",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasDgemvStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasDgemvStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasDgemvStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(stridey), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &stridey,
        "cublasDgemvStridedBatched_64",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(batchCount), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &batchCount,
        "cublasDgemvStridedBatched_64",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cublasCgemvStridedBatched(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    trans: cuda_types::cublas::cublasOperation_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    alpha: *const cuda_types::cublas::cuComplex,
    A: *const cuda_types::cublas::cuComplex,
    lda: ::core::ffi::c_int,
    strideA: ::core::ffi::c_longlong,
    x: *const cuda_types::cublas::cuComplex,
    incx: ::core::ffi::c_int,
    stridex: ::core::ffi::c_longlong,
    beta: *const cuda_types::cublas::cuComplex,
    y: *mut cuda_types::cublas::cuComplex,
    incy: ::core::ffi::c_int,
    stridey: ::core::ffi::c_longlong,
    batchCount: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasCgemvStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasCgemvStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasCgemvStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasCgemvStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasCgemvStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasCgemvStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasCgemvStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(strideA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&strideA, "cublasCgemvStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasCgemvStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasCgemvStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(stridex), ": ").as_bytes())?;
    crate::CudaDisplay::write(&stridex, "cublasCgemvStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasCgemvStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasCgemvStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasCgemvStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(stridey), ": ").as_bytes())?;
    crate::CudaDisplay::write(&stridey, "cublasCgemvStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(batchCount), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &batchCount,
        "cublasCgemvStridedBatched",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cublasCgemvStridedBatched_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    trans: cuda_types::cublas::cublasOperation_t,
    m: i64,
    n: i64,
    alpha: *const cuda_types::cublas::cuComplex,
    A: *const cuda_types::cublas::cuComplex,
    lda: i64,
    strideA: ::core::ffi::c_longlong,
    x: *const cuda_types::cublas::cuComplex,
    incx: i64,
    stridex: ::core::ffi::c_longlong,
    beta: *const cuda_types::cublas::cuComplex,
    y: *mut cuda_types::cublas::cuComplex,
    incy: i64,
    stridey: ::core::ffi::c_longlong,
    batchCount: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasCgemvStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasCgemvStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasCgemvStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasCgemvStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasCgemvStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasCgemvStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasCgemvStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(strideA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &strideA,
        "cublasCgemvStridedBatched_64",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasCgemvStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasCgemvStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(stridex), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &stridex,
        "cublasCgemvStridedBatched_64",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasCgemvStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasCgemvStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasCgemvStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(stridey), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &stridey,
        "cublasCgemvStridedBatched_64",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(batchCount), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &batchCount,
        "cublasCgemvStridedBatched_64",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cublasZgemvStridedBatched(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    trans: cuda_types::cublas::cublasOperation_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    alpha: *const cuda_types::cublas::cuDoubleComplex,
    A: *const cuda_types::cublas::cuDoubleComplex,
    lda: ::core::ffi::c_int,
    strideA: ::core::ffi::c_longlong,
    x: *const cuda_types::cublas::cuDoubleComplex,
    incx: ::core::ffi::c_int,
    stridex: ::core::ffi::c_longlong,
    beta: *const cuda_types::cublas::cuDoubleComplex,
    y: *mut cuda_types::cublas::cuDoubleComplex,
    incy: ::core::ffi::c_int,
    stridey: ::core::ffi::c_longlong,
    batchCount: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasZgemvStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasZgemvStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasZgemvStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasZgemvStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasZgemvStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasZgemvStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasZgemvStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(strideA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&strideA, "cublasZgemvStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasZgemvStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasZgemvStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(stridex), ": ").as_bytes())?;
    crate::CudaDisplay::write(&stridex, "cublasZgemvStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasZgemvStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasZgemvStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasZgemvStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(stridey), ": ").as_bytes())?;
    crate::CudaDisplay::write(&stridey, "cublasZgemvStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(batchCount), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &batchCount,
        "cublasZgemvStridedBatched",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cublasZgemvStridedBatched_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    trans: cuda_types::cublas::cublasOperation_t,
    m: i64,
    n: i64,
    alpha: *const cuda_types::cublas::cuDoubleComplex,
    A: *const cuda_types::cublas::cuDoubleComplex,
    lda: i64,
    strideA: ::core::ffi::c_longlong,
    x: *const cuda_types::cublas::cuDoubleComplex,
    incx: i64,
    stridex: ::core::ffi::c_longlong,
    beta: *const cuda_types::cublas::cuDoubleComplex,
    y: *mut cuda_types::cublas::cuDoubleComplex,
    incy: i64,
    stridey: ::core::ffi::c_longlong,
    batchCount: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasZgemvStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasZgemvStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasZgemvStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasZgemvStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasZgemvStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasZgemvStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasZgemvStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(strideA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &strideA,
        "cublasZgemvStridedBatched_64",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasZgemvStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasZgemvStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(stridex), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &stridex,
        "cublasZgemvStridedBatched_64",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasZgemvStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasZgemvStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasZgemvStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(stridey), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &stridey,
        "cublasZgemvStridedBatched_64",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(batchCount), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &batchCount,
        "cublasZgemvStridedBatched_64",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cublasHSHgemvStridedBatched(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    trans: cuda_types::cublas::cublasOperation_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    alpha: *const f32,
    A: *const cuda_types::cublas::__half,
    lda: ::core::ffi::c_int,
    strideA: ::core::ffi::c_longlong,
    x: *const cuda_types::cublas::__half,
    incx: ::core::ffi::c_int,
    stridex: ::core::ffi::c_longlong,
    beta: *const f32,
    y: *mut cuda_types::cublas::__half,
    incy: ::core::ffi::c_int,
    stridey: ::core::ffi::c_longlong,
    batchCount: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasHSHgemvStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasHSHgemvStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasHSHgemvStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasHSHgemvStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasHSHgemvStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasHSHgemvStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasHSHgemvStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(strideA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&strideA, "cublasHSHgemvStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasHSHgemvStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasHSHgemvStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(stridex), ": ").as_bytes())?;
    crate::CudaDisplay::write(&stridex, "cublasHSHgemvStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasHSHgemvStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasHSHgemvStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasHSHgemvStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(stridey), ": ").as_bytes())?;
    crate::CudaDisplay::write(&stridey, "cublasHSHgemvStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(batchCount), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &batchCount,
        "cublasHSHgemvStridedBatched",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cublasHSHgemvStridedBatched_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    trans: cuda_types::cublas::cublasOperation_t,
    m: i64,
    n: i64,
    alpha: *const f32,
    A: *const cuda_types::cublas::__half,
    lda: i64,
    strideA: ::core::ffi::c_longlong,
    x: *const cuda_types::cublas::__half,
    incx: i64,
    stridex: ::core::ffi::c_longlong,
    beta: *const f32,
    y: *mut cuda_types::cublas::__half,
    incy: i64,
    stridey: ::core::ffi::c_longlong,
    batchCount: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &handle,
        "cublasHSHgemvStridedBatched_64",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &trans,
        "cublasHSHgemvStridedBatched_64",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasHSHgemvStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasHSHgemvStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &alpha,
        "cublasHSHgemvStridedBatched_64",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasHSHgemvStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasHSHgemvStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(strideA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &strideA,
        "cublasHSHgemvStridedBatched_64",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasHSHgemvStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasHSHgemvStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(stridex), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &stridex,
        "cublasHSHgemvStridedBatched_64",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasHSHgemvStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasHSHgemvStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasHSHgemvStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(stridey), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &stridey,
        "cublasHSHgemvStridedBatched_64",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(batchCount), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &batchCount,
        "cublasHSHgemvStridedBatched_64",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cublasHSSgemvStridedBatched(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    trans: cuda_types::cublas::cublasOperation_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    alpha: *const f32,
    A: *const cuda_types::cublas::__half,
    lda: ::core::ffi::c_int,
    strideA: ::core::ffi::c_longlong,
    x: *const cuda_types::cublas::__half,
    incx: ::core::ffi::c_int,
    stridex: ::core::ffi::c_longlong,
    beta: *const f32,
    y: *mut f32,
    incy: ::core::ffi::c_int,
    stridey: ::core::ffi::c_longlong,
    batchCount: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasHSSgemvStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasHSSgemvStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasHSSgemvStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasHSSgemvStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasHSSgemvStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasHSSgemvStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasHSSgemvStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(strideA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&strideA, "cublasHSSgemvStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasHSSgemvStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasHSSgemvStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(stridex), ": ").as_bytes())?;
    crate::CudaDisplay::write(&stridex, "cublasHSSgemvStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasHSSgemvStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasHSSgemvStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasHSSgemvStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(stridey), ": ").as_bytes())?;
    crate::CudaDisplay::write(&stridey, "cublasHSSgemvStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(batchCount), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &batchCount,
        "cublasHSSgemvStridedBatched",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cublasHSSgemvStridedBatched_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    trans: cuda_types::cublas::cublasOperation_t,
    m: i64,
    n: i64,
    alpha: *const f32,
    A: *const cuda_types::cublas::__half,
    lda: i64,
    strideA: ::core::ffi::c_longlong,
    x: *const cuda_types::cublas::__half,
    incx: i64,
    stridex: ::core::ffi::c_longlong,
    beta: *const f32,
    y: *mut f32,
    incy: i64,
    stridey: ::core::ffi::c_longlong,
    batchCount: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &handle,
        "cublasHSSgemvStridedBatched_64",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &trans,
        "cublasHSSgemvStridedBatched_64",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasHSSgemvStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasHSSgemvStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &alpha,
        "cublasHSSgemvStridedBatched_64",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasHSSgemvStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasHSSgemvStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(strideA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &strideA,
        "cublasHSSgemvStridedBatched_64",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasHSSgemvStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasHSSgemvStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(stridex), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &stridex,
        "cublasHSSgemvStridedBatched_64",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasHSSgemvStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasHSSgemvStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasHSSgemvStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(stridey), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &stridey,
        "cublasHSSgemvStridedBatched_64",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(batchCount), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &batchCount,
        "cublasHSSgemvStridedBatched_64",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cublasTSTgemvStridedBatched(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    trans: cuda_types::cublas::cublasOperation_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    alpha: *const f32,
    A: *const cuda_types::cublas::__nv_bfloat16,
    lda: ::core::ffi::c_int,
    strideA: ::core::ffi::c_longlong,
    x: *const cuda_types::cublas::__nv_bfloat16,
    incx: ::core::ffi::c_int,
    stridex: ::core::ffi::c_longlong,
    beta: *const f32,
    y: *mut cuda_types::cublas::__nv_bfloat16,
    incy: ::core::ffi::c_int,
    stridey: ::core::ffi::c_longlong,
    batchCount: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasTSTgemvStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasTSTgemvStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasTSTgemvStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasTSTgemvStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasTSTgemvStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasTSTgemvStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasTSTgemvStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(strideA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&strideA, "cublasTSTgemvStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasTSTgemvStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasTSTgemvStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(stridex), ": ").as_bytes())?;
    crate::CudaDisplay::write(&stridex, "cublasTSTgemvStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasTSTgemvStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasTSTgemvStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasTSTgemvStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(stridey), ": ").as_bytes())?;
    crate::CudaDisplay::write(&stridey, "cublasTSTgemvStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(batchCount), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &batchCount,
        "cublasTSTgemvStridedBatched",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cublasTSTgemvStridedBatched_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    trans: cuda_types::cublas::cublasOperation_t,
    m: i64,
    n: i64,
    alpha: *const f32,
    A: *const cuda_types::cublas::__nv_bfloat16,
    lda: i64,
    strideA: ::core::ffi::c_longlong,
    x: *const cuda_types::cublas::__nv_bfloat16,
    incx: i64,
    stridex: ::core::ffi::c_longlong,
    beta: *const f32,
    y: *mut cuda_types::cublas::__nv_bfloat16,
    incy: i64,
    stridey: ::core::ffi::c_longlong,
    batchCount: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &handle,
        "cublasTSTgemvStridedBatched_64",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &trans,
        "cublasTSTgemvStridedBatched_64",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasTSTgemvStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasTSTgemvStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &alpha,
        "cublasTSTgemvStridedBatched_64",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasTSTgemvStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasTSTgemvStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(strideA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &strideA,
        "cublasTSTgemvStridedBatched_64",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasTSTgemvStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasTSTgemvStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(stridex), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &stridex,
        "cublasTSTgemvStridedBatched_64",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasTSTgemvStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasTSTgemvStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasTSTgemvStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(stridey), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &stridey,
        "cublasTSTgemvStridedBatched_64",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(batchCount), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &batchCount,
        "cublasTSTgemvStridedBatched_64",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cublasTSSgemvStridedBatched(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    trans: cuda_types::cublas::cublasOperation_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    alpha: *const f32,
    A: *const cuda_types::cublas::__nv_bfloat16,
    lda: ::core::ffi::c_int,
    strideA: ::core::ffi::c_longlong,
    x: *const cuda_types::cublas::__nv_bfloat16,
    incx: ::core::ffi::c_int,
    stridex: ::core::ffi::c_longlong,
    beta: *const f32,
    y: *mut f32,
    incy: ::core::ffi::c_int,
    stridey: ::core::ffi::c_longlong,
    batchCount: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasTSSgemvStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasTSSgemvStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasTSSgemvStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasTSSgemvStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasTSSgemvStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasTSSgemvStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasTSSgemvStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(strideA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&strideA, "cublasTSSgemvStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasTSSgemvStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasTSSgemvStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(stridex), ": ").as_bytes())?;
    crate::CudaDisplay::write(&stridex, "cublasTSSgemvStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasTSSgemvStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasTSSgemvStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasTSSgemvStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(stridey), ": ").as_bytes())?;
    crate::CudaDisplay::write(&stridey, "cublasTSSgemvStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(batchCount), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &batchCount,
        "cublasTSSgemvStridedBatched",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cublasTSSgemvStridedBatched_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    trans: cuda_types::cublas::cublasOperation_t,
    m: i64,
    n: i64,
    alpha: *const f32,
    A: *const cuda_types::cublas::__nv_bfloat16,
    lda: i64,
    strideA: ::core::ffi::c_longlong,
    x: *const cuda_types::cublas::__nv_bfloat16,
    incx: i64,
    stridex: ::core::ffi::c_longlong,
    beta: *const f32,
    y: *mut f32,
    incy: i64,
    stridey: ::core::ffi::c_longlong,
    batchCount: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &handle,
        "cublasTSSgemvStridedBatched_64",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &trans,
        "cublasTSSgemvStridedBatched_64",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasTSSgemvStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasTSSgemvStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &alpha,
        "cublasTSSgemvStridedBatched_64",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasTSSgemvStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasTSSgemvStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(strideA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &strideA,
        "cublasTSSgemvStridedBatched_64",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasTSSgemvStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasTSSgemvStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(stridex), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &stridex,
        "cublasTSSgemvStridedBatched_64",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasTSSgemvStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cublasTSSgemvStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incy, "cublasTSSgemvStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(stridey), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &stridey,
        "cublasTSSgemvStridedBatched_64",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(batchCount), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &batchCount,
        "cublasTSSgemvStridedBatched_64",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cublasSgemm_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    transa: cuda_types::cublas::cublasOperation_t,
    transb: cuda_types::cublas::cublasOperation_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    k: ::core::ffi::c_int,
    alpha: *const f32,
    A: *const f32,
    lda: ::core::ffi::c_int,
    B: *const f32,
    ldb: ::core::ffi::c_int,
    beta: *const f32,
    C: *mut f32,
    ldc: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasSgemm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transa), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transa, "cublasSgemm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transb, "cublasSgemm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasSgemm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasSgemm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(k), ": ").as_bytes())?;
    crate::CudaDisplay::write(&k, "cublasSgemm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasSgemm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasSgemm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasSgemm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(B), ": ").as_bytes())?;
    crate::CudaDisplay::write(&B, "cublasSgemm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cublasSgemm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasSgemm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(C), ": ").as_bytes())?;
    crate::CudaDisplay::write(&C, "cublasSgemm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cublasSgemm_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasSgemm_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    transa: cuda_types::cublas::cublasOperation_t,
    transb: cuda_types::cublas::cublasOperation_t,
    m: i64,
    n: i64,
    k: i64,
    alpha: *const f32,
    A: *const f32,
    lda: i64,
    B: *const f32,
    ldb: i64,
    beta: *const f32,
    C: *mut f32,
    ldc: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasSgemm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transa), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transa, "cublasSgemm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transb, "cublasSgemm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasSgemm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasSgemm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(k), ": ").as_bytes())?;
    crate::CudaDisplay::write(&k, "cublasSgemm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasSgemm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasSgemm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasSgemm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(B), ": ").as_bytes())?;
    crate::CudaDisplay::write(&B, "cublasSgemm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cublasSgemm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasSgemm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(C), ": ").as_bytes())?;
    crate::CudaDisplay::write(&C, "cublasSgemm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cublasSgemm_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasDgemm_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    transa: cuda_types::cublas::cublasOperation_t,
    transb: cuda_types::cublas::cublasOperation_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    k: ::core::ffi::c_int,
    alpha: *const f64,
    A: *const f64,
    lda: ::core::ffi::c_int,
    B: *const f64,
    ldb: ::core::ffi::c_int,
    beta: *const f64,
    C: *mut f64,
    ldc: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasDgemm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transa), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transa, "cublasDgemm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transb, "cublasDgemm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasDgemm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasDgemm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(k), ": ").as_bytes())?;
    crate::CudaDisplay::write(&k, "cublasDgemm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasDgemm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasDgemm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasDgemm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(B), ": ").as_bytes())?;
    crate::CudaDisplay::write(&B, "cublasDgemm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cublasDgemm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasDgemm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(C), ": ").as_bytes())?;
    crate::CudaDisplay::write(&C, "cublasDgemm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cublasDgemm_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasDgemm_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    transa: cuda_types::cublas::cublasOperation_t,
    transb: cuda_types::cublas::cublasOperation_t,
    m: i64,
    n: i64,
    k: i64,
    alpha: *const f64,
    A: *const f64,
    lda: i64,
    B: *const f64,
    ldb: i64,
    beta: *const f64,
    C: *mut f64,
    ldc: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasDgemm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transa), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transa, "cublasDgemm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transb, "cublasDgemm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasDgemm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasDgemm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(k), ": ").as_bytes())?;
    crate::CudaDisplay::write(&k, "cublasDgemm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasDgemm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasDgemm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasDgemm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(B), ": ").as_bytes())?;
    crate::CudaDisplay::write(&B, "cublasDgemm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cublasDgemm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasDgemm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(C), ": ").as_bytes())?;
    crate::CudaDisplay::write(&C, "cublasDgemm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cublasDgemm_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasCgemm_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    transa: cuda_types::cublas::cublasOperation_t,
    transb: cuda_types::cublas::cublasOperation_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    k: ::core::ffi::c_int,
    alpha: *const cuda_types::cublas::cuComplex,
    A: *const cuda_types::cublas::cuComplex,
    lda: ::core::ffi::c_int,
    B: *const cuda_types::cublas::cuComplex,
    ldb: ::core::ffi::c_int,
    beta: *const cuda_types::cublas::cuComplex,
    C: *mut cuda_types::cublas::cuComplex,
    ldc: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasCgemm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transa), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transa, "cublasCgemm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transb, "cublasCgemm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasCgemm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasCgemm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(k), ": ").as_bytes())?;
    crate::CudaDisplay::write(&k, "cublasCgemm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasCgemm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasCgemm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasCgemm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(B), ": ").as_bytes())?;
    crate::CudaDisplay::write(&B, "cublasCgemm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cublasCgemm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasCgemm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(C), ": ").as_bytes())?;
    crate::CudaDisplay::write(&C, "cublasCgemm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cublasCgemm_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasCgemm_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    transa: cuda_types::cublas::cublasOperation_t,
    transb: cuda_types::cublas::cublasOperation_t,
    m: i64,
    n: i64,
    k: i64,
    alpha: *const cuda_types::cublas::cuComplex,
    A: *const cuda_types::cublas::cuComplex,
    lda: i64,
    B: *const cuda_types::cublas::cuComplex,
    ldb: i64,
    beta: *const cuda_types::cublas::cuComplex,
    C: *mut cuda_types::cublas::cuComplex,
    ldc: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasCgemm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transa), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transa, "cublasCgemm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transb, "cublasCgemm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasCgemm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasCgemm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(k), ": ").as_bytes())?;
    crate::CudaDisplay::write(&k, "cublasCgemm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasCgemm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasCgemm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasCgemm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(B), ": ").as_bytes())?;
    crate::CudaDisplay::write(&B, "cublasCgemm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cublasCgemm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasCgemm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(C), ": ").as_bytes())?;
    crate::CudaDisplay::write(&C, "cublasCgemm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cublasCgemm_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasCgemm3m(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    transa: cuda_types::cublas::cublasOperation_t,
    transb: cuda_types::cublas::cublasOperation_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    k: ::core::ffi::c_int,
    alpha: *const cuda_types::cublas::cuComplex,
    A: *const cuda_types::cublas::cuComplex,
    lda: ::core::ffi::c_int,
    B: *const cuda_types::cublas::cuComplex,
    ldb: ::core::ffi::c_int,
    beta: *const cuda_types::cublas::cuComplex,
    C: *mut cuda_types::cublas::cuComplex,
    ldc: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasCgemm3m", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transa), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transa, "cublasCgemm3m", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transb, "cublasCgemm3m", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasCgemm3m", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasCgemm3m", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(k), ": ").as_bytes())?;
    crate::CudaDisplay::write(&k, "cublasCgemm3m", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasCgemm3m", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasCgemm3m", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasCgemm3m", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(B), ": ").as_bytes())?;
    crate::CudaDisplay::write(&B, "cublasCgemm3m", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cublasCgemm3m", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasCgemm3m", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(C), ": ").as_bytes())?;
    crate::CudaDisplay::write(&C, "cublasCgemm3m", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cublasCgemm3m", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasCgemm3m_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    transa: cuda_types::cublas::cublasOperation_t,
    transb: cuda_types::cublas::cublasOperation_t,
    m: i64,
    n: i64,
    k: i64,
    alpha: *const cuda_types::cublas::cuComplex,
    A: *const cuda_types::cublas::cuComplex,
    lda: i64,
    B: *const cuda_types::cublas::cuComplex,
    ldb: i64,
    beta: *const cuda_types::cublas::cuComplex,
    C: *mut cuda_types::cublas::cuComplex,
    ldc: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasCgemm3m_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transa), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transa, "cublasCgemm3m_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transb, "cublasCgemm3m_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasCgemm3m_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasCgemm3m_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(k), ": ").as_bytes())?;
    crate::CudaDisplay::write(&k, "cublasCgemm3m_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasCgemm3m_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasCgemm3m_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasCgemm3m_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(B), ": ").as_bytes())?;
    crate::CudaDisplay::write(&B, "cublasCgemm3m_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cublasCgemm3m_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasCgemm3m_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(C), ": ").as_bytes())?;
    crate::CudaDisplay::write(&C, "cublasCgemm3m_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cublasCgemm3m_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasCgemm3mEx(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    transa: cuda_types::cublas::cublasOperation_t,
    transb: cuda_types::cublas::cublasOperation_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    k: ::core::ffi::c_int,
    alpha: *const cuda_types::cublas::cuComplex,
    A: *const ::core::ffi::c_void,
    Atype: cuda_types::cublas::cudaDataType,
    lda: ::core::ffi::c_int,
    B: *const ::core::ffi::c_void,
    Btype: cuda_types::cublas::cudaDataType,
    ldb: ::core::ffi::c_int,
    beta: *const cuda_types::cublas::cuComplex,
    C: *mut ::core::ffi::c_void,
    Ctype: cuda_types::cublas::cudaDataType,
    ldc: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasCgemm3mEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transa), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transa, "cublasCgemm3mEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transb, "cublasCgemm3mEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasCgemm3mEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasCgemm3mEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(k), ": ").as_bytes())?;
    crate::CudaDisplay::write(&k, "cublasCgemm3mEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasCgemm3mEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasCgemm3mEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Atype), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Atype, "cublasCgemm3mEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasCgemm3mEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(B), ": ").as_bytes())?;
    crate::CudaDisplay::write(&B, "cublasCgemm3mEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Btype), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Btype, "cublasCgemm3mEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cublasCgemm3mEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasCgemm3mEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(C), ": ").as_bytes())?;
    crate::CudaDisplay::write(&C, "cublasCgemm3mEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Ctype), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Ctype, "cublasCgemm3mEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cublasCgemm3mEx", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasCgemm3mEx_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    transa: cuda_types::cublas::cublasOperation_t,
    transb: cuda_types::cublas::cublasOperation_t,
    m: i64,
    n: i64,
    k: i64,
    alpha: *const cuda_types::cublas::cuComplex,
    A: *const ::core::ffi::c_void,
    Atype: cuda_types::cublas::cudaDataType,
    lda: i64,
    B: *const ::core::ffi::c_void,
    Btype: cuda_types::cublas::cudaDataType,
    ldb: i64,
    beta: *const cuda_types::cublas::cuComplex,
    C: *mut ::core::ffi::c_void,
    Ctype: cuda_types::cublas::cudaDataType,
    ldc: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasCgemm3mEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transa), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transa, "cublasCgemm3mEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transb, "cublasCgemm3mEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasCgemm3mEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasCgemm3mEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(k), ": ").as_bytes())?;
    crate::CudaDisplay::write(&k, "cublasCgemm3mEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasCgemm3mEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasCgemm3mEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Atype), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Atype, "cublasCgemm3mEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasCgemm3mEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(B), ": ").as_bytes())?;
    crate::CudaDisplay::write(&B, "cublasCgemm3mEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Btype), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Btype, "cublasCgemm3mEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cublasCgemm3mEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasCgemm3mEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(C), ": ").as_bytes())?;
    crate::CudaDisplay::write(&C, "cublasCgemm3mEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Ctype), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Ctype, "cublasCgemm3mEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cublasCgemm3mEx_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasZgemm_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    transa: cuda_types::cublas::cublasOperation_t,
    transb: cuda_types::cublas::cublasOperation_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    k: ::core::ffi::c_int,
    alpha: *const cuda_types::cublas::cuDoubleComplex,
    A: *const cuda_types::cublas::cuDoubleComplex,
    lda: ::core::ffi::c_int,
    B: *const cuda_types::cublas::cuDoubleComplex,
    ldb: ::core::ffi::c_int,
    beta: *const cuda_types::cublas::cuDoubleComplex,
    C: *mut cuda_types::cublas::cuDoubleComplex,
    ldc: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasZgemm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transa), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transa, "cublasZgemm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transb, "cublasZgemm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasZgemm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasZgemm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(k), ": ").as_bytes())?;
    crate::CudaDisplay::write(&k, "cublasZgemm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasZgemm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasZgemm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasZgemm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(B), ": ").as_bytes())?;
    crate::CudaDisplay::write(&B, "cublasZgemm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cublasZgemm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasZgemm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(C), ": ").as_bytes())?;
    crate::CudaDisplay::write(&C, "cublasZgemm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cublasZgemm_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasZgemm_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    transa: cuda_types::cublas::cublasOperation_t,
    transb: cuda_types::cublas::cublasOperation_t,
    m: i64,
    n: i64,
    k: i64,
    alpha: *const cuda_types::cublas::cuDoubleComplex,
    A: *const cuda_types::cublas::cuDoubleComplex,
    lda: i64,
    B: *const cuda_types::cublas::cuDoubleComplex,
    ldb: i64,
    beta: *const cuda_types::cublas::cuDoubleComplex,
    C: *mut cuda_types::cublas::cuDoubleComplex,
    ldc: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasZgemm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transa), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transa, "cublasZgemm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transb, "cublasZgemm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasZgemm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasZgemm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(k), ": ").as_bytes())?;
    crate::CudaDisplay::write(&k, "cublasZgemm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasZgemm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasZgemm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasZgemm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(B), ": ").as_bytes())?;
    crate::CudaDisplay::write(&B, "cublasZgemm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cublasZgemm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasZgemm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(C), ": ").as_bytes())?;
    crate::CudaDisplay::write(&C, "cublasZgemm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cublasZgemm_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasZgemm3m(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    transa: cuda_types::cublas::cublasOperation_t,
    transb: cuda_types::cublas::cublasOperation_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    k: ::core::ffi::c_int,
    alpha: *const cuda_types::cublas::cuDoubleComplex,
    A: *const cuda_types::cublas::cuDoubleComplex,
    lda: ::core::ffi::c_int,
    B: *const cuda_types::cublas::cuDoubleComplex,
    ldb: ::core::ffi::c_int,
    beta: *const cuda_types::cublas::cuDoubleComplex,
    C: *mut cuda_types::cublas::cuDoubleComplex,
    ldc: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasZgemm3m", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transa), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transa, "cublasZgemm3m", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transb, "cublasZgemm3m", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasZgemm3m", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasZgemm3m", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(k), ": ").as_bytes())?;
    crate::CudaDisplay::write(&k, "cublasZgemm3m", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasZgemm3m", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasZgemm3m", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasZgemm3m", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(B), ": ").as_bytes())?;
    crate::CudaDisplay::write(&B, "cublasZgemm3m", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cublasZgemm3m", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasZgemm3m", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(C), ": ").as_bytes())?;
    crate::CudaDisplay::write(&C, "cublasZgemm3m", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cublasZgemm3m", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasZgemm3m_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    transa: cuda_types::cublas::cublasOperation_t,
    transb: cuda_types::cublas::cublasOperation_t,
    m: i64,
    n: i64,
    k: i64,
    alpha: *const cuda_types::cublas::cuDoubleComplex,
    A: *const cuda_types::cublas::cuDoubleComplex,
    lda: i64,
    B: *const cuda_types::cublas::cuDoubleComplex,
    ldb: i64,
    beta: *const cuda_types::cublas::cuDoubleComplex,
    C: *mut cuda_types::cublas::cuDoubleComplex,
    ldc: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasZgemm3m_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transa), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transa, "cublasZgemm3m_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transb, "cublasZgemm3m_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasZgemm3m_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasZgemm3m_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(k), ": ").as_bytes())?;
    crate::CudaDisplay::write(&k, "cublasZgemm3m_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasZgemm3m_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasZgemm3m_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasZgemm3m_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(B), ": ").as_bytes())?;
    crate::CudaDisplay::write(&B, "cublasZgemm3m_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cublasZgemm3m_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasZgemm3m_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(C), ": ").as_bytes())?;
    crate::CudaDisplay::write(&C, "cublasZgemm3m_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cublasZgemm3m_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasHgemm(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    transa: cuda_types::cublas::cublasOperation_t,
    transb: cuda_types::cublas::cublasOperation_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    k: ::core::ffi::c_int,
    alpha: *const cuda_types::cublas::__half,
    A: *const cuda_types::cublas::__half,
    lda: ::core::ffi::c_int,
    B: *const cuda_types::cublas::__half,
    ldb: ::core::ffi::c_int,
    beta: *const cuda_types::cublas::__half,
    C: *mut cuda_types::cublas::__half,
    ldc: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasHgemm", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transa), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transa, "cublasHgemm", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transb, "cublasHgemm", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasHgemm", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasHgemm", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(k), ": ").as_bytes())?;
    crate::CudaDisplay::write(&k, "cublasHgemm", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasHgemm", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasHgemm", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasHgemm", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(B), ": ").as_bytes())?;
    crate::CudaDisplay::write(&B, "cublasHgemm", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cublasHgemm", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasHgemm", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(C), ": ").as_bytes())?;
    crate::CudaDisplay::write(&C, "cublasHgemm", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cublasHgemm", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasHgemm_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    transa: cuda_types::cublas::cublasOperation_t,
    transb: cuda_types::cublas::cublasOperation_t,
    m: i64,
    n: i64,
    k: i64,
    alpha: *const cuda_types::cublas::__half,
    A: *const cuda_types::cublas::__half,
    lda: i64,
    B: *const cuda_types::cublas::__half,
    ldb: i64,
    beta: *const cuda_types::cublas::__half,
    C: *mut cuda_types::cublas::__half,
    ldc: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasHgemm_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transa), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transa, "cublasHgemm_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transb, "cublasHgemm_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasHgemm_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasHgemm_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(k), ": ").as_bytes())?;
    crate::CudaDisplay::write(&k, "cublasHgemm_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasHgemm_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasHgemm_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasHgemm_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(B), ": ").as_bytes())?;
    crate::CudaDisplay::write(&B, "cublasHgemm_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cublasHgemm_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasHgemm_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(C), ": ").as_bytes())?;
    crate::CudaDisplay::write(&C, "cublasHgemm_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cublasHgemm_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasSgemmEx(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    transa: cuda_types::cublas::cublasOperation_t,
    transb: cuda_types::cublas::cublasOperation_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    k: ::core::ffi::c_int,
    alpha: *const f32,
    A: *const ::core::ffi::c_void,
    Atype: cuda_types::cublas::cudaDataType,
    lda: ::core::ffi::c_int,
    B: *const ::core::ffi::c_void,
    Btype: cuda_types::cublas::cudaDataType,
    ldb: ::core::ffi::c_int,
    beta: *const f32,
    C: *mut ::core::ffi::c_void,
    Ctype: cuda_types::cublas::cudaDataType,
    ldc: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasSgemmEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transa), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transa, "cublasSgemmEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transb, "cublasSgemmEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasSgemmEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasSgemmEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(k), ": ").as_bytes())?;
    crate::CudaDisplay::write(&k, "cublasSgemmEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasSgemmEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasSgemmEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Atype), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Atype, "cublasSgemmEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasSgemmEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(B), ": ").as_bytes())?;
    crate::CudaDisplay::write(&B, "cublasSgemmEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Btype), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Btype, "cublasSgemmEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cublasSgemmEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasSgemmEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(C), ": ").as_bytes())?;
    crate::CudaDisplay::write(&C, "cublasSgemmEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Ctype), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Ctype, "cublasSgemmEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cublasSgemmEx", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasSgemmEx_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    transa: cuda_types::cublas::cublasOperation_t,
    transb: cuda_types::cublas::cublasOperation_t,
    m: i64,
    n: i64,
    k: i64,
    alpha: *const f32,
    A: *const ::core::ffi::c_void,
    Atype: cuda_types::cublas::cudaDataType,
    lda: i64,
    B: *const ::core::ffi::c_void,
    Btype: cuda_types::cublas::cudaDataType,
    ldb: i64,
    beta: *const f32,
    C: *mut ::core::ffi::c_void,
    Ctype: cuda_types::cublas::cudaDataType,
    ldc: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasSgemmEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transa), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transa, "cublasSgemmEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transb, "cublasSgemmEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasSgemmEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasSgemmEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(k), ": ").as_bytes())?;
    crate::CudaDisplay::write(&k, "cublasSgemmEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasSgemmEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasSgemmEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Atype), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Atype, "cublasSgemmEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasSgemmEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(B), ": ").as_bytes())?;
    crate::CudaDisplay::write(&B, "cublasSgemmEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Btype), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Btype, "cublasSgemmEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cublasSgemmEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasSgemmEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(C), ": ").as_bytes())?;
    crate::CudaDisplay::write(&C, "cublasSgemmEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Ctype), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Ctype, "cublasSgemmEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cublasSgemmEx_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasGemmEx(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    transa: cuda_types::cublas::cublasOperation_t,
    transb: cuda_types::cublas::cublasOperation_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    k: ::core::ffi::c_int,
    alpha: *const ::core::ffi::c_void,
    A: *const ::core::ffi::c_void,
    Atype: cuda_types::cublas::cudaDataType,
    lda: ::core::ffi::c_int,
    B: *const ::core::ffi::c_void,
    Btype: cuda_types::cublas::cudaDataType,
    ldb: ::core::ffi::c_int,
    beta: *const ::core::ffi::c_void,
    C: *mut ::core::ffi::c_void,
    Ctype: cuda_types::cublas::cudaDataType,
    ldc: ::core::ffi::c_int,
    computeType: cuda_types::cublas::cublasComputeType_t,
    algo: cuda_types::cublas::cublasGemmAlgo_t,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasGemmEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transa), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transa, "cublasGemmEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transb, "cublasGemmEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasGemmEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasGemmEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(k), ": ").as_bytes())?;
    crate::CudaDisplay::write(&k, "cublasGemmEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasGemmEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasGemmEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Atype), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Atype, "cublasGemmEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasGemmEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(B), ": ").as_bytes())?;
    crate::CudaDisplay::write(&B, "cublasGemmEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Btype), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Btype, "cublasGemmEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cublasGemmEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasGemmEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(C), ": ").as_bytes())?;
    crate::CudaDisplay::write(&C, "cublasGemmEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Ctype), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Ctype, "cublasGemmEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cublasGemmEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(computeType), ": ").as_bytes())?;
    crate::CudaDisplay::write(&computeType, "cublasGemmEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(algo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&algo, "cublasGemmEx", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasGemmEx_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    transa: cuda_types::cublas::cublasOperation_t,
    transb: cuda_types::cublas::cublasOperation_t,
    m: i64,
    n: i64,
    k: i64,
    alpha: *const ::core::ffi::c_void,
    A: *const ::core::ffi::c_void,
    Atype: cuda_types::cublas::cudaDataType,
    lda: i64,
    B: *const ::core::ffi::c_void,
    Btype: cuda_types::cublas::cudaDataType,
    ldb: i64,
    beta: *const ::core::ffi::c_void,
    C: *mut ::core::ffi::c_void,
    Ctype: cuda_types::cublas::cudaDataType,
    ldc: i64,
    computeType: cuda_types::cublas::cublasComputeType_t,
    algo: cuda_types::cublas::cublasGemmAlgo_t,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasGemmEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transa), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transa, "cublasGemmEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transb, "cublasGemmEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasGemmEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasGemmEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(k), ": ").as_bytes())?;
    crate::CudaDisplay::write(&k, "cublasGemmEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasGemmEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasGemmEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Atype), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Atype, "cublasGemmEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasGemmEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(B), ": ").as_bytes())?;
    crate::CudaDisplay::write(&B, "cublasGemmEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Btype), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Btype, "cublasGemmEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cublasGemmEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasGemmEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(C), ": ").as_bytes())?;
    crate::CudaDisplay::write(&C, "cublasGemmEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Ctype), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Ctype, "cublasGemmEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cublasGemmEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(computeType), ": ").as_bytes())?;
    crate::CudaDisplay::write(&computeType, "cublasGemmEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(algo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&algo, "cublasGemmEx_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasCgemmEx(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    transa: cuda_types::cublas::cublasOperation_t,
    transb: cuda_types::cublas::cublasOperation_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    k: ::core::ffi::c_int,
    alpha: *const cuda_types::cublas::cuComplex,
    A: *const ::core::ffi::c_void,
    Atype: cuda_types::cublas::cudaDataType,
    lda: ::core::ffi::c_int,
    B: *const ::core::ffi::c_void,
    Btype: cuda_types::cublas::cudaDataType,
    ldb: ::core::ffi::c_int,
    beta: *const cuda_types::cublas::cuComplex,
    C: *mut ::core::ffi::c_void,
    Ctype: cuda_types::cublas::cudaDataType,
    ldc: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasCgemmEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transa), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transa, "cublasCgemmEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transb, "cublasCgemmEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasCgemmEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasCgemmEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(k), ": ").as_bytes())?;
    crate::CudaDisplay::write(&k, "cublasCgemmEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasCgemmEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasCgemmEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Atype), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Atype, "cublasCgemmEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasCgemmEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(B), ": ").as_bytes())?;
    crate::CudaDisplay::write(&B, "cublasCgemmEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Btype), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Btype, "cublasCgemmEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cublasCgemmEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasCgemmEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(C), ": ").as_bytes())?;
    crate::CudaDisplay::write(&C, "cublasCgemmEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Ctype), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Ctype, "cublasCgemmEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cublasCgemmEx", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasCgemmEx_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    transa: cuda_types::cublas::cublasOperation_t,
    transb: cuda_types::cublas::cublasOperation_t,
    m: i64,
    n: i64,
    k: i64,
    alpha: *const cuda_types::cublas::cuComplex,
    A: *const ::core::ffi::c_void,
    Atype: cuda_types::cublas::cudaDataType,
    lda: i64,
    B: *const ::core::ffi::c_void,
    Btype: cuda_types::cublas::cudaDataType,
    ldb: i64,
    beta: *const cuda_types::cublas::cuComplex,
    C: *mut ::core::ffi::c_void,
    Ctype: cuda_types::cublas::cudaDataType,
    ldc: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasCgemmEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transa), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transa, "cublasCgemmEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transb, "cublasCgemmEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasCgemmEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasCgemmEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(k), ": ").as_bytes())?;
    crate::CudaDisplay::write(&k, "cublasCgemmEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasCgemmEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasCgemmEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Atype), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Atype, "cublasCgemmEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasCgemmEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(B), ": ").as_bytes())?;
    crate::CudaDisplay::write(&B, "cublasCgemmEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Btype), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Btype, "cublasCgemmEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cublasCgemmEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasCgemmEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(C), ": ").as_bytes())?;
    crate::CudaDisplay::write(&C, "cublasCgemmEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Ctype), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Ctype, "cublasCgemmEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cublasCgemmEx_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasSsyrk_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    trans: cuda_types::cublas::cublasOperation_t,
    n: ::core::ffi::c_int,
    k: ::core::ffi::c_int,
    alpha: *const f32,
    A: *const f32,
    lda: ::core::ffi::c_int,
    beta: *const f32,
    C: *mut f32,
    ldc: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasSsyrk_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasSsyrk_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasSsyrk_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasSsyrk_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(k), ": ").as_bytes())?;
    crate::CudaDisplay::write(&k, "cublasSsyrk_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasSsyrk_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasSsyrk_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasSsyrk_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasSsyrk_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(C), ": ").as_bytes())?;
    crate::CudaDisplay::write(&C, "cublasSsyrk_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cublasSsyrk_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasSsyrk_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    trans: cuda_types::cublas::cublasOperation_t,
    n: i64,
    k: i64,
    alpha: *const f32,
    A: *const f32,
    lda: i64,
    beta: *const f32,
    C: *mut f32,
    ldc: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasSsyrk_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasSsyrk_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasSsyrk_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasSsyrk_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(k), ": ").as_bytes())?;
    crate::CudaDisplay::write(&k, "cublasSsyrk_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasSsyrk_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasSsyrk_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasSsyrk_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasSsyrk_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(C), ": ").as_bytes())?;
    crate::CudaDisplay::write(&C, "cublasSsyrk_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cublasSsyrk_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasDsyrk_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    trans: cuda_types::cublas::cublasOperation_t,
    n: ::core::ffi::c_int,
    k: ::core::ffi::c_int,
    alpha: *const f64,
    A: *const f64,
    lda: ::core::ffi::c_int,
    beta: *const f64,
    C: *mut f64,
    ldc: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasDsyrk_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasDsyrk_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasDsyrk_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasDsyrk_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(k), ": ").as_bytes())?;
    crate::CudaDisplay::write(&k, "cublasDsyrk_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasDsyrk_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasDsyrk_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasDsyrk_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasDsyrk_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(C), ": ").as_bytes())?;
    crate::CudaDisplay::write(&C, "cublasDsyrk_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cublasDsyrk_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasDsyrk_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    trans: cuda_types::cublas::cublasOperation_t,
    n: i64,
    k: i64,
    alpha: *const f64,
    A: *const f64,
    lda: i64,
    beta: *const f64,
    C: *mut f64,
    ldc: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasDsyrk_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasDsyrk_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasDsyrk_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasDsyrk_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(k), ": ").as_bytes())?;
    crate::CudaDisplay::write(&k, "cublasDsyrk_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasDsyrk_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasDsyrk_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasDsyrk_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasDsyrk_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(C), ": ").as_bytes())?;
    crate::CudaDisplay::write(&C, "cublasDsyrk_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cublasDsyrk_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasCsyrk_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    trans: cuda_types::cublas::cublasOperation_t,
    n: ::core::ffi::c_int,
    k: ::core::ffi::c_int,
    alpha: *const cuda_types::cublas::cuComplex,
    A: *const cuda_types::cublas::cuComplex,
    lda: ::core::ffi::c_int,
    beta: *const cuda_types::cublas::cuComplex,
    C: *mut cuda_types::cublas::cuComplex,
    ldc: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasCsyrk_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasCsyrk_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasCsyrk_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasCsyrk_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(k), ": ").as_bytes())?;
    crate::CudaDisplay::write(&k, "cublasCsyrk_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasCsyrk_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasCsyrk_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasCsyrk_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasCsyrk_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(C), ": ").as_bytes())?;
    crate::CudaDisplay::write(&C, "cublasCsyrk_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cublasCsyrk_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasCsyrk_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    trans: cuda_types::cublas::cublasOperation_t,
    n: i64,
    k: i64,
    alpha: *const cuda_types::cublas::cuComplex,
    A: *const cuda_types::cublas::cuComplex,
    lda: i64,
    beta: *const cuda_types::cublas::cuComplex,
    C: *mut cuda_types::cublas::cuComplex,
    ldc: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasCsyrk_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasCsyrk_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasCsyrk_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasCsyrk_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(k), ": ").as_bytes())?;
    crate::CudaDisplay::write(&k, "cublasCsyrk_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasCsyrk_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasCsyrk_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasCsyrk_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasCsyrk_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(C), ": ").as_bytes())?;
    crate::CudaDisplay::write(&C, "cublasCsyrk_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cublasCsyrk_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasZsyrk_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    trans: cuda_types::cublas::cublasOperation_t,
    n: ::core::ffi::c_int,
    k: ::core::ffi::c_int,
    alpha: *const cuda_types::cublas::cuDoubleComplex,
    A: *const cuda_types::cublas::cuDoubleComplex,
    lda: ::core::ffi::c_int,
    beta: *const cuda_types::cublas::cuDoubleComplex,
    C: *mut cuda_types::cublas::cuDoubleComplex,
    ldc: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasZsyrk_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasZsyrk_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasZsyrk_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasZsyrk_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(k), ": ").as_bytes())?;
    crate::CudaDisplay::write(&k, "cublasZsyrk_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasZsyrk_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasZsyrk_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasZsyrk_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasZsyrk_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(C), ": ").as_bytes())?;
    crate::CudaDisplay::write(&C, "cublasZsyrk_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cublasZsyrk_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasZsyrk_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    trans: cuda_types::cublas::cublasOperation_t,
    n: i64,
    k: i64,
    alpha: *const cuda_types::cublas::cuDoubleComplex,
    A: *const cuda_types::cublas::cuDoubleComplex,
    lda: i64,
    beta: *const cuda_types::cublas::cuDoubleComplex,
    C: *mut cuda_types::cublas::cuDoubleComplex,
    ldc: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasZsyrk_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasZsyrk_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasZsyrk_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasZsyrk_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(k), ": ").as_bytes())?;
    crate::CudaDisplay::write(&k, "cublasZsyrk_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasZsyrk_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasZsyrk_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasZsyrk_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasZsyrk_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(C), ": ").as_bytes())?;
    crate::CudaDisplay::write(&C, "cublasZsyrk_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cublasZsyrk_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasCsyrkEx(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    trans: cuda_types::cublas::cublasOperation_t,
    n: ::core::ffi::c_int,
    k: ::core::ffi::c_int,
    alpha: *const cuda_types::cublas::cuComplex,
    A: *const ::core::ffi::c_void,
    Atype: cuda_types::cublas::cudaDataType,
    lda: ::core::ffi::c_int,
    beta: *const cuda_types::cublas::cuComplex,
    C: *mut ::core::ffi::c_void,
    Ctype: cuda_types::cublas::cudaDataType,
    ldc: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasCsyrkEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasCsyrkEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasCsyrkEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasCsyrkEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(k), ": ").as_bytes())?;
    crate::CudaDisplay::write(&k, "cublasCsyrkEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasCsyrkEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasCsyrkEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Atype), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Atype, "cublasCsyrkEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasCsyrkEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasCsyrkEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(C), ": ").as_bytes())?;
    crate::CudaDisplay::write(&C, "cublasCsyrkEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Ctype), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Ctype, "cublasCsyrkEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cublasCsyrkEx", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasCsyrkEx_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    trans: cuda_types::cublas::cublasOperation_t,
    n: i64,
    k: i64,
    alpha: *const cuda_types::cublas::cuComplex,
    A: *const ::core::ffi::c_void,
    Atype: cuda_types::cublas::cudaDataType,
    lda: i64,
    beta: *const cuda_types::cublas::cuComplex,
    C: *mut ::core::ffi::c_void,
    Ctype: cuda_types::cublas::cudaDataType,
    ldc: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasCsyrkEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasCsyrkEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasCsyrkEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasCsyrkEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(k), ": ").as_bytes())?;
    crate::CudaDisplay::write(&k, "cublasCsyrkEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasCsyrkEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasCsyrkEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Atype), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Atype, "cublasCsyrkEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasCsyrkEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasCsyrkEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(C), ": ").as_bytes())?;
    crate::CudaDisplay::write(&C, "cublasCsyrkEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Ctype), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Ctype, "cublasCsyrkEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cublasCsyrkEx_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasCsyrk3mEx(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    trans: cuda_types::cublas::cublasOperation_t,
    n: ::core::ffi::c_int,
    k: ::core::ffi::c_int,
    alpha: *const cuda_types::cublas::cuComplex,
    A: *const ::core::ffi::c_void,
    Atype: cuda_types::cublas::cudaDataType,
    lda: ::core::ffi::c_int,
    beta: *const cuda_types::cublas::cuComplex,
    C: *mut ::core::ffi::c_void,
    Ctype: cuda_types::cublas::cudaDataType,
    ldc: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasCsyrk3mEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasCsyrk3mEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasCsyrk3mEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasCsyrk3mEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(k), ": ").as_bytes())?;
    crate::CudaDisplay::write(&k, "cublasCsyrk3mEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasCsyrk3mEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasCsyrk3mEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Atype), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Atype, "cublasCsyrk3mEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasCsyrk3mEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasCsyrk3mEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(C), ": ").as_bytes())?;
    crate::CudaDisplay::write(&C, "cublasCsyrk3mEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Ctype), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Ctype, "cublasCsyrk3mEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cublasCsyrk3mEx", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasCsyrk3mEx_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    trans: cuda_types::cublas::cublasOperation_t,
    n: i64,
    k: i64,
    alpha: *const cuda_types::cublas::cuComplex,
    A: *const ::core::ffi::c_void,
    Atype: cuda_types::cublas::cudaDataType,
    lda: i64,
    beta: *const cuda_types::cublas::cuComplex,
    C: *mut ::core::ffi::c_void,
    Ctype: cuda_types::cublas::cudaDataType,
    ldc: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasCsyrk3mEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasCsyrk3mEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasCsyrk3mEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasCsyrk3mEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(k), ": ").as_bytes())?;
    crate::CudaDisplay::write(&k, "cublasCsyrk3mEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasCsyrk3mEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasCsyrk3mEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Atype), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Atype, "cublasCsyrk3mEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasCsyrk3mEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasCsyrk3mEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(C), ": ").as_bytes())?;
    crate::CudaDisplay::write(&C, "cublasCsyrk3mEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Ctype), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Ctype, "cublasCsyrk3mEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cublasCsyrk3mEx_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasCherk_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    trans: cuda_types::cublas::cublasOperation_t,
    n: ::core::ffi::c_int,
    k: ::core::ffi::c_int,
    alpha: *const f32,
    A: *const cuda_types::cublas::cuComplex,
    lda: ::core::ffi::c_int,
    beta: *const f32,
    C: *mut cuda_types::cublas::cuComplex,
    ldc: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasCherk_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasCherk_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasCherk_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasCherk_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(k), ": ").as_bytes())?;
    crate::CudaDisplay::write(&k, "cublasCherk_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasCherk_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasCherk_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasCherk_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasCherk_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(C), ": ").as_bytes())?;
    crate::CudaDisplay::write(&C, "cublasCherk_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cublasCherk_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasCherk_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    trans: cuda_types::cublas::cublasOperation_t,
    n: i64,
    k: i64,
    alpha: *const f32,
    A: *const cuda_types::cublas::cuComplex,
    lda: i64,
    beta: *const f32,
    C: *mut cuda_types::cublas::cuComplex,
    ldc: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasCherk_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasCherk_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasCherk_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasCherk_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(k), ": ").as_bytes())?;
    crate::CudaDisplay::write(&k, "cublasCherk_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasCherk_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasCherk_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasCherk_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasCherk_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(C), ": ").as_bytes())?;
    crate::CudaDisplay::write(&C, "cublasCherk_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cublasCherk_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasZherk_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    trans: cuda_types::cublas::cublasOperation_t,
    n: ::core::ffi::c_int,
    k: ::core::ffi::c_int,
    alpha: *const f64,
    A: *const cuda_types::cublas::cuDoubleComplex,
    lda: ::core::ffi::c_int,
    beta: *const f64,
    C: *mut cuda_types::cublas::cuDoubleComplex,
    ldc: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasZherk_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasZherk_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasZherk_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasZherk_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(k), ": ").as_bytes())?;
    crate::CudaDisplay::write(&k, "cublasZherk_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasZherk_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasZherk_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasZherk_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasZherk_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(C), ": ").as_bytes())?;
    crate::CudaDisplay::write(&C, "cublasZherk_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cublasZherk_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasZherk_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    trans: cuda_types::cublas::cublasOperation_t,
    n: i64,
    k: i64,
    alpha: *const f64,
    A: *const cuda_types::cublas::cuDoubleComplex,
    lda: i64,
    beta: *const f64,
    C: *mut cuda_types::cublas::cuDoubleComplex,
    ldc: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasZherk_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasZherk_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasZherk_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasZherk_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(k), ": ").as_bytes())?;
    crate::CudaDisplay::write(&k, "cublasZherk_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasZherk_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasZherk_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasZherk_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasZherk_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(C), ": ").as_bytes())?;
    crate::CudaDisplay::write(&C, "cublasZherk_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cublasZherk_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasCherkEx(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    trans: cuda_types::cublas::cublasOperation_t,
    n: ::core::ffi::c_int,
    k: ::core::ffi::c_int,
    alpha: *const f32,
    A: *const ::core::ffi::c_void,
    Atype: cuda_types::cublas::cudaDataType,
    lda: ::core::ffi::c_int,
    beta: *const f32,
    C: *mut ::core::ffi::c_void,
    Ctype: cuda_types::cublas::cudaDataType,
    ldc: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasCherkEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasCherkEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasCherkEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasCherkEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(k), ": ").as_bytes())?;
    crate::CudaDisplay::write(&k, "cublasCherkEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasCherkEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasCherkEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Atype), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Atype, "cublasCherkEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasCherkEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasCherkEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(C), ": ").as_bytes())?;
    crate::CudaDisplay::write(&C, "cublasCherkEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Ctype), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Ctype, "cublasCherkEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cublasCherkEx", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasCherkEx_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    trans: cuda_types::cublas::cublasOperation_t,
    n: i64,
    k: i64,
    alpha: *const f32,
    A: *const ::core::ffi::c_void,
    Atype: cuda_types::cublas::cudaDataType,
    lda: i64,
    beta: *const f32,
    C: *mut ::core::ffi::c_void,
    Ctype: cuda_types::cublas::cudaDataType,
    ldc: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasCherkEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasCherkEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasCherkEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasCherkEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(k), ": ").as_bytes())?;
    crate::CudaDisplay::write(&k, "cublasCherkEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasCherkEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasCherkEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Atype), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Atype, "cublasCherkEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasCherkEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasCherkEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(C), ": ").as_bytes())?;
    crate::CudaDisplay::write(&C, "cublasCherkEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Ctype), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Ctype, "cublasCherkEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cublasCherkEx_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasCherk3mEx(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    trans: cuda_types::cublas::cublasOperation_t,
    n: ::core::ffi::c_int,
    k: ::core::ffi::c_int,
    alpha: *const f32,
    A: *const ::core::ffi::c_void,
    Atype: cuda_types::cublas::cudaDataType,
    lda: ::core::ffi::c_int,
    beta: *const f32,
    C: *mut ::core::ffi::c_void,
    Ctype: cuda_types::cublas::cudaDataType,
    ldc: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasCherk3mEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasCherk3mEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasCherk3mEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasCherk3mEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(k), ": ").as_bytes())?;
    crate::CudaDisplay::write(&k, "cublasCherk3mEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasCherk3mEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasCherk3mEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Atype), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Atype, "cublasCherk3mEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasCherk3mEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasCherk3mEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(C), ": ").as_bytes())?;
    crate::CudaDisplay::write(&C, "cublasCherk3mEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Ctype), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Ctype, "cublasCherk3mEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cublasCherk3mEx", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasCherk3mEx_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    trans: cuda_types::cublas::cublasOperation_t,
    n: i64,
    k: i64,
    alpha: *const f32,
    A: *const ::core::ffi::c_void,
    Atype: cuda_types::cublas::cudaDataType,
    lda: i64,
    beta: *const f32,
    C: *mut ::core::ffi::c_void,
    Ctype: cuda_types::cublas::cudaDataType,
    ldc: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasCherk3mEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasCherk3mEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasCherk3mEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasCherk3mEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(k), ": ").as_bytes())?;
    crate::CudaDisplay::write(&k, "cublasCherk3mEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasCherk3mEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasCherk3mEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Atype), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Atype, "cublasCherk3mEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasCherk3mEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasCherk3mEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(C), ": ").as_bytes())?;
    crate::CudaDisplay::write(&C, "cublasCherk3mEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Ctype), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Ctype, "cublasCherk3mEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cublasCherk3mEx_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasSsyr2k_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    trans: cuda_types::cublas::cublasOperation_t,
    n: ::core::ffi::c_int,
    k: ::core::ffi::c_int,
    alpha: *const f32,
    A: *const f32,
    lda: ::core::ffi::c_int,
    B: *const f32,
    ldb: ::core::ffi::c_int,
    beta: *const f32,
    C: *mut f32,
    ldc: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasSsyr2k_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasSsyr2k_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasSsyr2k_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasSsyr2k_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(k), ": ").as_bytes())?;
    crate::CudaDisplay::write(&k, "cublasSsyr2k_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasSsyr2k_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasSsyr2k_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasSsyr2k_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(B), ": ").as_bytes())?;
    crate::CudaDisplay::write(&B, "cublasSsyr2k_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cublasSsyr2k_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasSsyr2k_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(C), ": ").as_bytes())?;
    crate::CudaDisplay::write(&C, "cublasSsyr2k_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cublasSsyr2k_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasSsyr2k_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    trans: cuda_types::cublas::cublasOperation_t,
    n: i64,
    k: i64,
    alpha: *const f32,
    A: *const f32,
    lda: i64,
    B: *const f32,
    ldb: i64,
    beta: *const f32,
    C: *mut f32,
    ldc: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasSsyr2k_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasSsyr2k_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasSsyr2k_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasSsyr2k_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(k), ": ").as_bytes())?;
    crate::CudaDisplay::write(&k, "cublasSsyr2k_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasSsyr2k_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasSsyr2k_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasSsyr2k_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(B), ": ").as_bytes())?;
    crate::CudaDisplay::write(&B, "cublasSsyr2k_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cublasSsyr2k_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasSsyr2k_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(C), ": ").as_bytes())?;
    crate::CudaDisplay::write(&C, "cublasSsyr2k_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cublasSsyr2k_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasDsyr2k_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    trans: cuda_types::cublas::cublasOperation_t,
    n: ::core::ffi::c_int,
    k: ::core::ffi::c_int,
    alpha: *const f64,
    A: *const f64,
    lda: ::core::ffi::c_int,
    B: *const f64,
    ldb: ::core::ffi::c_int,
    beta: *const f64,
    C: *mut f64,
    ldc: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasDsyr2k_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasDsyr2k_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasDsyr2k_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasDsyr2k_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(k), ": ").as_bytes())?;
    crate::CudaDisplay::write(&k, "cublasDsyr2k_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasDsyr2k_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasDsyr2k_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasDsyr2k_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(B), ": ").as_bytes())?;
    crate::CudaDisplay::write(&B, "cublasDsyr2k_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cublasDsyr2k_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasDsyr2k_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(C), ": ").as_bytes())?;
    crate::CudaDisplay::write(&C, "cublasDsyr2k_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cublasDsyr2k_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasDsyr2k_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    trans: cuda_types::cublas::cublasOperation_t,
    n: i64,
    k: i64,
    alpha: *const f64,
    A: *const f64,
    lda: i64,
    B: *const f64,
    ldb: i64,
    beta: *const f64,
    C: *mut f64,
    ldc: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasDsyr2k_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasDsyr2k_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasDsyr2k_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasDsyr2k_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(k), ": ").as_bytes())?;
    crate::CudaDisplay::write(&k, "cublasDsyr2k_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasDsyr2k_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasDsyr2k_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasDsyr2k_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(B), ": ").as_bytes())?;
    crate::CudaDisplay::write(&B, "cublasDsyr2k_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cublasDsyr2k_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasDsyr2k_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(C), ": ").as_bytes())?;
    crate::CudaDisplay::write(&C, "cublasDsyr2k_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cublasDsyr2k_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasCsyr2k_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    trans: cuda_types::cublas::cublasOperation_t,
    n: ::core::ffi::c_int,
    k: ::core::ffi::c_int,
    alpha: *const cuda_types::cublas::cuComplex,
    A: *const cuda_types::cublas::cuComplex,
    lda: ::core::ffi::c_int,
    B: *const cuda_types::cublas::cuComplex,
    ldb: ::core::ffi::c_int,
    beta: *const cuda_types::cublas::cuComplex,
    C: *mut cuda_types::cublas::cuComplex,
    ldc: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasCsyr2k_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasCsyr2k_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasCsyr2k_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasCsyr2k_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(k), ": ").as_bytes())?;
    crate::CudaDisplay::write(&k, "cublasCsyr2k_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasCsyr2k_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasCsyr2k_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasCsyr2k_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(B), ": ").as_bytes())?;
    crate::CudaDisplay::write(&B, "cublasCsyr2k_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cublasCsyr2k_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasCsyr2k_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(C), ": ").as_bytes())?;
    crate::CudaDisplay::write(&C, "cublasCsyr2k_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cublasCsyr2k_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasCsyr2k_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    trans: cuda_types::cublas::cublasOperation_t,
    n: i64,
    k: i64,
    alpha: *const cuda_types::cublas::cuComplex,
    A: *const cuda_types::cublas::cuComplex,
    lda: i64,
    B: *const cuda_types::cublas::cuComplex,
    ldb: i64,
    beta: *const cuda_types::cublas::cuComplex,
    C: *mut cuda_types::cublas::cuComplex,
    ldc: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasCsyr2k_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasCsyr2k_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasCsyr2k_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasCsyr2k_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(k), ": ").as_bytes())?;
    crate::CudaDisplay::write(&k, "cublasCsyr2k_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasCsyr2k_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasCsyr2k_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasCsyr2k_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(B), ": ").as_bytes())?;
    crate::CudaDisplay::write(&B, "cublasCsyr2k_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cublasCsyr2k_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasCsyr2k_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(C), ": ").as_bytes())?;
    crate::CudaDisplay::write(&C, "cublasCsyr2k_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cublasCsyr2k_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasZsyr2k_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    trans: cuda_types::cublas::cublasOperation_t,
    n: ::core::ffi::c_int,
    k: ::core::ffi::c_int,
    alpha: *const cuda_types::cublas::cuDoubleComplex,
    A: *const cuda_types::cublas::cuDoubleComplex,
    lda: ::core::ffi::c_int,
    B: *const cuda_types::cublas::cuDoubleComplex,
    ldb: ::core::ffi::c_int,
    beta: *const cuda_types::cublas::cuDoubleComplex,
    C: *mut cuda_types::cublas::cuDoubleComplex,
    ldc: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasZsyr2k_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasZsyr2k_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasZsyr2k_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasZsyr2k_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(k), ": ").as_bytes())?;
    crate::CudaDisplay::write(&k, "cublasZsyr2k_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasZsyr2k_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasZsyr2k_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasZsyr2k_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(B), ": ").as_bytes())?;
    crate::CudaDisplay::write(&B, "cublasZsyr2k_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cublasZsyr2k_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasZsyr2k_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(C), ": ").as_bytes())?;
    crate::CudaDisplay::write(&C, "cublasZsyr2k_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cublasZsyr2k_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasZsyr2k_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    trans: cuda_types::cublas::cublasOperation_t,
    n: i64,
    k: i64,
    alpha: *const cuda_types::cublas::cuDoubleComplex,
    A: *const cuda_types::cublas::cuDoubleComplex,
    lda: i64,
    B: *const cuda_types::cublas::cuDoubleComplex,
    ldb: i64,
    beta: *const cuda_types::cublas::cuDoubleComplex,
    C: *mut cuda_types::cublas::cuDoubleComplex,
    ldc: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasZsyr2k_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasZsyr2k_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasZsyr2k_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasZsyr2k_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(k), ": ").as_bytes())?;
    crate::CudaDisplay::write(&k, "cublasZsyr2k_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasZsyr2k_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasZsyr2k_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasZsyr2k_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(B), ": ").as_bytes())?;
    crate::CudaDisplay::write(&B, "cublasZsyr2k_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cublasZsyr2k_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasZsyr2k_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(C), ": ").as_bytes())?;
    crate::CudaDisplay::write(&C, "cublasZsyr2k_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cublasZsyr2k_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasCher2k_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    trans: cuda_types::cublas::cublasOperation_t,
    n: ::core::ffi::c_int,
    k: ::core::ffi::c_int,
    alpha: *const cuda_types::cublas::cuComplex,
    A: *const cuda_types::cublas::cuComplex,
    lda: ::core::ffi::c_int,
    B: *const cuda_types::cublas::cuComplex,
    ldb: ::core::ffi::c_int,
    beta: *const f32,
    C: *mut cuda_types::cublas::cuComplex,
    ldc: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasCher2k_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasCher2k_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasCher2k_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasCher2k_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(k), ": ").as_bytes())?;
    crate::CudaDisplay::write(&k, "cublasCher2k_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasCher2k_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasCher2k_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasCher2k_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(B), ": ").as_bytes())?;
    crate::CudaDisplay::write(&B, "cublasCher2k_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cublasCher2k_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasCher2k_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(C), ": ").as_bytes())?;
    crate::CudaDisplay::write(&C, "cublasCher2k_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cublasCher2k_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasCher2k_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    trans: cuda_types::cublas::cublasOperation_t,
    n: i64,
    k: i64,
    alpha: *const cuda_types::cublas::cuComplex,
    A: *const cuda_types::cublas::cuComplex,
    lda: i64,
    B: *const cuda_types::cublas::cuComplex,
    ldb: i64,
    beta: *const f32,
    C: *mut cuda_types::cublas::cuComplex,
    ldc: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasCher2k_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasCher2k_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasCher2k_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasCher2k_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(k), ": ").as_bytes())?;
    crate::CudaDisplay::write(&k, "cublasCher2k_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasCher2k_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasCher2k_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasCher2k_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(B), ": ").as_bytes())?;
    crate::CudaDisplay::write(&B, "cublasCher2k_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cublasCher2k_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasCher2k_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(C), ": ").as_bytes())?;
    crate::CudaDisplay::write(&C, "cublasCher2k_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cublasCher2k_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasZher2k_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    trans: cuda_types::cublas::cublasOperation_t,
    n: ::core::ffi::c_int,
    k: ::core::ffi::c_int,
    alpha: *const cuda_types::cublas::cuDoubleComplex,
    A: *const cuda_types::cublas::cuDoubleComplex,
    lda: ::core::ffi::c_int,
    B: *const cuda_types::cublas::cuDoubleComplex,
    ldb: ::core::ffi::c_int,
    beta: *const f64,
    C: *mut cuda_types::cublas::cuDoubleComplex,
    ldc: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasZher2k_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasZher2k_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasZher2k_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasZher2k_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(k), ": ").as_bytes())?;
    crate::CudaDisplay::write(&k, "cublasZher2k_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasZher2k_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasZher2k_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasZher2k_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(B), ": ").as_bytes())?;
    crate::CudaDisplay::write(&B, "cublasZher2k_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cublasZher2k_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasZher2k_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(C), ": ").as_bytes())?;
    crate::CudaDisplay::write(&C, "cublasZher2k_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cublasZher2k_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasZher2k_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    trans: cuda_types::cublas::cublasOperation_t,
    n: i64,
    k: i64,
    alpha: *const cuda_types::cublas::cuDoubleComplex,
    A: *const cuda_types::cublas::cuDoubleComplex,
    lda: i64,
    B: *const cuda_types::cublas::cuDoubleComplex,
    ldb: i64,
    beta: *const f64,
    C: *mut cuda_types::cublas::cuDoubleComplex,
    ldc: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasZher2k_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasZher2k_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasZher2k_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasZher2k_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(k), ": ").as_bytes())?;
    crate::CudaDisplay::write(&k, "cublasZher2k_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasZher2k_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasZher2k_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasZher2k_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(B), ": ").as_bytes())?;
    crate::CudaDisplay::write(&B, "cublasZher2k_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cublasZher2k_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasZher2k_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(C), ": ").as_bytes())?;
    crate::CudaDisplay::write(&C, "cublasZher2k_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cublasZher2k_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasSsyrkx(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    trans: cuda_types::cublas::cublasOperation_t,
    n: ::core::ffi::c_int,
    k: ::core::ffi::c_int,
    alpha: *const f32,
    A: *const f32,
    lda: ::core::ffi::c_int,
    B: *const f32,
    ldb: ::core::ffi::c_int,
    beta: *const f32,
    C: *mut f32,
    ldc: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasSsyrkx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasSsyrkx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasSsyrkx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasSsyrkx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(k), ": ").as_bytes())?;
    crate::CudaDisplay::write(&k, "cublasSsyrkx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasSsyrkx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasSsyrkx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasSsyrkx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(B), ": ").as_bytes())?;
    crate::CudaDisplay::write(&B, "cublasSsyrkx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cublasSsyrkx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasSsyrkx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(C), ": ").as_bytes())?;
    crate::CudaDisplay::write(&C, "cublasSsyrkx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cublasSsyrkx", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasSsyrkx_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    trans: cuda_types::cublas::cublasOperation_t,
    n: i64,
    k: i64,
    alpha: *const f32,
    A: *const f32,
    lda: i64,
    B: *const f32,
    ldb: i64,
    beta: *const f32,
    C: *mut f32,
    ldc: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasSsyrkx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasSsyrkx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasSsyrkx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasSsyrkx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(k), ": ").as_bytes())?;
    crate::CudaDisplay::write(&k, "cublasSsyrkx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasSsyrkx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasSsyrkx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasSsyrkx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(B), ": ").as_bytes())?;
    crate::CudaDisplay::write(&B, "cublasSsyrkx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cublasSsyrkx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasSsyrkx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(C), ": ").as_bytes())?;
    crate::CudaDisplay::write(&C, "cublasSsyrkx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cublasSsyrkx_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasDsyrkx(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    trans: cuda_types::cublas::cublasOperation_t,
    n: ::core::ffi::c_int,
    k: ::core::ffi::c_int,
    alpha: *const f64,
    A: *const f64,
    lda: ::core::ffi::c_int,
    B: *const f64,
    ldb: ::core::ffi::c_int,
    beta: *const f64,
    C: *mut f64,
    ldc: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasDsyrkx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasDsyrkx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasDsyrkx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasDsyrkx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(k), ": ").as_bytes())?;
    crate::CudaDisplay::write(&k, "cublasDsyrkx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasDsyrkx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasDsyrkx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasDsyrkx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(B), ": ").as_bytes())?;
    crate::CudaDisplay::write(&B, "cublasDsyrkx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cublasDsyrkx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasDsyrkx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(C), ": ").as_bytes())?;
    crate::CudaDisplay::write(&C, "cublasDsyrkx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cublasDsyrkx", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasDsyrkx_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    trans: cuda_types::cublas::cublasOperation_t,
    n: i64,
    k: i64,
    alpha: *const f64,
    A: *const f64,
    lda: i64,
    B: *const f64,
    ldb: i64,
    beta: *const f64,
    C: *mut f64,
    ldc: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasDsyrkx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasDsyrkx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasDsyrkx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasDsyrkx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(k), ": ").as_bytes())?;
    crate::CudaDisplay::write(&k, "cublasDsyrkx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasDsyrkx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasDsyrkx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasDsyrkx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(B), ": ").as_bytes())?;
    crate::CudaDisplay::write(&B, "cublasDsyrkx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cublasDsyrkx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasDsyrkx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(C), ": ").as_bytes())?;
    crate::CudaDisplay::write(&C, "cublasDsyrkx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cublasDsyrkx_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasCsyrkx(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    trans: cuda_types::cublas::cublasOperation_t,
    n: ::core::ffi::c_int,
    k: ::core::ffi::c_int,
    alpha: *const cuda_types::cublas::cuComplex,
    A: *const cuda_types::cublas::cuComplex,
    lda: ::core::ffi::c_int,
    B: *const cuda_types::cublas::cuComplex,
    ldb: ::core::ffi::c_int,
    beta: *const cuda_types::cublas::cuComplex,
    C: *mut cuda_types::cublas::cuComplex,
    ldc: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasCsyrkx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasCsyrkx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasCsyrkx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasCsyrkx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(k), ": ").as_bytes())?;
    crate::CudaDisplay::write(&k, "cublasCsyrkx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasCsyrkx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasCsyrkx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasCsyrkx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(B), ": ").as_bytes())?;
    crate::CudaDisplay::write(&B, "cublasCsyrkx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cublasCsyrkx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasCsyrkx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(C), ": ").as_bytes())?;
    crate::CudaDisplay::write(&C, "cublasCsyrkx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cublasCsyrkx", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasCsyrkx_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    trans: cuda_types::cublas::cublasOperation_t,
    n: i64,
    k: i64,
    alpha: *const cuda_types::cublas::cuComplex,
    A: *const cuda_types::cublas::cuComplex,
    lda: i64,
    B: *const cuda_types::cublas::cuComplex,
    ldb: i64,
    beta: *const cuda_types::cublas::cuComplex,
    C: *mut cuda_types::cublas::cuComplex,
    ldc: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasCsyrkx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasCsyrkx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasCsyrkx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasCsyrkx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(k), ": ").as_bytes())?;
    crate::CudaDisplay::write(&k, "cublasCsyrkx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasCsyrkx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasCsyrkx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasCsyrkx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(B), ": ").as_bytes())?;
    crate::CudaDisplay::write(&B, "cublasCsyrkx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cublasCsyrkx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasCsyrkx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(C), ": ").as_bytes())?;
    crate::CudaDisplay::write(&C, "cublasCsyrkx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cublasCsyrkx_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasZsyrkx(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    trans: cuda_types::cublas::cublasOperation_t,
    n: ::core::ffi::c_int,
    k: ::core::ffi::c_int,
    alpha: *const cuda_types::cublas::cuDoubleComplex,
    A: *const cuda_types::cublas::cuDoubleComplex,
    lda: ::core::ffi::c_int,
    B: *const cuda_types::cublas::cuDoubleComplex,
    ldb: ::core::ffi::c_int,
    beta: *const cuda_types::cublas::cuDoubleComplex,
    C: *mut cuda_types::cublas::cuDoubleComplex,
    ldc: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasZsyrkx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasZsyrkx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasZsyrkx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasZsyrkx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(k), ": ").as_bytes())?;
    crate::CudaDisplay::write(&k, "cublasZsyrkx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasZsyrkx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasZsyrkx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasZsyrkx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(B), ": ").as_bytes())?;
    crate::CudaDisplay::write(&B, "cublasZsyrkx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cublasZsyrkx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasZsyrkx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(C), ": ").as_bytes())?;
    crate::CudaDisplay::write(&C, "cublasZsyrkx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cublasZsyrkx", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasZsyrkx_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    trans: cuda_types::cublas::cublasOperation_t,
    n: i64,
    k: i64,
    alpha: *const cuda_types::cublas::cuDoubleComplex,
    A: *const cuda_types::cublas::cuDoubleComplex,
    lda: i64,
    B: *const cuda_types::cublas::cuDoubleComplex,
    ldb: i64,
    beta: *const cuda_types::cublas::cuDoubleComplex,
    C: *mut cuda_types::cublas::cuDoubleComplex,
    ldc: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasZsyrkx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasZsyrkx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasZsyrkx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasZsyrkx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(k), ": ").as_bytes())?;
    crate::CudaDisplay::write(&k, "cublasZsyrkx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasZsyrkx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasZsyrkx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasZsyrkx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(B), ": ").as_bytes())?;
    crate::CudaDisplay::write(&B, "cublasZsyrkx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cublasZsyrkx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasZsyrkx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(C), ": ").as_bytes())?;
    crate::CudaDisplay::write(&C, "cublasZsyrkx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cublasZsyrkx_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasCherkx(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    trans: cuda_types::cublas::cublasOperation_t,
    n: ::core::ffi::c_int,
    k: ::core::ffi::c_int,
    alpha: *const cuda_types::cublas::cuComplex,
    A: *const cuda_types::cublas::cuComplex,
    lda: ::core::ffi::c_int,
    B: *const cuda_types::cublas::cuComplex,
    ldb: ::core::ffi::c_int,
    beta: *const f32,
    C: *mut cuda_types::cublas::cuComplex,
    ldc: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasCherkx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasCherkx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasCherkx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasCherkx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(k), ": ").as_bytes())?;
    crate::CudaDisplay::write(&k, "cublasCherkx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasCherkx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasCherkx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasCherkx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(B), ": ").as_bytes())?;
    crate::CudaDisplay::write(&B, "cublasCherkx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cublasCherkx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasCherkx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(C), ": ").as_bytes())?;
    crate::CudaDisplay::write(&C, "cublasCherkx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cublasCherkx", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasCherkx_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    trans: cuda_types::cublas::cublasOperation_t,
    n: i64,
    k: i64,
    alpha: *const cuda_types::cublas::cuComplex,
    A: *const cuda_types::cublas::cuComplex,
    lda: i64,
    B: *const cuda_types::cublas::cuComplex,
    ldb: i64,
    beta: *const f32,
    C: *mut cuda_types::cublas::cuComplex,
    ldc: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasCherkx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasCherkx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasCherkx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasCherkx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(k), ": ").as_bytes())?;
    crate::CudaDisplay::write(&k, "cublasCherkx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasCherkx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasCherkx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasCherkx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(B), ": ").as_bytes())?;
    crate::CudaDisplay::write(&B, "cublasCherkx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cublasCherkx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasCherkx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(C), ": ").as_bytes())?;
    crate::CudaDisplay::write(&C, "cublasCherkx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cublasCherkx_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasZherkx(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    trans: cuda_types::cublas::cublasOperation_t,
    n: ::core::ffi::c_int,
    k: ::core::ffi::c_int,
    alpha: *const cuda_types::cublas::cuDoubleComplex,
    A: *const cuda_types::cublas::cuDoubleComplex,
    lda: ::core::ffi::c_int,
    B: *const cuda_types::cublas::cuDoubleComplex,
    ldb: ::core::ffi::c_int,
    beta: *const f64,
    C: *mut cuda_types::cublas::cuDoubleComplex,
    ldc: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasZherkx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasZherkx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasZherkx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasZherkx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(k), ": ").as_bytes())?;
    crate::CudaDisplay::write(&k, "cublasZherkx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasZherkx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasZherkx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasZherkx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(B), ": ").as_bytes())?;
    crate::CudaDisplay::write(&B, "cublasZherkx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cublasZherkx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasZherkx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(C), ": ").as_bytes())?;
    crate::CudaDisplay::write(&C, "cublasZherkx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cublasZherkx", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasZherkx_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    trans: cuda_types::cublas::cublasOperation_t,
    n: i64,
    k: i64,
    alpha: *const cuda_types::cublas::cuDoubleComplex,
    A: *const cuda_types::cublas::cuDoubleComplex,
    lda: i64,
    B: *const cuda_types::cublas::cuDoubleComplex,
    ldb: i64,
    beta: *const f64,
    C: *mut cuda_types::cublas::cuDoubleComplex,
    ldc: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasZherkx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasZherkx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasZherkx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasZherkx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(k), ": ").as_bytes())?;
    crate::CudaDisplay::write(&k, "cublasZherkx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasZherkx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasZherkx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasZherkx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(B), ": ").as_bytes())?;
    crate::CudaDisplay::write(&B, "cublasZherkx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cublasZherkx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasZherkx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(C), ": ").as_bytes())?;
    crate::CudaDisplay::write(&C, "cublasZherkx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cublasZherkx_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasSsymm_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    side: cuda_types::cublas::cublasSideMode_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    alpha: *const f32,
    A: *const f32,
    lda: ::core::ffi::c_int,
    B: *const f32,
    ldb: ::core::ffi::c_int,
    beta: *const f32,
    C: *mut f32,
    ldc: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasSsymm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(side), ": ").as_bytes())?;
    crate::CudaDisplay::write(&side, "cublasSsymm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasSsymm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasSsymm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasSsymm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasSsymm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasSsymm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasSsymm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(B), ": ").as_bytes())?;
    crate::CudaDisplay::write(&B, "cublasSsymm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cublasSsymm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasSsymm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(C), ": ").as_bytes())?;
    crate::CudaDisplay::write(&C, "cublasSsymm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cublasSsymm_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasSsymm_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    side: cuda_types::cublas::cublasSideMode_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    m: i64,
    n: i64,
    alpha: *const f32,
    A: *const f32,
    lda: i64,
    B: *const f32,
    ldb: i64,
    beta: *const f32,
    C: *mut f32,
    ldc: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasSsymm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(side), ": ").as_bytes())?;
    crate::CudaDisplay::write(&side, "cublasSsymm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasSsymm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasSsymm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasSsymm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasSsymm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasSsymm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasSsymm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(B), ": ").as_bytes())?;
    crate::CudaDisplay::write(&B, "cublasSsymm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cublasSsymm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasSsymm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(C), ": ").as_bytes())?;
    crate::CudaDisplay::write(&C, "cublasSsymm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cublasSsymm_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasDsymm_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    side: cuda_types::cublas::cublasSideMode_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    alpha: *const f64,
    A: *const f64,
    lda: ::core::ffi::c_int,
    B: *const f64,
    ldb: ::core::ffi::c_int,
    beta: *const f64,
    C: *mut f64,
    ldc: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasDsymm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(side), ": ").as_bytes())?;
    crate::CudaDisplay::write(&side, "cublasDsymm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasDsymm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasDsymm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasDsymm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasDsymm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasDsymm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasDsymm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(B), ": ").as_bytes())?;
    crate::CudaDisplay::write(&B, "cublasDsymm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cublasDsymm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasDsymm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(C), ": ").as_bytes())?;
    crate::CudaDisplay::write(&C, "cublasDsymm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cublasDsymm_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasDsymm_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    side: cuda_types::cublas::cublasSideMode_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    m: i64,
    n: i64,
    alpha: *const f64,
    A: *const f64,
    lda: i64,
    B: *const f64,
    ldb: i64,
    beta: *const f64,
    C: *mut f64,
    ldc: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasDsymm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(side), ": ").as_bytes())?;
    crate::CudaDisplay::write(&side, "cublasDsymm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasDsymm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasDsymm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasDsymm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasDsymm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasDsymm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasDsymm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(B), ": ").as_bytes())?;
    crate::CudaDisplay::write(&B, "cublasDsymm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cublasDsymm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasDsymm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(C), ": ").as_bytes())?;
    crate::CudaDisplay::write(&C, "cublasDsymm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cublasDsymm_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasCsymm_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    side: cuda_types::cublas::cublasSideMode_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    alpha: *const cuda_types::cublas::cuComplex,
    A: *const cuda_types::cublas::cuComplex,
    lda: ::core::ffi::c_int,
    B: *const cuda_types::cublas::cuComplex,
    ldb: ::core::ffi::c_int,
    beta: *const cuda_types::cublas::cuComplex,
    C: *mut cuda_types::cublas::cuComplex,
    ldc: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasCsymm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(side), ": ").as_bytes())?;
    crate::CudaDisplay::write(&side, "cublasCsymm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasCsymm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasCsymm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasCsymm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasCsymm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasCsymm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasCsymm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(B), ": ").as_bytes())?;
    crate::CudaDisplay::write(&B, "cublasCsymm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cublasCsymm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasCsymm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(C), ": ").as_bytes())?;
    crate::CudaDisplay::write(&C, "cublasCsymm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cublasCsymm_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasCsymm_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    side: cuda_types::cublas::cublasSideMode_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    m: i64,
    n: i64,
    alpha: *const cuda_types::cublas::cuComplex,
    A: *const cuda_types::cublas::cuComplex,
    lda: i64,
    B: *const cuda_types::cublas::cuComplex,
    ldb: i64,
    beta: *const cuda_types::cublas::cuComplex,
    C: *mut cuda_types::cublas::cuComplex,
    ldc: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasCsymm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(side), ": ").as_bytes())?;
    crate::CudaDisplay::write(&side, "cublasCsymm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasCsymm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasCsymm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasCsymm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasCsymm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasCsymm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasCsymm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(B), ": ").as_bytes())?;
    crate::CudaDisplay::write(&B, "cublasCsymm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cublasCsymm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasCsymm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(C), ": ").as_bytes())?;
    crate::CudaDisplay::write(&C, "cublasCsymm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cublasCsymm_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasZsymm_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    side: cuda_types::cublas::cublasSideMode_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    alpha: *const cuda_types::cublas::cuDoubleComplex,
    A: *const cuda_types::cublas::cuDoubleComplex,
    lda: ::core::ffi::c_int,
    B: *const cuda_types::cublas::cuDoubleComplex,
    ldb: ::core::ffi::c_int,
    beta: *const cuda_types::cublas::cuDoubleComplex,
    C: *mut cuda_types::cublas::cuDoubleComplex,
    ldc: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasZsymm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(side), ": ").as_bytes())?;
    crate::CudaDisplay::write(&side, "cublasZsymm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasZsymm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasZsymm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasZsymm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasZsymm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasZsymm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasZsymm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(B), ": ").as_bytes())?;
    crate::CudaDisplay::write(&B, "cublasZsymm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cublasZsymm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasZsymm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(C), ": ").as_bytes())?;
    crate::CudaDisplay::write(&C, "cublasZsymm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cublasZsymm_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasZsymm_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    side: cuda_types::cublas::cublasSideMode_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    m: i64,
    n: i64,
    alpha: *const cuda_types::cublas::cuDoubleComplex,
    A: *const cuda_types::cublas::cuDoubleComplex,
    lda: i64,
    B: *const cuda_types::cublas::cuDoubleComplex,
    ldb: i64,
    beta: *const cuda_types::cublas::cuDoubleComplex,
    C: *mut cuda_types::cublas::cuDoubleComplex,
    ldc: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasZsymm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(side), ": ").as_bytes())?;
    crate::CudaDisplay::write(&side, "cublasZsymm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasZsymm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasZsymm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasZsymm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasZsymm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasZsymm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasZsymm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(B), ": ").as_bytes())?;
    crate::CudaDisplay::write(&B, "cublasZsymm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cublasZsymm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasZsymm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(C), ": ").as_bytes())?;
    crate::CudaDisplay::write(&C, "cublasZsymm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cublasZsymm_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasChemm_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    side: cuda_types::cublas::cublasSideMode_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    alpha: *const cuda_types::cublas::cuComplex,
    A: *const cuda_types::cublas::cuComplex,
    lda: ::core::ffi::c_int,
    B: *const cuda_types::cublas::cuComplex,
    ldb: ::core::ffi::c_int,
    beta: *const cuda_types::cublas::cuComplex,
    C: *mut cuda_types::cublas::cuComplex,
    ldc: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasChemm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(side), ": ").as_bytes())?;
    crate::CudaDisplay::write(&side, "cublasChemm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasChemm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasChemm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasChemm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasChemm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasChemm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasChemm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(B), ": ").as_bytes())?;
    crate::CudaDisplay::write(&B, "cublasChemm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cublasChemm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasChemm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(C), ": ").as_bytes())?;
    crate::CudaDisplay::write(&C, "cublasChemm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cublasChemm_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasChemm_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    side: cuda_types::cublas::cublasSideMode_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    m: i64,
    n: i64,
    alpha: *const cuda_types::cublas::cuComplex,
    A: *const cuda_types::cublas::cuComplex,
    lda: i64,
    B: *const cuda_types::cublas::cuComplex,
    ldb: i64,
    beta: *const cuda_types::cublas::cuComplex,
    C: *mut cuda_types::cublas::cuComplex,
    ldc: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasChemm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(side), ": ").as_bytes())?;
    crate::CudaDisplay::write(&side, "cublasChemm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasChemm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasChemm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasChemm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasChemm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasChemm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasChemm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(B), ": ").as_bytes())?;
    crate::CudaDisplay::write(&B, "cublasChemm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cublasChemm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasChemm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(C), ": ").as_bytes())?;
    crate::CudaDisplay::write(&C, "cublasChemm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cublasChemm_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasZhemm_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    side: cuda_types::cublas::cublasSideMode_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    alpha: *const cuda_types::cublas::cuDoubleComplex,
    A: *const cuda_types::cublas::cuDoubleComplex,
    lda: ::core::ffi::c_int,
    B: *const cuda_types::cublas::cuDoubleComplex,
    ldb: ::core::ffi::c_int,
    beta: *const cuda_types::cublas::cuDoubleComplex,
    C: *mut cuda_types::cublas::cuDoubleComplex,
    ldc: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasZhemm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(side), ": ").as_bytes())?;
    crate::CudaDisplay::write(&side, "cublasZhemm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasZhemm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasZhemm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasZhemm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasZhemm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasZhemm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasZhemm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(B), ": ").as_bytes())?;
    crate::CudaDisplay::write(&B, "cublasZhemm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cublasZhemm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasZhemm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(C), ": ").as_bytes())?;
    crate::CudaDisplay::write(&C, "cublasZhemm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cublasZhemm_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasZhemm_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    side: cuda_types::cublas::cublasSideMode_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    m: i64,
    n: i64,
    alpha: *const cuda_types::cublas::cuDoubleComplex,
    A: *const cuda_types::cublas::cuDoubleComplex,
    lda: i64,
    B: *const cuda_types::cublas::cuDoubleComplex,
    ldb: i64,
    beta: *const cuda_types::cublas::cuDoubleComplex,
    C: *mut cuda_types::cublas::cuDoubleComplex,
    ldc: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasZhemm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(side), ": ").as_bytes())?;
    crate::CudaDisplay::write(&side, "cublasZhemm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasZhemm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasZhemm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasZhemm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasZhemm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasZhemm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasZhemm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(B), ": ").as_bytes())?;
    crate::CudaDisplay::write(&B, "cublasZhemm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cublasZhemm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasZhemm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(C), ": ").as_bytes())?;
    crate::CudaDisplay::write(&C, "cublasZhemm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cublasZhemm_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasStrsm_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    side: cuda_types::cublas::cublasSideMode_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    trans: cuda_types::cublas::cublasOperation_t,
    diag: cuda_types::cublas::cublasDiagType_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    alpha: *const f32,
    A: *const f32,
    lda: ::core::ffi::c_int,
    B: *mut f32,
    ldb: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasStrsm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(side), ": ").as_bytes())?;
    crate::CudaDisplay::write(&side, "cublasStrsm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasStrsm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasStrsm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(diag), ": ").as_bytes())?;
    crate::CudaDisplay::write(&diag, "cublasStrsm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasStrsm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasStrsm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasStrsm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasStrsm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasStrsm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(B), ": ").as_bytes())?;
    crate::CudaDisplay::write(&B, "cublasStrsm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cublasStrsm_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasStrsm_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    side: cuda_types::cublas::cublasSideMode_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    trans: cuda_types::cublas::cublasOperation_t,
    diag: cuda_types::cublas::cublasDiagType_t,
    m: i64,
    n: i64,
    alpha: *const f32,
    A: *const f32,
    lda: i64,
    B: *mut f32,
    ldb: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasStrsm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(side), ": ").as_bytes())?;
    crate::CudaDisplay::write(&side, "cublasStrsm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasStrsm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasStrsm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(diag), ": ").as_bytes())?;
    crate::CudaDisplay::write(&diag, "cublasStrsm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasStrsm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasStrsm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasStrsm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasStrsm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasStrsm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(B), ": ").as_bytes())?;
    crate::CudaDisplay::write(&B, "cublasStrsm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cublasStrsm_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasDtrsm_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    side: cuda_types::cublas::cublasSideMode_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    trans: cuda_types::cublas::cublasOperation_t,
    diag: cuda_types::cublas::cublasDiagType_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    alpha: *const f64,
    A: *const f64,
    lda: ::core::ffi::c_int,
    B: *mut f64,
    ldb: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasDtrsm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(side), ": ").as_bytes())?;
    crate::CudaDisplay::write(&side, "cublasDtrsm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasDtrsm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasDtrsm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(diag), ": ").as_bytes())?;
    crate::CudaDisplay::write(&diag, "cublasDtrsm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasDtrsm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasDtrsm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasDtrsm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasDtrsm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasDtrsm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(B), ": ").as_bytes())?;
    crate::CudaDisplay::write(&B, "cublasDtrsm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cublasDtrsm_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasDtrsm_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    side: cuda_types::cublas::cublasSideMode_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    trans: cuda_types::cublas::cublasOperation_t,
    diag: cuda_types::cublas::cublasDiagType_t,
    m: i64,
    n: i64,
    alpha: *const f64,
    A: *const f64,
    lda: i64,
    B: *mut f64,
    ldb: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasDtrsm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(side), ": ").as_bytes())?;
    crate::CudaDisplay::write(&side, "cublasDtrsm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasDtrsm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasDtrsm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(diag), ": ").as_bytes())?;
    crate::CudaDisplay::write(&diag, "cublasDtrsm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasDtrsm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasDtrsm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasDtrsm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasDtrsm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasDtrsm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(B), ": ").as_bytes())?;
    crate::CudaDisplay::write(&B, "cublasDtrsm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cublasDtrsm_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasCtrsm_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    side: cuda_types::cublas::cublasSideMode_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    trans: cuda_types::cublas::cublasOperation_t,
    diag: cuda_types::cublas::cublasDiagType_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    alpha: *const cuda_types::cublas::cuComplex,
    A: *const cuda_types::cublas::cuComplex,
    lda: ::core::ffi::c_int,
    B: *mut cuda_types::cublas::cuComplex,
    ldb: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasCtrsm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(side), ": ").as_bytes())?;
    crate::CudaDisplay::write(&side, "cublasCtrsm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasCtrsm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasCtrsm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(diag), ": ").as_bytes())?;
    crate::CudaDisplay::write(&diag, "cublasCtrsm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasCtrsm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasCtrsm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasCtrsm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasCtrsm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasCtrsm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(B), ": ").as_bytes())?;
    crate::CudaDisplay::write(&B, "cublasCtrsm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cublasCtrsm_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasCtrsm_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    side: cuda_types::cublas::cublasSideMode_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    trans: cuda_types::cublas::cublasOperation_t,
    diag: cuda_types::cublas::cublasDiagType_t,
    m: i64,
    n: i64,
    alpha: *const cuda_types::cublas::cuComplex,
    A: *const cuda_types::cublas::cuComplex,
    lda: i64,
    B: *mut cuda_types::cublas::cuComplex,
    ldb: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasCtrsm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(side), ": ").as_bytes())?;
    crate::CudaDisplay::write(&side, "cublasCtrsm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasCtrsm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasCtrsm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(diag), ": ").as_bytes())?;
    crate::CudaDisplay::write(&diag, "cublasCtrsm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasCtrsm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasCtrsm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasCtrsm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasCtrsm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasCtrsm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(B), ": ").as_bytes())?;
    crate::CudaDisplay::write(&B, "cublasCtrsm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cublasCtrsm_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasZtrsm_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    side: cuda_types::cublas::cublasSideMode_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    trans: cuda_types::cublas::cublasOperation_t,
    diag: cuda_types::cublas::cublasDiagType_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    alpha: *const cuda_types::cublas::cuDoubleComplex,
    A: *const cuda_types::cublas::cuDoubleComplex,
    lda: ::core::ffi::c_int,
    B: *mut cuda_types::cublas::cuDoubleComplex,
    ldb: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasZtrsm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(side), ": ").as_bytes())?;
    crate::CudaDisplay::write(&side, "cublasZtrsm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasZtrsm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasZtrsm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(diag), ": ").as_bytes())?;
    crate::CudaDisplay::write(&diag, "cublasZtrsm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasZtrsm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasZtrsm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasZtrsm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasZtrsm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasZtrsm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(B), ": ").as_bytes())?;
    crate::CudaDisplay::write(&B, "cublasZtrsm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cublasZtrsm_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasZtrsm_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    side: cuda_types::cublas::cublasSideMode_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    trans: cuda_types::cublas::cublasOperation_t,
    diag: cuda_types::cublas::cublasDiagType_t,
    m: i64,
    n: i64,
    alpha: *const cuda_types::cublas::cuDoubleComplex,
    A: *const cuda_types::cublas::cuDoubleComplex,
    lda: i64,
    B: *mut cuda_types::cublas::cuDoubleComplex,
    ldb: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasZtrsm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(side), ": ").as_bytes())?;
    crate::CudaDisplay::write(&side, "cublasZtrsm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasZtrsm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasZtrsm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(diag), ": ").as_bytes())?;
    crate::CudaDisplay::write(&diag, "cublasZtrsm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasZtrsm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasZtrsm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasZtrsm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasZtrsm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasZtrsm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(B), ": ").as_bytes())?;
    crate::CudaDisplay::write(&B, "cublasZtrsm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cublasZtrsm_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasStrmm_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    side: cuda_types::cublas::cublasSideMode_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    trans: cuda_types::cublas::cublasOperation_t,
    diag: cuda_types::cublas::cublasDiagType_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    alpha: *const f32,
    A: *const f32,
    lda: ::core::ffi::c_int,
    B: *const f32,
    ldb: ::core::ffi::c_int,
    C: *mut f32,
    ldc: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasStrmm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(side), ": ").as_bytes())?;
    crate::CudaDisplay::write(&side, "cublasStrmm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasStrmm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasStrmm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(diag), ": ").as_bytes())?;
    crate::CudaDisplay::write(&diag, "cublasStrmm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasStrmm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasStrmm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasStrmm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasStrmm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasStrmm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(B), ": ").as_bytes())?;
    crate::CudaDisplay::write(&B, "cublasStrmm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cublasStrmm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(C), ": ").as_bytes())?;
    crate::CudaDisplay::write(&C, "cublasStrmm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cublasStrmm_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasStrmm_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    side: cuda_types::cublas::cublasSideMode_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    trans: cuda_types::cublas::cublasOperation_t,
    diag: cuda_types::cublas::cublasDiagType_t,
    m: i64,
    n: i64,
    alpha: *const f32,
    A: *const f32,
    lda: i64,
    B: *const f32,
    ldb: i64,
    C: *mut f32,
    ldc: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasStrmm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(side), ": ").as_bytes())?;
    crate::CudaDisplay::write(&side, "cublasStrmm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasStrmm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasStrmm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(diag), ": ").as_bytes())?;
    crate::CudaDisplay::write(&diag, "cublasStrmm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasStrmm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasStrmm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasStrmm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasStrmm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasStrmm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(B), ": ").as_bytes())?;
    crate::CudaDisplay::write(&B, "cublasStrmm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cublasStrmm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(C), ": ").as_bytes())?;
    crate::CudaDisplay::write(&C, "cublasStrmm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cublasStrmm_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasDtrmm_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    side: cuda_types::cublas::cublasSideMode_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    trans: cuda_types::cublas::cublasOperation_t,
    diag: cuda_types::cublas::cublasDiagType_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    alpha: *const f64,
    A: *const f64,
    lda: ::core::ffi::c_int,
    B: *const f64,
    ldb: ::core::ffi::c_int,
    C: *mut f64,
    ldc: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasDtrmm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(side), ": ").as_bytes())?;
    crate::CudaDisplay::write(&side, "cublasDtrmm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasDtrmm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasDtrmm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(diag), ": ").as_bytes())?;
    crate::CudaDisplay::write(&diag, "cublasDtrmm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasDtrmm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasDtrmm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasDtrmm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasDtrmm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasDtrmm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(B), ": ").as_bytes())?;
    crate::CudaDisplay::write(&B, "cublasDtrmm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cublasDtrmm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(C), ": ").as_bytes())?;
    crate::CudaDisplay::write(&C, "cublasDtrmm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cublasDtrmm_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasDtrmm_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    side: cuda_types::cublas::cublasSideMode_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    trans: cuda_types::cublas::cublasOperation_t,
    diag: cuda_types::cublas::cublasDiagType_t,
    m: i64,
    n: i64,
    alpha: *const f64,
    A: *const f64,
    lda: i64,
    B: *const f64,
    ldb: i64,
    C: *mut f64,
    ldc: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasDtrmm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(side), ": ").as_bytes())?;
    crate::CudaDisplay::write(&side, "cublasDtrmm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasDtrmm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasDtrmm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(diag), ": ").as_bytes())?;
    crate::CudaDisplay::write(&diag, "cublasDtrmm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasDtrmm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasDtrmm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasDtrmm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasDtrmm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasDtrmm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(B), ": ").as_bytes())?;
    crate::CudaDisplay::write(&B, "cublasDtrmm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cublasDtrmm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(C), ": ").as_bytes())?;
    crate::CudaDisplay::write(&C, "cublasDtrmm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cublasDtrmm_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasCtrmm_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    side: cuda_types::cublas::cublasSideMode_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    trans: cuda_types::cublas::cublasOperation_t,
    diag: cuda_types::cublas::cublasDiagType_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    alpha: *const cuda_types::cublas::cuComplex,
    A: *const cuda_types::cublas::cuComplex,
    lda: ::core::ffi::c_int,
    B: *const cuda_types::cublas::cuComplex,
    ldb: ::core::ffi::c_int,
    C: *mut cuda_types::cublas::cuComplex,
    ldc: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasCtrmm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(side), ": ").as_bytes())?;
    crate::CudaDisplay::write(&side, "cublasCtrmm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasCtrmm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasCtrmm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(diag), ": ").as_bytes())?;
    crate::CudaDisplay::write(&diag, "cublasCtrmm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasCtrmm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasCtrmm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasCtrmm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasCtrmm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasCtrmm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(B), ": ").as_bytes())?;
    crate::CudaDisplay::write(&B, "cublasCtrmm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cublasCtrmm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(C), ": ").as_bytes())?;
    crate::CudaDisplay::write(&C, "cublasCtrmm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cublasCtrmm_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasCtrmm_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    side: cuda_types::cublas::cublasSideMode_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    trans: cuda_types::cublas::cublasOperation_t,
    diag: cuda_types::cublas::cublasDiagType_t,
    m: i64,
    n: i64,
    alpha: *const cuda_types::cublas::cuComplex,
    A: *const cuda_types::cublas::cuComplex,
    lda: i64,
    B: *const cuda_types::cublas::cuComplex,
    ldb: i64,
    C: *mut cuda_types::cublas::cuComplex,
    ldc: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasCtrmm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(side), ": ").as_bytes())?;
    crate::CudaDisplay::write(&side, "cublasCtrmm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasCtrmm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasCtrmm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(diag), ": ").as_bytes())?;
    crate::CudaDisplay::write(&diag, "cublasCtrmm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasCtrmm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasCtrmm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasCtrmm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasCtrmm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasCtrmm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(B), ": ").as_bytes())?;
    crate::CudaDisplay::write(&B, "cublasCtrmm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cublasCtrmm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(C), ": ").as_bytes())?;
    crate::CudaDisplay::write(&C, "cublasCtrmm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cublasCtrmm_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasZtrmm_v2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    side: cuda_types::cublas::cublasSideMode_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    trans: cuda_types::cublas::cublasOperation_t,
    diag: cuda_types::cublas::cublasDiagType_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    alpha: *const cuda_types::cublas::cuDoubleComplex,
    A: *const cuda_types::cublas::cuDoubleComplex,
    lda: ::core::ffi::c_int,
    B: *const cuda_types::cublas::cuDoubleComplex,
    ldb: ::core::ffi::c_int,
    C: *mut cuda_types::cublas::cuDoubleComplex,
    ldc: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasZtrmm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(side), ": ").as_bytes())?;
    crate::CudaDisplay::write(&side, "cublasZtrmm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasZtrmm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasZtrmm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(diag), ": ").as_bytes())?;
    crate::CudaDisplay::write(&diag, "cublasZtrmm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasZtrmm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasZtrmm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasZtrmm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasZtrmm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasZtrmm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(B), ": ").as_bytes())?;
    crate::CudaDisplay::write(&B, "cublasZtrmm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cublasZtrmm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(C), ": ").as_bytes())?;
    crate::CudaDisplay::write(&C, "cublasZtrmm_v2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cublasZtrmm_v2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasZtrmm_v2_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    side: cuda_types::cublas::cublasSideMode_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    trans: cuda_types::cublas::cublasOperation_t,
    diag: cuda_types::cublas::cublasDiagType_t,
    m: i64,
    n: i64,
    alpha: *const cuda_types::cublas::cuDoubleComplex,
    A: *const cuda_types::cublas::cuDoubleComplex,
    lda: i64,
    B: *const cuda_types::cublas::cuDoubleComplex,
    ldb: i64,
    C: *mut cuda_types::cublas::cuDoubleComplex,
    ldc: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasZtrmm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(side), ": ").as_bytes())?;
    crate::CudaDisplay::write(&side, "cublasZtrmm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasZtrmm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasZtrmm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(diag), ": ").as_bytes())?;
    crate::CudaDisplay::write(&diag, "cublasZtrmm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasZtrmm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasZtrmm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasZtrmm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasZtrmm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasZtrmm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(B), ": ").as_bytes())?;
    crate::CudaDisplay::write(&B, "cublasZtrmm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cublasZtrmm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(C), ": ").as_bytes())?;
    crate::CudaDisplay::write(&C, "cublasZtrmm_v2_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cublasZtrmm_v2_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasHgemmBatched(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    transa: cuda_types::cublas::cublasOperation_t,
    transb: cuda_types::cublas::cublasOperation_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    k: ::core::ffi::c_int,
    alpha: *const cuda_types::cublas::__half,
    Aarray: *const *const cuda_types::cublas::__half,
    lda: ::core::ffi::c_int,
    Barray: *const *const cuda_types::cublas::__half,
    ldb: ::core::ffi::c_int,
    beta: *const cuda_types::cublas::__half,
    Carray: *const *mut cuda_types::cublas::__half,
    ldc: ::core::ffi::c_int,
    batchCount: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasHgemmBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transa), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transa, "cublasHgemmBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transb, "cublasHgemmBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasHgemmBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasHgemmBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(k), ": ").as_bytes())?;
    crate::CudaDisplay::write(&k, "cublasHgemmBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasHgemmBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Aarray), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Aarray, "cublasHgemmBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasHgemmBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Barray), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Barray, "cublasHgemmBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cublasHgemmBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasHgemmBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Carray), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Carray, "cublasHgemmBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cublasHgemmBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(batchCount), ": ").as_bytes())?;
    crate::CudaDisplay::write(&batchCount, "cublasHgemmBatched", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasHgemmBatched_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    transa: cuda_types::cublas::cublasOperation_t,
    transb: cuda_types::cublas::cublasOperation_t,
    m: i64,
    n: i64,
    k: i64,
    alpha: *const cuda_types::cublas::__half,
    Aarray: *const *const cuda_types::cublas::__half,
    lda: i64,
    Barray: *const *const cuda_types::cublas::__half,
    ldb: i64,
    beta: *const cuda_types::cublas::__half,
    Carray: *const *mut cuda_types::cublas::__half,
    ldc: i64,
    batchCount: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasHgemmBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transa), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transa, "cublasHgemmBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transb, "cublasHgemmBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasHgemmBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasHgemmBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(k), ": ").as_bytes())?;
    crate::CudaDisplay::write(&k, "cublasHgemmBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasHgemmBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Aarray), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Aarray, "cublasHgemmBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasHgemmBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Barray), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Barray, "cublasHgemmBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cublasHgemmBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasHgemmBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Carray), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Carray, "cublasHgemmBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cublasHgemmBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(batchCount), ": ").as_bytes())?;
    crate::CudaDisplay::write(&batchCount, "cublasHgemmBatched_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasSgemmBatched(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    transa: cuda_types::cublas::cublasOperation_t,
    transb: cuda_types::cublas::cublasOperation_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    k: ::core::ffi::c_int,
    alpha: *const f32,
    Aarray: *const *const f32,
    lda: ::core::ffi::c_int,
    Barray: *const *const f32,
    ldb: ::core::ffi::c_int,
    beta: *const f32,
    Carray: *const *mut f32,
    ldc: ::core::ffi::c_int,
    batchCount: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasSgemmBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transa), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transa, "cublasSgemmBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transb, "cublasSgemmBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasSgemmBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasSgemmBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(k), ": ").as_bytes())?;
    crate::CudaDisplay::write(&k, "cublasSgemmBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasSgemmBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Aarray), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Aarray, "cublasSgemmBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasSgemmBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Barray), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Barray, "cublasSgemmBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cublasSgemmBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasSgemmBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Carray), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Carray, "cublasSgemmBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cublasSgemmBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(batchCount), ": ").as_bytes())?;
    crate::CudaDisplay::write(&batchCount, "cublasSgemmBatched", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasSgemmBatched_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    transa: cuda_types::cublas::cublasOperation_t,
    transb: cuda_types::cublas::cublasOperation_t,
    m: i64,
    n: i64,
    k: i64,
    alpha: *const f32,
    Aarray: *const *const f32,
    lda: i64,
    Barray: *const *const f32,
    ldb: i64,
    beta: *const f32,
    Carray: *const *mut f32,
    ldc: i64,
    batchCount: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasSgemmBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transa), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transa, "cublasSgemmBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transb, "cublasSgemmBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasSgemmBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasSgemmBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(k), ": ").as_bytes())?;
    crate::CudaDisplay::write(&k, "cublasSgemmBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasSgemmBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Aarray), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Aarray, "cublasSgemmBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasSgemmBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Barray), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Barray, "cublasSgemmBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cublasSgemmBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasSgemmBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Carray), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Carray, "cublasSgemmBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cublasSgemmBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(batchCount), ": ").as_bytes())?;
    crate::CudaDisplay::write(&batchCount, "cublasSgemmBatched_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasDgemmBatched(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    transa: cuda_types::cublas::cublasOperation_t,
    transb: cuda_types::cublas::cublasOperation_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    k: ::core::ffi::c_int,
    alpha: *const f64,
    Aarray: *const *const f64,
    lda: ::core::ffi::c_int,
    Barray: *const *const f64,
    ldb: ::core::ffi::c_int,
    beta: *const f64,
    Carray: *const *mut f64,
    ldc: ::core::ffi::c_int,
    batchCount: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasDgemmBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transa), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transa, "cublasDgemmBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transb, "cublasDgemmBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasDgemmBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasDgemmBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(k), ": ").as_bytes())?;
    crate::CudaDisplay::write(&k, "cublasDgemmBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasDgemmBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Aarray), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Aarray, "cublasDgemmBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasDgemmBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Barray), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Barray, "cublasDgemmBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cublasDgemmBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasDgemmBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Carray), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Carray, "cublasDgemmBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cublasDgemmBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(batchCount), ": ").as_bytes())?;
    crate::CudaDisplay::write(&batchCount, "cublasDgemmBatched", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasDgemmBatched_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    transa: cuda_types::cublas::cublasOperation_t,
    transb: cuda_types::cublas::cublasOperation_t,
    m: i64,
    n: i64,
    k: i64,
    alpha: *const f64,
    Aarray: *const *const f64,
    lda: i64,
    Barray: *const *const f64,
    ldb: i64,
    beta: *const f64,
    Carray: *const *mut f64,
    ldc: i64,
    batchCount: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasDgemmBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transa), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transa, "cublasDgemmBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transb, "cublasDgemmBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasDgemmBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasDgemmBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(k), ": ").as_bytes())?;
    crate::CudaDisplay::write(&k, "cublasDgemmBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasDgemmBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Aarray), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Aarray, "cublasDgemmBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasDgemmBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Barray), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Barray, "cublasDgemmBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cublasDgemmBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasDgemmBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Carray), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Carray, "cublasDgemmBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cublasDgemmBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(batchCount), ": ").as_bytes())?;
    crate::CudaDisplay::write(&batchCount, "cublasDgemmBatched_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasCgemmBatched(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    transa: cuda_types::cublas::cublasOperation_t,
    transb: cuda_types::cublas::cublasOperation_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    k: ::core::ffi::c_int,
    alpha: *const cuda_types::cublas::cuComplex,
    Aarray: *const *const cuda_types::cublas::cuComplex,
    lda: ::core::ffi::c_int,
    Barray: *const *const cuda_types::cublas::cuComplex,
    ldb: ::core::ffi::c_int,
    beta: *const cuda_types::cublas::cuComplex,
    Carray: *const *mut cuda_types::cublas::cuComplex,
    ldc: ::core::ffi::c_int,
    batchCount: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasCgemmBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transa), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transa, "cublasCgemmBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transb, "cublasCgemmBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasCgemmBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasCgemmBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(k), ": ").as_bytes())?;
    crate::CudaDisplay::write(&k, "cublasCgemmBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasCgemmBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Aarray), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Aarray, "cublasCgemmBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasCgemmBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Barray), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Barray, "cublasCgemmBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cublasCgemmBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasCgemmBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Carray), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Carray, "cublasCgemmBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cublasCgemmBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(batchCount), ": ").as_bytes())?;
    crate::CudaDisplay::write(&batchCount, "cublasCgemmBatched", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasCgemmBatched_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    transa: cuda_types::cublas::cublasOperation_t,
    transb: cuda_types::cublas::cublasOperation_t,
    m: i64,
    n: i64,
    k: i64,
    alpha: *const cuda_types::cublas::cuComplex,
    Aarray: *const *const cuda_types::cublas::cuComplex,
    lda: i64,
    Barray: *const *const cuda_types::cublas::cuComplex,
    ldb: i64,
    beta: *const cuda_types::cublas::cuComplex,
    Carray: *const *mut cuda_types::cublas::cuComplex,
    ldc: i64,
    batchCount: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasCgemmBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transa), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transa, "cublasCgemmBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transb, "cublasCgemmBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasCgemmBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasCgemmBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(k), ": ").as_bytes())?;
    crate::CudaDisplay::write(&k, "cublasCgemmBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasCgemmBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Aarray), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Aarray, "cublasCgemmBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasCgemmBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Barray), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Barray, "cublasCgemmBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cublasCgemmBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasCgemmBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Carray), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Carray, "cublasCgemmBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cublasCgemmBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(batchCount), ": ").as_bytes())?;
    crate::CudaDisplay::write(&batchCount, "cublasCgemmBatched_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasCgemm3mBatched(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    transa: cuda_types::cublas::cublasOperation_t,
    transb: cuda_types::cublas::cublasOperation_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    k: ::core::ffi::c_int,
    alpha: *const cuda_types::cublas::cuComplex,
    Aarray: *const *const cuda_types::cublas::cuComplex,
    lda: ::core::ffi::c_int,
    Barray: *const *const cuda_types::cublas::cuComplex,
    ldb: ::core::ffi::c_int,
    beta: *const cuda_types::cublas::cuComplex,
    Carray: *const *mut cuda_types::cublas::cuComplex,
    ldc: ::core::ffi::c_int,
    batchCount: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasCgemm3mBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transa), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transa, "cublasCgemm3mBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transb, "cublasCgemm3mBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasCgemm3mBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasCgemm3mBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(k), ": ").as_bytes())?;
    crate::CudaDisplay::write(&k, "cublasCgemm3mBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasCgemm3mBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Aarray), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Aarray, "cublasCgemm3mBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasCgemm3mBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Barray), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Barray, "cublasCgemm3mBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cublasCgemm3mBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasCgemm3mBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Carray), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Carray, "cublasCgemm3mBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cublasCgemm3mBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(batchCount), ": ").as_bytes())?;
    crate::CudaDisplay::write(&batchCount, "cublasCgemm3mBatched", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasCgemm3mBatched_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    transa: cuda_types::cublas::cublasOperation_t,
    transb: cuda_types::cublas::cublasOperation_t,
    m: i64,
    n: i64,
    k: i64,
    alpha: *const cuda_types::cublas::cuComplex,
    Aarray: *const *const cuda_types::cublas::cuComplex,
    lda: i64,
    Barray: *const *const cuda_types::cublas::cuComplex,
    ldb: i64,
    beta: *const cuda_types::cublas::cuComplex,
    Carray: *const *mut cuda_types::cublas::cuComplex,
    ldc: i64,
    batchCount: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasCgemm3mBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transa), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transa, "cublasCgemm3mBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transb, "cublasCgemm3mBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasCgemm3mBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasCgemm3mBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(k), ": ").as_bytes())?;
    crate::CudaDisplay::write(&k, "cublasCgemm3mBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasCgemm3mBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Aarray), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Aarray, "cublasCgemm3mBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasCgemm3mBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Barray), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Barray, "cublasCgemm3mBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cublasCgemm3mBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasCgemm3mBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Carray), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Carray, "cublasCgemm3mBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cublasCgemm3mBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(batchCount), ": ").as_bytes())?;
    crate::CudaDisplay::write(&batchCount, "cublasCgemm3mBatched_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasZgemmBatched(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    transa: cuda_types::cublas::cublasOperation_t,
    transb: cuda_types::cublas::cublasOperation_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    k: ::core::ffi::c_int,
    alpha: *const cuda_types::cublas::cuDoubleComplex,
    Aarray: *const *const cuda_types::cublas::cuDoubleComplex,
    lda: ::core::ffi::c_int,
    Barray: *const *const cuda_types::cublas::cuDoubleComplex,
    ldb: ::core::ffi::c_int,
    beta: *const cuda_types::cublas::cuDoubleComplex,
    Carray: *const *mut cuda_types::cublas::cuDoubleComplex,
    ldc: ::core::ffi::c_int,
    batchCount: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasZgemmBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transa), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transa, "cublasZgemmBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transb, "cublasZgemmBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasZgemmBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasZgemmBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(k), ": ").as_bytes())?;
    crate::CudaDisplay::write(&k, "cublasZgemmBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasZgemmBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Aarray), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Aarray, "cublasZgemmBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasZgemmBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Barray), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Barray, "cublasZgemmBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cublasZgemmBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasZgemmBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Carray), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Carray, "cublasZgemmBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cublasZgemmBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(batchCount), ": ").as_bytes())?;
    crate::CudaDisplay::write(&batchCount, "cublasZgemmBatched", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasZgemmBatched_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    transa: cuda_types::cublas::cublasOperation_t,
    transb: cuda_types::cublas::cublasOperation_t,
    m: i64,
    n: i64,
    k: i64,
    alpha: *const cuda_types::cublas::cuDoubleComplex,
    Aarray: *const *const cuda_types::cublas::cuDoubleComplex,
    lda: i64,
    Barray: *const *const cuda_types::cublas::cuDoubleComplex,
    ldb: i64,
    beta: *const cuda_types::cublas::cuDoubleComplex,
    Carray: *const *mut cuda_types::cublas::cuDoubleComplex,
    ldc: i64,
    batchCount: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasZgemmBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transa), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transa, "cublasZgemmBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transb, "cublasZgemmBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasZgemmBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasZgemmBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(k), ": ").as_bytes())?;
    crate::CudaDisplay::write(&k, "cublasZgemmBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasZgemmBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Aarray), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Aarray, "cublasZgemmBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasZgemmBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Barray), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Barray, "cublasZgemmBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cublasZgemmBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasZgemmBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Carray), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Carray, "cublasZgemmBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cublasZgemmBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(batchCount), ": ").as_bytes())?;
    crate::CudaDisplay::write(&batchCount, "cublasZgemmBatched_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasHgemmStridedBatched(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    transa: cuda_types::cublas::cublasOperation_t,
    transb: cuda_types::cublas::cublasOperation_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    k: ::core::ffi::c_int,
    alpha: *const cuda_types::cublas::__half,
    A: *const cuda_types::cublas::__half,
    lda: ::core::ffi::c_int,
    strideA: ::core::ffi::c_longlong,
    B: *const cuda_types::cublas::__half,
    ldb: ::core::ffi::c_int,
    strideB: ::core::ffi::c_longlong,
    beta: *const cuda_types::cublas::__half,
    C: *mut cuda_types::cublas::__half,
    ldc: ::core::ffi::c_int,
    strideC: ::core::ffi::c_longlong,
    batchCount: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasHgemmStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transa), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transa, "cublasHgemmStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transb, "cublasHgemmStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasHgemmStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasHgemmStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(k), ": ").as_bytes())?;
    crate::CudaDisplay::write(&k, "cublasHgemmStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasHgemmStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasHgemmStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasHgemmStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(strideA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&strideA, "cublasHgemmStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(B), ": ").as_bytes())?;
    crate::CudaDisplay::write(&B, "cublasHgemmStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cublasHgemmStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(strideB), ": ").as_bytes())?;
    crate::CudaDisplay::write(&strideB, "cublasHgemmStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasHgemmStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(C), ": ").as_bytes())?;
    crate::CudaDisplay::write(&C, "cublasHgemmStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cublasHgemmStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(strideC), ": ").as_bytes())?;
    crate::CudaDisplay::write(&strideC, "cublasHgemmStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(batchCount), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &batchCount,
        "cublasHgemmStridedBatched",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cublasHgemmStridedBatched_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    transa: cuda_types::cublas::cublasOperation_t,
    transb: cuda_types::cublas::cublasOperation_t,
    m: i64,
    n: i64,
    k: i64,
    alpha: *const cuda_types::cublas::__half,
    A: *const cuda_types::cublas::__half,
    lda: i64,
    strideA: ::core::ffi::c_longlong,
    B: *const cuda_types::cublas::__half,
    ldb: i64,
    strideB: ::core::ffi::c_longlong,
    beta: *const cuda_types::cublas::__half,
    C: *mut cuda_types::cublas::__half,
    ldc: i64,
    strideC: ::core::ffi::c_longlong,
    batchCount: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasHgemmStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transa), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transa, "cublasHgemmStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transb, "cublasHgemmStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasHgemmStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasHgemmStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(k), ": ").as_bytes())?;
    crate::CudaDisplay::write(&k, "cublasHgemmStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasHgemmStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasHgemmStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasHgemmStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(strideA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &strideA,
        "cublasHgemmStridedBatched_64",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(B), ": ").as_bytes())?;
    crate::CudaDisplay::write(&B, "cublasHgemmStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cublasHgemmStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(strideB), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &strideB,
        "cublasHgemmStridedBatched_64",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasHgemmStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(C), ": ").as_bytes())?;
    crate::CudaDisplay::write(&C, "cublasHgemmStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cublasHgemmStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(strideC), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &strideC,
        "cublasHgemmStridedBatched_64",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(batchCount), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &batchCount,
        "cublasHgemmStridedBatched_64",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cublasSgemmStridedBatched(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    transa: cuda_types::cublas::cublasOperation_t,
    transb: cuda_types::cublas::cublasOperation_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    k: ::core::ffi::c_int,
    alpha: *const f32,
    A: *const f32,
    lda: ::core::ffi::c_int,
    strideA: ::core::ffi::c_longlong,
    B: *const f32,
    ldb: ::core::ffi::c_int,
    strideB: ::core::ffi::c_longlong,
    beta: *const f32,
    C: *mut f32,
    ldc: ::core::ffi::c_int,
    strideC: ::core::ffi::c_longlong,
    batchCount: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasSgemmStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transa), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transa, "cublasSgemmStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transb, "cublasSgemmStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasSgemmStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasSgemmStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(k), ": ").as_bytes())?;
    crate::CudaDisplay::write(&k, "cublasSgemmStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasSgemmStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasSgemmStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasSgemmStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(strideA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&strideA, "cublasSgemmStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(B), ": ").as_bytes())?;
    crate::CudaDisplay::write(&B, "cublasSgemmStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cublasSgemmStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(strideB), ": ").as_bytes())?;
    crate::CudaDisplay::write(&strideB, "cublasSgemmStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasSgemmStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(C), ": ").as_bytes())?;
    crate::CudaDisplay::write(&C, "cublasSgemmStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cublasSgemmStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(strideC), ": ").as_bytes())?;
    crate::CudaDisplay::write(&strideC, "cublasSgemmStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(batchCount), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &batchCount,
        "cublasSgemmStridedBatched",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cublasSgemmStridedBatched_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    transa: cuda_types::cublas::cublasOperation_t,
    transb: cuda_types::cublas::cublasOperation_t,
    m: i64,
    n: i64,
    k: i64,
    alpha: *const f32,
    A: *const f32,
    lda: i64,
    strideA: ::core::ffi::c_longlong,
    B: *const f32,
    ldb: i64,
    strideB: ::core::ffi::c_longlong,
    beta: *const f32,
    C: *mut f32,
    ldc: i64,
    strideC: ::core::ffi::c_longlong,
    batchCount: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasSgemmStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transa), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transa, "cublasSgemmStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transb, "cublasSgemmStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasSgemmStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasSgemmStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(k), ": ").as_bytes())?;
    crate::CudaDisplay::write(&k, "cublasSgemmStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasSgemmStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasSgemmStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasSgemmStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(strideA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &strideA,
        "cublasSgemmStridedBatched_64",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(B), ": ").as_bytes())?;
    crate::CudaDisplay::write(&B, "cublasSgemmStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cublasSgemmStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(strideB), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &strideB,
        "cublasSgemmStridedBatched_64",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasSgemmStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(C), ": ").as_bytes())?;
    crate::CudaDisplay::write(&C, "cublasSgemmStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cublasSgemmStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(strideC), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &strideC,
        "cublasSgemmStridedBatched_64",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(batchCount), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &batchCount,
        "cublasSgemmStridedBatched_64",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cublasDgemmStridedBatched(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    transa: cuda_types::cublas::cublasOperation_t,
    transb: cuda_types::cublas::cublasOperation_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    k: ::core::ffi::c_int,
    alpha: *const f64,
    A: *const f64,
    lda: ::core::ffi::c_int,
    strideA: ::core::ffi::c_longlong,
    B: *const f64,
    ldb: ::core::ffi::c_int,
    strideB: ::core::ffi::c_longlong,
    beta: *const f64,
    C: *mut f64,
    ldc: ::core::ffi::c_int,
    strideC: ::core::ffi::c_longlong,
    batchCount: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasDgemmStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transa), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transa, "cublasDgemmStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transb, "cublasDgemmStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasDgemmStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasDgemmStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(k), ": ").as_bytes())?;
    crate::CudaDisplay::write(&k, "cublasDgemmStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasDgemmStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasDgemmStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasDgemmStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(strideA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&strideA, "cublasDgemmStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(B), ": ").as_bytes())?;
    crate::CudaDisplay::write(&B, "cublasDgemmStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cublasDgemmStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(strideB), ": ").as_bytes())?;
    crate::CudaDisplay::write(&strideB, "cublasDgemmStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasDgemmStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(C), ": ").as_bytes())?;
    crate::CudaDisplay::write(&C, "cublasDgemmStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cublasDgemmStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(strideC), ": ").as_bytes())?;
    crate::CudaDisplay::write(&strideC, "cublasDgemmStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(batchCount), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &batchCount,
        "cublasDgemmStridedBatched",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cublasDgemmStridedBatched_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    transa: cuda_types::cublas::cublasOperation_t,
    transb: cuda_types::cublas::cublasOperation_t,
    m: i64,
    n: i64,
    k: i64,
    alpha: *const f64,
    A: *const f64,
    lda: i64,
    strideA: ::core::ffi::c_longlong,
    B: *const f64,
    ldb: i64,
    strideB: ::core::ffi::c_longlong,
    beta: *const f64,
    C: *mut f64,
    ldc: i64,
    strideC: ::core::ffi::c_longlong,
    batchCount: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasDgemmStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transa), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transa, "cublasDgemmStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transb, "cublasDgemmStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasDgemmStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasDgemmStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(k), ": ").as_bytes())?;
    crate::CudaDisplay::write(&k, "cublasDgemmStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasDgemmStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasDgemmStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasDgemmStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(strideA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &strideA,
        "cublasDgemmStridedBatched_64",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(B), ": ").as_bytes())?;
    crate::CudaDisplay::write(&B, "cublasDgemmStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cublasDgemmStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(strideB), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &strideB,
        "cublasDgemmStridedBatched_64",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasDgemmStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(C), ": ").as_bytes())?;
    crate::CudaDisplay::write(&C, "cublasDgemmStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cublasDgemmStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(strideC), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &strideC,
        "cublasDgemmStridedBatched_64",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(batchCount), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &batchCount,
        "cublasDgemmStridedBatched_64",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cublasCgemmStridedBatched(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    transa: cuda_types::cublas::cublasOperation_t,
    transb: cuda_types::cublas::cublasOperation_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    k: ::core::ffi::c_int,
    alpha: *const cuda_types::cublas::cuComplex,
    A: *const cuda_types::cublas::cuComplex,
    lda: ::core::ffi::c_int,
    strideA: ::core::ffi::c_longlong,
    B: *const cuda_types::cublas::cuComplex,
    ldb: ::core::ffi::c_int,
    strideB: ::core::ffi::c_longlong,
    beta: *const cuda_types::cublas::cuComplex,
    C: *mut cuda_types::cublas::cuComplex,
    ldc: ::core::ffi::c_int,
    strideC: ::core::ffi::c_longlong,
    batchCount: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasCgemmStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transa), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transa, "cublasCgemmStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transb, "cublasCgemmStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasCgemmStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasCgemmStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(k), ": ").as_bytes())?;
    crate::CudaDisplay::write(&k, "cublasCgemmStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasCgemmStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasCgemmStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasCgemmStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(strideA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&strideA, "cublasCgemmStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(B), ": ").as_bytes())?;
    crate::CudaDisplay::write(&B, "cublasCgemmStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cublasCgemmStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(strideB), ": ").as_bytes())?;
    crate::CudaDisplay::write(&strideB, "cublasCgemmStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasCgemmStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(C), ": ").as_bytes())?;
    crate::CudaDisplay::write(&C, "cublasCgemmStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cublasCgemmStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(strideC), ": ").as_bytes())?;
    crate::CudaDisplay::write(&strideC, "cublasCgemmStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(batchCount), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &batchCount,
        "cublasCgemmStridedBatched",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cublasCgemmStridedBatched_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    transa: cuda_types::cublas::cublasOperation_t,
    transb: cuda_types::cublas::cublasOperation_t,
    m: i64,
    n: i64,
    k: i64,
    alpha: *const cuda_types::cublas::cuComplex,
    A: *const cuda_types::cublas::cuComplex,
    lda: i64,
    strideA: ::core::ffi::c_longlong,
    B: *const cuda_types::cublas::cuComplex,
    ldb: i64,
    strideB: ::core::ffi::c_longlong,
    beta: *const cuda_types::cublas::cuComplex,
    C: *mut cuda_types::cublas::cuComplex,
    ldc: i64,
    strideC: ::core::ffi::c_longlong,
    batchCount: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasCgemmStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transa), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transa, "cublasCgemmStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transb, "cublasCgemmStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasCgemmStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasCgemmStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(k), ": ").as_bytes())?;
    crate::CudaDisplay::write(&k, "cublasCgemmStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasCgemmStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasCgemmStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasCgemmStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(strideA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &strideA,
        "cublasCgemmStridedBatched_64",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(B), ": ").as_bytes())?;
    crate::CudaDisplay::write(&B, "cublasCgemmStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cublasCgemmStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(strideB), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &strideB,
        "cublasCgemmStridedBatched_64",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasCgemmStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(C), ": ").as_bytes())?;
    crate::CudaDisplay::write(&C, "cublasCgemmStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cublasCgemmStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(strideC), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &strideC,
        "cublasCgemmStridedBatched_64",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(batchCount), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &batchCount,
        "cublasCgemmStridedBatched_64",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cublasCgemm3mStridedBatched(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    transa: cuda_types::cublas::cublasOperation_t,
    transb: cuda_types::cublas::cublasOperation_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    k: ::core::ffi::c_int,
    alpha: *const cuda_types::cublas::cuComplex,
    A: *const cuda_types::cublas::cuComplex,
    lda: ::core::ffi::c_int,
    strideA: ::core::ffi::c_longlong,
    B: *const cuda_types::cublas::cuComplex,
    ldb: ::core::ffi::c_int,
    strideB: ::core::ffi::c_longlong,
    beta: *const cuda_types::cublas::cuComplex,
    C: *mut cuda_types::cublas::cuComplex,
    ldc: ::core::ffi::c_int,
    strideC: ::core::ffi::c_longlong,
    batchCount: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasCgemm3mStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transa), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transa, "cublasCgemm3mStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transb, "cublasCgemm3mStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasCgemm3mStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasCgemm3mStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(k), ": ").as_bytes())?;
    crate::CudaDisplay::write(&k, "cublasCgemm3mStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasCgemm3mStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasCgemm3mStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasCgemm3mStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(strideA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&strideA, "cublasCgemm3mStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(B), ": ").as_bytes())?;
    crate::CudaDisplay::write(&B, "cublasCgemm3mStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cublasCgemm3mStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(strideB), ": ").as_bytes())?;
    crate::CudaDisplay::write(&strideB, "cublasCgemm3mStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasCgemm3mStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(C), ": ").as_bytes())?;
    crate::CudaDisplay::write(&C, "cublasCgemm3mStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cublasCgemm3mStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(strideC), ": ").as_bytes())?;
    crate::CudaDisplay::write(&strideC, "cublasCgemm3mStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(batchCount), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &batchCount,
        "cublasCgemm3mStridedBatched",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cublasCgemm3mStridedBatched_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    transa: cuda_types::cublas::cublasOperation_t,
    transb: cuda_types::cublas::cublasOperation_t,
    m: i64,
    n: i64,
    k: i64,
    alpha: *const cuda_types::cublas::cuComplex,
    A: *const cuda_types::cublas::cuComplex,
    lda: i64,
    strideA: ::core::ffi::c_longlong,
    B: *const cuda_types::cublas::cuComplex,
    ldb: i64,
    strideB: ::core::ffi::c_longlong,
    beta: *const cuda_types::cublas::cuComplex,
    C: *mut cuda_types::cublas::cuComplex,
    ldc: i64,
    strideC: ::core::ffi::c_longlong,
    batchCount: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &handle,
        "cublasCgemm3mStridedBatched_64",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transa), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &transa,
        "cublasCgemm3mStridedBatched_64",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transb), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &transb,
        "cublasCgemm3mStridedBatched_64",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasCgemm3mStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasCgemm3mStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(k), ": ").as_bytes())?;
    crate::CudaDisplay::write(&k, "cublasCgemm3mStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &alpha,
        "cublasCgemm3mStridedBatched_64",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasCgemm3mStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasCgemm3mStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(strideA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &strideA,
        "cublasCgemm3mStridedBatched_64",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(B), ": ").as_bytes())?;
    crate::CudaDisplay::write(&B, "cublasCgemm3mStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cublasCgemm3mStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(strideB), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &strideB,
        "cublasCgemm3mStridedBatched_64",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasCgemm3mStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(C), ": ").as_bytes())?;
    crate::CudaDisplay::write(&C, "cublasCgemm3mStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cublasCgemm3mStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(strideC), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &strideC,
        "cublasCgemm3mStridedBatched_64",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(batchCount), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &batchCount,
        "cublasCgemm3mStridedBatched_64",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cublasZgemmStridedBatched(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    transa: cuda_types::cublas::cublasOperation_t,
    transb: cuda_types::cublas::cublasOperation_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    k: ::core::ffi::c_int,
    alpha: *const cuda_types::cublas::cuDoubleComplex,
    A: *const cuda_types::cublas::cuDoubleComplex,
    lda: ::core::ffi::c_int,
    strideA: ::core::ffi::c_longlong,
    B: *const cuda_types::cublas::cuDoubleComplex,
    ldb: ::core::ffi::c_int,
    strideB: ::core::ffi::c_longlong,
    beta: *const cuda_types::cublas::cuDoubleComplex,
    C: *mut cuda_types::cublas::cuDoubleComplex,
    ldc: ::core::ffi::c_int,
    strideC: ::core::ffi::c_longlong,
    batchCount: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasZgemmStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transa), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transa, "cublasZgemmStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transb, "cublasZgemmStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasZgemmStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasZgemmStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(k), ": ").as_bytes())?;
    crate::CudaDisplay::write(&k, "cublasZgemmStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasZgemmStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasZgemmStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasZgemmStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(strideA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&strideA, "cublasZgemmStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(B), ": ").as_bytes())?;
    crate::CudaDisplay::write(&B, "cublasZgemmStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cublasZgemmStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(strideB), ": ").as_bytes())?;
    crate::CudaDisplay::write(&strideB, "cublasZgemmStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasZgemmStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(C), ": ").as_bytes())?;
    crate::CudaDisplay::write(&C, "cublasZgemmStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cublasZgemmStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(strideC), ": ").as_bytes())?;
    crate::CudaDisplay::write(&strideC, "cublasZgemmStridedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(batchCount), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &batchCount,
        "cublasZgemmStridedBatched",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cublasZgemmStridedBatched_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    transa: cuda_types::cublas::cublasOperation_t,
    transb: cuda_types::cublas::cublasOperation_t,
    m: i64,
    n: i64,
    k: i64,
    alpha: *const cuda_types::cublas::cuDoubleComplex,
    A: *const cuda_types::cublas::cuDoubleComplex,
    lda: i64,
    strideA: ::core::ffi::c_longlong,
    B: *const cuda_types::cublas::cuDoubleComplex,
    ldb: i64,
    strideB: ::core::ffi::c_longlong,
    beta: *const cuda_types::cublas::cuDoubleComplex,
    C: *mut cuda_types::cublas::cuDoubleComplex,
    ldc: i64,
    strideC: ::core::ffi::c_longlong,
    batchCount: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasZgemmStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transa), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transa, "cublasZgemmStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transb, "cublasZgemmStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasZgemmStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasZgemmStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(k), ": ").as_bytes())?;
    crate::CudaDisplay::write(&k, "cublasZgemmStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasZgemmStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasZgemmStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasZgemmStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(strideA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &strideA,
        "cublasZgemmStridedBatched_64",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(B), ": ").as_bytes())?;
    crate::CudaDisplay::write(&B, "cublasZgemmStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cublasZgemmStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(strideB), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &strideB,
        "cublasZgemmStridedBatched_64",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasZgemmStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(C), ": ").as_bytes())?;
    crate::CudaDisplay::write(&C, "cublasZgemmStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cublasZgemmStridedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(strideC), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &strideC,
        "cublasZgemmStridedBatched_64",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(batchCount), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &batchCount,
        "cublasZgemmStridedBatched_64",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cublasGemmBatchedEx(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    transa: cuda_types::cublas::cublasOperation_t,
    transb: cuda_types::cublas::cublasOperation_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    k: ::core::ffi::c_int,
    alpha: *const ::core::ffi::c_void,
    Aarray: *const *const ::core::ffi::c_void,
    Atype: cuda_types::cublas::cudaDataType,
    lda: ::core::ffi::c_int,
    Barray: *const *const ::core::ffi::c_void,
    Btype: cuda_types::cublas::cudaDataType,
    ldb: ::core::ffi::c_int,
    beta: *const ::core::ffi::c_void,
    Carray: *const *mut ::core::ffi::c_void,
    Ctype: cuda_types::cublas::cudaDataType,
    ldc: ::core::ffi::c_int,
    batchCount: ::core::ffi::c_int,
    computeType: cuda_types::cublas::cublasComputeType_t,
    algo: cuda_types::cublas::cublasGemmAlgo_t,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasGemmBatchedEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transa), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transa, "cublasGemmBatchedEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transb, "cublasGemmBatchedEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasGemmBatchedEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasGemmBatchedEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(k), ": ").as_bytes())?;
    crate::CudaDisplay::write(&k, "cublasGemmBatchedEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasGemmBatchedEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Aarray), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Aarray, "cublasGemmBatchedEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Atype), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Atype, "cublasGemmBatchedEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasGemmBatchedEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Barray), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Barray, "cublasGemmBatchedEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Btype), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Btype, "cublasGemmBatchedEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cublasGemmBatchedEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasGemmBatchedEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Carray), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Carray, "cublasGemmBatchedEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Ctype), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Ctype, "cublasGemmBatchedEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cublasGemmBatchedEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(batchCount), ": ").as_bytes())?;
    crate::CudaDisplay::write(&batchCount, "cublasGemmBatchedEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(computeType), ": ").as_bytes())?;
    crate::CudaDisplay::write(&computeType, "cublasGemmBatchedEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(algo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&algo, "cublasGemmBatchedEx", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasGemmBatchedEx_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    transa: cuda_types::cublas::cublasOperation_t,
    transb: cuda_types::cublas::cublasOperation_t,
    m: i64,
    n: i64,
    k: i64,
    alpha: *const ::core::ffi::c_void,
    Aarray: *const *const ::core::ffi::c_void,
    Atype: cuda_types::cublas::cudaDataType,
    lda: i64,
    Barray: *const *const ::core::ffi::c_void,
    Btype: cuda_types::cublas::cudaDataType,
    ldb: i64,
    beta: *const ::core::ffi::c_void,
    Carray: *const *mut ::core::ffi::c_void,
    Ctype: cuda_types::cublas::cudaDataType,
    ldc: i64,
    batchCount: i64,
    computeType: cuda_types::cublas::cublasComputeType_t,
    algo: cuda_types::cublas::cublasGemmAlgo_t,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasGemmBatchedEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transa), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transa, "cublasGemmBatchedEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transb, "cublasGemmBatchedEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasGemmBatchedEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasGemmBatchedEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(k), ": ").as_bytes())?;
    crate::CudaDisplay::write(&k, "cublasGemmBatchedEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasGemmBatchedEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Aarray), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Aarray, "cublasGemmBatchedEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Atype), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Atype, "cublasGemmBatchedEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasGemmBatchedEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Barray), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Barray, "cublasGemmBatchedEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Btype), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Btype, "cublasGemmBatchedEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cublasGemmBatchedEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasGemmBatchedEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Carray), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Carray, "cublasGemmBatchedEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Ctype), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Ctype, "cublasGemmBatchedEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cublasGemmBatchedEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(batchCount), ": ").as_bytes())?;
    crate::CudaDisplay::write(&batchCount, "cublasGemmBatchedEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(computeType), ": ").as_bytes())?;
    crate::CudaDisplay::write(&computeType, "cublasGemmBatchedEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(algo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&algo, "cublasGemmBatchedEx_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasGemmStridedBatchedEx(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    transa: cuda_types::cublas::cublasOperation_t,
    transb: cuda_types::cublas::cublasOperation_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    k: ::core::ffi::c_int,
    alpha: *const ::core::ffi::c_void,
    A: *const ::core::ffi::c_void,
    Atype: cuda_types::cublas::cudaDataType,
    lda: ::core::ffi::c_int,
    strideA: ::core::ffi::c_longlong,
    B: *const ::core::ffi::c_void,
    Btype: cuda_types::cublas::cudaDataType,
    ldb: ::core::ffi::c_int,
    strideB: ::core::ffi::c_longlong,
    beta: *const ::core::ffi::c_void,
    C: *mut ::core::ffi::c_void,
    Ctype: cuda_types::cublas::cudaDataType,
    ldc: ::core::ffi::c_int,
    strideC: ::core::ffi::c_longlong,
    batchCount: ::core::ffi::c_int,
    computeType: cuda_types::cublas::cublasComputeType_t,
    algo: cuda_types::cublas::cublasGemmAlgo_t,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasGemmStridedBatchedEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transa), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transa, "cublasGemmStridedBatchedEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transb, "cublasGemmStridedBatchedEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasGemmStridedBatchedEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasGemmStridedBatchedEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(k), ": ").as_bytes())?;
    crate::CudaDisplay::write(&k, "cublasGemmStridedBatchedEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasGemmStridedBatchedEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasGemmStridedBatchedEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Atype), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Atype, "cublasGemmStridedBatchedEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasGemmStridedBatchedEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(strideA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&strideA, "cublasGemmStridedBatchedEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(B), ": ").as_bytes())?;
    crate::CudaDisplay::write(&B, "cublasGemmStridedBatchedEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Btype), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Btype, "cublasGemmStridedBatchedEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cublasGemmStridedBatchedEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(strideB), ": ").as_bytes())?;
    crate::CudaDisplay::write(&strideB, "cublasGemmStridedBatchedEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasGemmStridedBatchedEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(C), ": ").as_bytes())?;
    crate::CudaDisplay::write(&C, "cublasGemmStridedBatchedEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Ctype), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Ctype, "cublasGemmStridedBatchedEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cublasGemmStridedBatchedEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(strideC), ": ").as_bytes())?;
    crate::CudaDisplay::write(&strideC, "cublasGemmStridedBatchedEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(batchCount), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &batchCount,
        "cublasGemmStridedBatchedEx",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(computeType), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &computeType,
        "cublasGemmStridedBatchedEx",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(algo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&algo, "cublasGemmStridedBatchedEx", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasGemmStridedBatchedEx_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    transa: cuda_types::cublas::cublasOperation_t,
    transb: cuda_types::cublas::cublasOperation_t,
    m: i64,
    n: i64,
    k: i64,
    alpha: *const ::core::ffi::c_void,
    A: *const ::core::ffi::c_void,
    Atype: cuda_types::cublas::cudaDataType,
    lda: i64,
    strideA: ::core::ffi::c_longlong,
    B: *const ::core::ffi::c_void,
    Btype: cuda_types::cublas::cudaDataType,
    ldb: i64,
    strideB: ::core::ffi::c_longlong,
    beta: *const ::core::ffi::c_void,
    C: *mut ::core::ffi::c_void,
    Ctype: cuda_types::cublas::cudaDataType,
    ldc: i64,
    strideC: ::core::ffi::c_longlong,
    batchCount: i64,
    computeType: cuda_types::cublas::cublasComputeType_t,
    algo: cuda_types::cublas::cublasGemmAlgo_t,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &handle,
        "cublasGemmStridedBatchedEx_64",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transa), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &transa,
        "cublasGemmStridedBatchedEx_64",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transb), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &transb,
        "cublasGemmStridedBatchedEx_64",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasGemmStridedBatchedEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasGemmStridedBatchedEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(k), ": ").as_bytes())?;
    crate::CudaDisplay::write(&k, "cublasGemmStridedBatchedEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasGemmStridedBatchedEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasGemmStridedBatchedEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Atype), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Atype, "cublasGemmStridedBatchedEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasGemmStridedBatchedEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(strideA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &strideA,
        "cublasGemmStridedBatchedEx_64",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(B), ": ").as_bytes())?;
    crate::CudaDisplay::write(&B, "cublasGemmStridedBatchedEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Btype), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Btype, "cublasGemmStridedBatchedEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cublasGemmStridedBatchedEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(strideB), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &strideB,
        "cublasGemmStridedBatchedEx_64",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasGemmStridedBatchedEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(C), ": ").as_bytes())?;
    crate::CudaDisplay::write(&C, "cublasGemmStridedBatchedEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Ctype), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Ctype, "cublasGemmStridedBatchedEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cublasGemmStridedBatchedEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(strideC), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &strideC,
        "cublasGemmStridedBatchedEx_64",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(batchCount), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &batchCount,
        "cublasGemmStridedBatchedEx_64",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(computeType), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &computeType,
        "cublasGemmStridedBatchedEx_64",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(algo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&algo, "cublasGemmStridedBatchedEx_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasSgemmGroupedBatched(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    transa_array: *const cuda_types::cublas::cublasOperation_t,
    transb_array: *const cuda_types::cublas::cublasOperation_t,
    m_array: *const ::core::ffi::c_int,
    n_array: *const ::core::ffi::c_int,
    k_array: *const ::core::ffi::c_int,
    alpha_array: *const f32,
    Aarray: *const *const f32,
    lda_array: *const ::core::ffi::c_int,
    Barray: *const *const f32,
    ldb_array: *const ::core::ffi::c_int,
    beta_array: *const f32,
    Carray: *const *mut f32,
    ldc_array: *const ::core::ffi::c_int,
    group_count: ::core::ffi::c_int,
    group_size: *const ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasSgemmGroupedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transa_array), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &transa_array,
        "cublasSgemmGroupedBatched",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transb_array), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &transb_array,
        "cublasSgemmGroupedBatched",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m_array), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m_array, "cublasSgemmGroupedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n_array), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n_array, "cublasSgemmGroupedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(k_array), ": ").as_bytes())?;
    crate::CudaDisplay::write(&k_array, "cublasSgemmGroupedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha_array), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &alpha_array,
        "cublasSgemmGroupedBatched",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Aarray), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Aarray, "cublasSgemmGroupedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda_array), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda_array, "cublasSgemmGroupedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Barray), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Barray, "cublasSgemmGroupedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb_array), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb_array, "cublasSgemmGroupedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta_array), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &beta_array,
        "cublasSgemmGroupedBatched",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Carray), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Carray, "cublasSgemmGroupedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc_array), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc_array, "cublasSgemmGroupedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(group_count), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &group_count,
        "cublasSgemmGroupedBatched",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(group_size), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &group_size,
        "cublasSgemmGroupedBatched",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cublasSgemmGroupedBatched_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    transa_array: *const cuda_types::cublas::cublasOperation_t,
    transb_array: *const cuda_types::cublas::cublasOperation_t,
    m_array: *const i64,
    n_array: *const i64,
    k_array: *const i64,
    alpha_array: *const f32,
    Aarray: *const *const f32,
    lda_array: *const i64,
    Barray: *const *const f32,
    ldb_array: *const i64,
    beta_array: *const f32,
    Carray: *const *mut f32,
    ldc_array: *const i64,
    group_count: i64,
    group_size: *const i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasSgemmGroupedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transa_array), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &transa_array,
        "cublasSgemmGroupedBatched_64",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transb_array), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &transb_array,
        "cublasSgemmGroupedBatched_64",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m_array), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &m_array,
        "cublasSgemmGroupedBatched_64",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n_array), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &n_array,
        "cublasSgemmGroupedBatched_64",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(k_array), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &k_array,
        "cublasSgemmGroupedBatched_64",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha_array), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &alpha_array,
        "cublasSgemmGroupedBatched_64",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Aarray), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Aarray, "cublasSgemmGroupedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda_array), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &lda_array,
        "cublasSgemmGroupedBatched_64",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Barray), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Barray, "cublasSgemmGroupedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb_array), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &ldb_array,
        "cublasSgemmGroupedBatched_64",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta_array), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &beta_array,
        "cublasSgemmGroupedBatched_64",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Carray), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Carray, "cublasSgemmGroupedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc_array), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &ldc_array,
        "cublasSgemmGroupedBatched_64",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(group_count), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &group_count,
        "cublasSgemmGroupedBatched_64",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(group_size), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &group_size,
        "cublasSgemmGroupedBatched_64",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cublasDgemmGroupedBatched(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    transa_array: *const cuda_types::cublas::cublasOperation_t,
    transb_array: *const cuda_types::cublas::cublasOperation_t,
    m_array: *const ::core::ffi::c_int,
    n_array: *const ::core::ffi::c_int,
    k_array: *const ::core::ffi::c_int,
    alpha_array: *const f64,
    Aarray: *const *const f64,
    lda_array: *const ::core::ffi::c_int,
    Barray: *const *const f64,
    ldb_array: *const ::core::ffi::c_int,
    beta_array: *const f64,
    Carray: *const *mut f64,
    ldc_array: *const ::core::ffi::c_int,
    group_count: ::core::ffi::c_int,
    group_size: *const ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasDgemmGroupedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transa_array), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &transa_array,
        "cublasDgemmGroupedBatched",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transb_array), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &transb_array,
        "cublasDgemmGroupedBatched",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m_array), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m_array, "cublasDgemmGroupedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n_array), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n_array, "cublasDgemmGroupedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(k_array), ": ").as_bytes())?;
    crate::CudaDisplay::write(&k_array, "cublasDgemmGroupedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha_array), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &alpha_array,
        "cublasDgemmGroupedBatched",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Aarray), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Aarray, "cublasDgemmGroupedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda_array), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda_array, "cublasDgemmGroupedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Barray), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Barray, "cublasDgemmGroupedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb_array), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb_array, "cublasDgemmGroupedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta_array), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &beta_array,
        "cublasDgemmGroupedBatched",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Carray), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Carray, "cublasDgemmGroupedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc_array), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc_array, "cublasDgemmGroupedBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(group_count), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &group_count,
        "cublasDgemmGroupedBatched",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(group_size), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &group_size,
        "cublasDgemmGroupedBatched",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cublasDgemmGroupedBatched_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    transa_array: *const cuda_types::cublas::cublasOperation_t,
    transb_array: *const cuda_types::cublas::cublasOperation_t,
    m_array: *const i64,
    n_array: *const i64,
    k_array: *const i64,
    alpha_array: *const f64,
    Aarray: *const *const f64,
    lda_array: *const i64,
    Barray: *const *const f64,
    ldb_array: *const i64,
    beta_array: *const f64,
    Carray: *const *mut f64,
    ldc_array: *const i64,
    group_count: i64,
    group_size: *const i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasDgemmGroupedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transa_array), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &transa_array,
        "cublasDgemmGroupedBatched_64",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transb_array), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &transb_array,
        "cublasDgemmGroupedBatched_64",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m_array), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &m_array,
        "cublasDgemmGroupedBatched_64",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n_array), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &n_array,
        "cublasDgemmGroupedBatched_64",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(k_array), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &k_array,
        "cublasDgemmGroupedBatched_64",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha_array), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &alpha_array,
        "cublasDgemmGroupedBatched_64",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Aarray), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Aarray, "cublasDgemmGroupedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda_array), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &lda_array,
        "cublasDgemmGroupedBatched_64",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Barray), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Barray, "cublasDgemmGroupedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb_array), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &ldb_array,
        "cublasDgemmGroupedBatched_64",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta_array), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &beta_array,
        "cublasDgemmGroupedBatched_64",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Carray), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Carray, "cublasDgemmGroupedBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc_array), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &ldc_array,
        "cublasDgemmGroupedBatched_64",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(group_count), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &group_count,
        "cublasDgemmGroupedBatched_64",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(group_size), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &group_size,
        "cublasDgemmGroupedBatched_64",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cublasGemmGroupedBatchedEx(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    transa_array: *const cuda_types::cublas::cublasOperation_t,
    transb_array: *const cuda_types::cublas::cublasOperation_t,
    m_array: *const ::core::ffi::c_int,
    n_array: *const ::core::ffi::c_int,
    k_array: *const ::core::ffi::c_int,
    alpha_array: *const ::core::ffi::c_void,
    Aarray: *const *const ::core::ffi::c_void,
    Atype: cuda_types::cublas::cudaDataType_t,
    lda_array: *const ::core::ffi::c_int,
    Barray: *const *const ::core::ffi::c_void,
    Btype: cuda_types::cublas::cudaDataType_t,
    ldb_array: *const ::core::ffi::c_int,
    beta_array: *const ::core::ffi::c_void,
    Carray: *const *mut ::core::ffi::c_void,
    Ctype: cuda_types::cublas::cudaDataType_t,
    ldc_array: *const ::core::ffi::c_int,
    group_count: ::core::ffi::c_int,
    group_size: *const ::core::ffi::c_int,
    computeType: cuda_types::cublas::cublasComputeType_t,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasGemmGroupedBatchedEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transa_array), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &transa_array,
        "cublasGemmGroupedBatchedEx",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transb_array), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &transb_array,
        "cublasGemmGroupedBatchedEx",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m_array), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m_array, "cublasGemmGroupedBatchedEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n_array), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n_array, "cublasGemmGroupedBatchedEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(k_array), ": ").as_bytes())?;
    crate::CudaDisplay::write(&k_array, "cublasGemmGroupedBatchedEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha_array), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &alpha_array,
        "cublasGemmGroupedBatchedEx",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Aarray), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Aarray, "cublasGemmGroupedBatchedEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Atype), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Atype, "cublasGemmGroupedBatchedEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda_array), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &lda_array,
        "cublasGemmGroupedBatchedEx",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Barray), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Barray, "cublasGemmGroupedBatchedEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Btype), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Btype, "cublasGemmGroupedBatchedEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb_array), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &ldb_array,
        "cublasGemmGroupedBatchedEx",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta_array), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &beta_array,
        "cublasGemmGroupedBatchedEx",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Carray), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Carray, "cublasGemmGroupedBatchedEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Ctype), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Ctype, "cublasGemmGroupedBatchedEx", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc_array), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &ldc_array,
        "cublasGemmGroupedBatchedEx",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(group_count), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &group_count,
        "cublasGemmGroupedBatchedEx",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(group_size), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &group_size,
        "cublasGemmGroupedBatchedEx",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(computeType), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &computeType,
        "cublasGemmGroupedBatchedEx",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cublasGemmGroupedBatchedEx_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    transa_array: *const cuda_types::cublas::cublasOperation_t,
    transb_array: *const cuda_types::cublas::cublasOperation_t,
    m_array: *const i64,
    n_array: *const i64,
    k_array: *const i64,
    alpha_array: *const ::core::ffi::c_void,
    Aarray: *const *const ::core::ffi::c_void,
    Atype: cuda_types::cublas::cudaDataType_t,
    lda_array: *const i64,
    Barray: *const *const ::core::ffi::c_void,
    Btype: cuda_types::cublas::cudaDataType_t,
    ldb_array: *const i64,
    beta_array: *const ::core::ffi::c_void,
    Carray: *const *mut ::core::ffi::c_void,
    Ctype: cuda_types::cublas::cudaDataType_t,
    ldc_array: *const i64,
    group_count: i64,
    group_size: *const i64,
    computeType: cuda_types::cublas::cublasComputeType_t,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &handle,
        "cublasGemmGroupedBatchedEx_64",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transa_array), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &transa_array,
        "cublasGemmGroupedBatchedEx_64",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transb_array), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &transb_array,
        "cublasGemmGroupedBatchedEx_64",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m_array), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &m_array,
        "cublasGemmGroupedBatchedEx_64",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n_array), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &n_array,
        "cublasGemmGroupedBatchedEx_64",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(k_array), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &k_array,
        "cublasGemmGroupedBatchedEx_64",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha_array), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &alpha_array,
        "cublasGemmGroupedBatchedEx_64",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Aarray), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &Aarray,
        "cublasGemmGroupedBatchedEx_64",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Atype), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Atype, "cublasGemmGroupedBatchedEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda_array), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &lda_array,
        "cublasGemmGroupedBatchedEx_64",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Barray), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &Barray,
        "cublasGemmGroupedBatchedEx_64",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Btype), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Btype, "cublasGemmGroupedBatchedEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb_array), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &ldb_array,
        "cublasGemmGroupedBatchedEx_64",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta_array), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &beta_array,
        "cublasGemmGroupedBatchedEx_64",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Carray), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &Carray,
        "cublasGemmGroupedBatchedEx_64",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Ctype), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Ctype, "cublasGemmGroupedBatchedEx_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc_array), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &ldc_array,
        "cublasGemmGroupedBatchedEx_64",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(group_count), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &group_count,
        "cublasGemmGroupedBatchedEx_64",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(group_size), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &group_size,
        "cublasGemmGroupedBatchedEx_64",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(computeType), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &computeType,
        "cublasGemmGroupedBatchedEx_64",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cublasSgeam(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    transa: cuda_types::cublas::cublasOperation_t,
    transb: cuda_types::cublas::cublasOperation_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    alpha: *const f32,
    A: *const f32,
    lda: ::core::ffi::c_int,
    beta: *const f32,
    B: *const f32,
    ldb: ::core::ffi::c_int,
    C: *mut f32,
    ldc: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasSgeam", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transa), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transa, "cublasSgeam", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transb, "cublasSgeam", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasSgeam", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasSgeam", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasSgeam", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasSgeam", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasSgeam", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasSgeam", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(B), ": ").as_bytes())?;
    crate::CudaDisplay::write(&B, "cublasSgeam", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cublasSgeam", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(C), ": ").as_bytes())?;
    crate::CudaDisplay::write(&C, "cublasSgeam", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cublasSgeam", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasSgeam_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    transa: cuda_types::cublas::cublasOperation_t,
    transb: cuda_types::cublas::cublasOperation_t,
    m: i64,
    n: i64,
    alpha: *const f32,
    A: *const f32,
    lda: i64,
    beta: *const f32,
    B: *const f32,
    ldb: i64,
    C: *mut f32,
    ldc: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasSgeam_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transa), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transa, "cublasSgeam_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transb, "cublasSgeam_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasSgeam_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasSgeam_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasSgeam_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasSgeam_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasSgeam_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasSgeam_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(B), ": ").as_bytes())?;
    crate::CudaDisplay::write(&B, "cublasSgeam_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cublasSgeam_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(C), ": ").as_bytes())?;
    crate::CudaDisplay::write(&C, "cublasSgeam_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cublasSgeam_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasDgeam(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    transa: cuda_types::cublas::cublasOperation_t,
    transb: cuda_types::cublas::cublasOperation_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    alpha: *const f64,
    A: *const f64,
    lda: ::core::ffi::c_int,
    beta: *const f64,
    B: *const f64,
    ldb: ::core::ffi::c_int,
    C: *mut f64,
    ldc: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasDgeam", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transa), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transa, "cublasDgeam", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transb, "cublasDgeam", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasDgeam", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasDgeam", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasDgeam", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasDgeam", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasDgeam", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasDgeam", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(B), ": ").as_bytes())?;
    crate::CudaDisplay::write(&B, "cublasDgeam", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cublasDgeam", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(C), ": ").as_bytes())?;
    crate::CudaDisplay::write(&C, "cublasDgeam", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cublasDgeam", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasDgeam_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    transa: cuda_types::cublas::cublasOperation_t,
    transb: cuda_types::cublas::cublasOperation_t,
    m: i64,
    n: i64,
    alpha: *const f64,
    A: *const f64,
    lda: i64,
    beta: *const f64,
    B: *const f64,
    ldb: i64,
    C: *mut f64,
    ldc: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasDgeam_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transa), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transa, "cublasDgeam_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transb, "cublasDgeam_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasDgeam_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasDgeam_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasDgeam_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasDgeam_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasDgeam_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasDgeam_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(B), ": ").as_bytes())?;
    crate::CudaDisplay::write(&B, "cublasDgeam_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cublasDgeam_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(C), ": ").as_bytes())?;
    crate::CudaDisplay::write(&C, "cublasDgeam_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cublasDgeam_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasCgeam(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    transa: cuda_types::cublas::cublasOperation_t,
    transb: cuda_types::cublas::cublasOperation_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    alpha: *const cuda_types::cublas::cuComplex,
    A: *const cuda_types::cublas::cuComplex,
    lda: ::core::ffi::c_int,
    beta: *const cuda_types::cublas::cuComplex,
    B: *const cuda_types::cublas::cuComplex,
    ldb: ::core::ffi::c_int,
    C: *mut cuda_types::cublas::cuComplex,
    ldc: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasCgeam", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transa), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transa, "cublasCgeam", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transb, "cublasCgeam", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasCgeam", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasCgeam", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasCgeam", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasCgeam", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasCgeam", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasCgeam", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(B), ": ").as_bytes())?;
    crate::CudaDisplay::write(&B, "cublasCgeam", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cublasCgeam", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(C), ": ").as_bytes())?;
    crate::CudaDisplay::write(&C, "cublasCgeam", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cublasCgeam", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasCgeam_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    transa: cuda_types::cublas::cublasOperation_t,
    transb: cuda_types::cublas::cublasOperation_t,
    m: i64,
    n: i64,
    alpha: *const cuda_types::cublas::cuComplex,
    A: *const cuda_types::cublas::cuComplex,
    lda: i64,
    beta: *const cuda_types::cublas::cuComplex,
    B: *const cuda_types::cublas::cuComplex,
    ldb: i64,
    C: *mut cuda_types::cublas::cuComplex,
    ldc: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasCgeam_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transa), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transa, "cublasCgeam_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transb, "cublasCgeam_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasCgeam_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasCgeam_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasCgeam_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasCgeam_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasCgeam_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasCgeam_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(B), ": ").as_bytes())?;
    crate::CudaDisplay::write(&B, "cublasCgeam_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cublasCgeam_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(C), ": ").as_bytes())?;
    crate::CudaDisplay::write(&C, "cublasCgeam_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cublasCgeam_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasZgeam(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    transa: cuda_types::cublas::cublasOperation_t,
    transb: cuda_types::cublas::cublasOperation_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    alpha: *const cuda_types::cublas::cuDoubleComplex,
    A: *const cuda_types::cublas::cuDoubleComplex,
    lda: ::core::ffi::c_int,
    beta: *const cuda_types::cublas::cuDoubleComplex,
    B: *const cuda_types::cublas::cuDoubleComplex,
    ldb: ::core::ffi::c_int,
    C: *mut cuda_types::cublas::cuDoubleComplex,
    ldc: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasZgeam", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transa), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transa, "cublasZgeam", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transb, "cublasZgeam", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasZgeam", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasZgeam", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasZgeam", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasZgeam", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasZgeam", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasZgeam", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(B), ": ").as_bytes())?;
    crate::CudaDisplay::write(&B, "cublasZgeam", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cublasZgeam", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(C), ": ").as_bytes())?;
    crate::CudaDisplay::write(&C, "cublasZgeam", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cublasZgeam", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasZgeam_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    transa: cuda_types::cublas::cublasOperation_t,
    transb: cuda_types::cublas::cublasOperation_t,
    m: i64,
    n: i64,
    alpha: *const cuda_types::cublas::cuDoubleComplex,
    A: *const cuda_types::cublas::cuDoubleComplex,
    lda: i64,
    beta: *const cuda_types::cublas::cuDoubleComplex,
    B: *const cuda_types::cublas::cuDoubleComplex,
    ldb: i64,
    C: *mut cuda_types::cublas::cuDoubleComplex,
    ldc: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasZgeam_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transa), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transa, "cublasZgeam_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transb, "cublasZgeam_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasZgeam_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasZgeam_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasZgeam_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasZgeam_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasZgeam_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cublasZgeam_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(B), ": ").as_bytes())?;
    crate::CudaDisplay::write(&B, "cublasZgeam_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cublasZgeam_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(C), ": ").as_bytes())?;
    crate::CudaDisplay::write(&C, "cublasZgeam_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cublasZgeam_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasStrsmBatched(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    side: cuda_types::cublas::cublasSideMode_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    trans: cuda_types::cublas::cublasOperation_t,
    diag: cuda_types::cublas::cublasDiagType_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    alpha: *const f32,
    A: *const *const f32,
    lda: ::core::ffi::c_int,
    B: *const *mut f32,
    ldb: ::core::ffi::c_int,
    batchCount: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasStrsmBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(side), ": ").as_bytes())?;
    crate::CudaDisplay::write(&side, "cublasStrsmBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasStrsmBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasStrsmBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(diag), ": ").as_bytes())?;
    crate::CudaDisplay::write(&diag, "cublasStrsmBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasStrsmBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasStrsmBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasStrsmBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasStrsmBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasStrsmBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(B), ": ").as_bytes())?;
    crate::CudaDisplay::write(&B, "cublasStrsmBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cublasStrsmBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(batchCount), ": ").as_bytes())?;
    crate::CudaDisplay::write(&batchCount, "cublasStrsmBatched", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasStrsmBatched_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    side: cuda_types::cublas::cublasSideMode_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    trans: cuda_types::cublas::cublasOperation_t,
    diag: cuda_types::cublas::cublasDiagType_t,
    m: i64,
    n: i64,
    alpha: *const f32,
    A: *const *const f32,
    lda: i64,
    B: *const *mut f32,
    ldb: i64,
    batchCount: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasStrsmBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(side), ": ").as_bytes())?;
    crate::CudaDisplay::write(&side, "cublasStrsmBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasStrsmBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasStrsmBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(diag), ": ").as_bytes())?;
    crate::CudaDisplay::write(&diag, "cublasStrsmBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasStrsmBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasStrsmBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasStrsmBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasStrsmBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasStrsmBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(B), ": ").as_bytes())?;
    crate::CudaDisplay::write(&B, "cublasStrsmBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cublasStrsmBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(batchCount), ": ").as_bytes())?;
    crate::CudaDisplay::write(&batchCount, "cublasStrsmBatched_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasDtrsmBatched(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    side: cuda_types::cublas::cublasSideMode_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    trans: cuda_types::cublas::cublasOperation_t,
    diag: cuda_types::cublas::cublasDiagType_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    alpha: *const f64,
    A: *const *const f64,
    lda: ::core::ffi::c_int,
    B: *const *mut f64,
    ldb: ::core::ffi::c_int,
    batchCount: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasDtrsmBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(side), ": ").as_bytes())?;
    crate::CudaDisplay::write(&side, "cublasDtrsmBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasDtrsmBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasDtrsmBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(diag), ": ").as_bytes())?;
    crate::CudaDisplay::write(&diag, "cublasDtrsmBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasDtrsmBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasDtrsmBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasDtrsmBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasDtrsmBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasDtrsmBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(B), ": ").as_bytes())?;
    crate::CudaDisplay::write(&B, "cublasDtrsmBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cublasDtrsmBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(batchCount), ": ").as_bytes())?;
    crate::CudaDisplay::write(&batchCount, "cublasDtrsmBatched", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasDtrsmBatched_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    side: cuda_types::cublas::cublasSideMode_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    trans: cuda_types::cublas::cublasOperation_t,
    diag: cuda_types::cublas::cublasDiagType_t,
    m: i64,
    n: i64,
    alpha: *const f64,
    A: *const *const f64,
    lda: i64,
    B: *const *mut f64,
    ldb: i64,
    batchCount: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasDtrsmBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(side), ": ").as_bytes())?;
    crate::CudaDisplay::write(&side, "cublasDtrsmBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasDtrsmBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasDtrsmBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(diag), ": ").as_bytes())?;
    crate::CudaDisplay::write(&diag, "cublasDtrsmBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasDtrsmBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasDtrsmBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasDtrsmBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasDtrsmBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasDtrsmBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(B), ": ").as_bytes())?;
    crate::CudaDisplay::write(&B, "cublasDtrsmBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cublasDtrsmBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(batchCount), ": ").as_bytes())?;
    crate::CudaDisplay::write(&batchCount, "cublasDtrsmBatched_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasCtrsmBatched(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    side: cuda_types::cublas::cublasSideMode_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    trans: cuda_types::cublas::cublasOperation_t,
    diag: cuda_types::cublas::cublasDiagType_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    alpha: *const cuda_types::cublas::cuComplex,
    A: *const *const cuda_types::cublas::cuComplex,
    lda: ::core::ffi::c_int,
    B: *const *mut cuda_types::cublas::cuComplex,
    ldb: ::core::ffi::c_int,
    batchCount: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasCtrsmBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(side), ": ").as_bytes())?;
    crate::CudaDisplay::write(&side, "cublasCtrsmBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasCtrsmBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasCtrsmBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(diag), ": ").as_bytes())?;
    crate::CudaDisplay::write(&diag, "cublasCtrsmBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasCtrsmBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasCtrsmBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasCtrsmBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasCtrsmBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasCtrsmBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(B), ": ").as_bytes())?;
    crate::CudaDisplay::write(&B, "cublasCtrsmBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cublasCtrsmBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(batchCount), ": ").as_bytes())?;
    crate::CudaDisplay::write(&batchCount, "cublasCtrsmBatched", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasCtrsmBatched_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    side: cuda_types::cublas::cublasSideMode_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    trans: cuda_types::cublas::cublasOperation_t,
    diag: cuda_types::cublas::cublasDiagType_t,
    m: i64,
    n: i64,
    alpha: *const cuda_types::cublas::cuComplex,
    A: *const *const cuda_types::cublas::cuComplex,
    lda: i64,
    B: *const *mut cuda_types::cublas::cuComplex,
    ldb: i64,
    batchCount: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasCtrsmBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(side), ": ").as_bytes())?;
    crate::CudaDisplay::write(&side, "cublasCtrsmBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasCtrsmBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasCtrsmBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(diag), ": ").as_bytes())?;
    crate::CudaDisplay::write(&diag, "cublasCtrsmBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasCtrsmBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasCtrsmBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasCtrsmBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasCtrsmBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasCtrsmBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(B), ": ").as_bytes())?;
    crate::CudaDisplay::write(&B, "cublasCtrsmBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cublasCtrsmBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(batchCount), ": ").as_bytes())?;
    crate::CudaDisplay::write(&batchCount, "cublasCtrsmBatched_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasZtrsmBatched(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    side: cuda_types::cublas::cublasSideMode_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    trans: cuda_types::cublas::cublasOperation_t,
    diag: cuda_types::cublas::cublasDiagType_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    alpha: *const cuda_types::cublas::cuDoubleComplex,
    A: *const *const cuda_types::cublas::cuDoubleComplex,
    lda: ::core::ffi::c_int,
    B: *const *mut cuda_types::cublas::cuDoubleComplex,
    ldb: ::core::ffi::c_int,
    batchCount: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasZtrsmBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(side), ": ").as_bytes())?;
    crate::CudaDisplay::write(&side, "cublasZtrsmBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasZtrsmBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasZtrsmBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(diag), ": ").as_bytes())?;
    crate::CudaDisplay::write(&diag, "cublasZtrsmBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasZtrsmBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasZtrsmBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasZtrsmBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasZtrsmBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasZtrsmBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(B), ": ").as_bytes())?;
    crate::CudaDisplay::write(&B, "cublasZtrsmBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cublasZtrsmBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(batchCount), ": ").as_bytes())?;
    crate::CudaDisplay::write(&batchCount, "cublasZtrsmBatched", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasZtrsmBatched_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    side: cuda_types::cublas::cublasSideMode_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    trans: cuda_types::cublas::cublasOperation_t,
    diag: cuda_types::cublas::cublasDiagType_t,
    m: i64,
    n: i64,
    alpha: *const cuda_types::cublas::cuDoubleComplex,
    A: *const *const cuda_types::cublas::cuDoubleComplex,
    lda: i64,
    B: *const *mut cuda_types::cublas::cuDoubleComplex,
    ldb: i64,
    batchCount: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasZtrsmBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(side), ": ").as_bytes())?;
    crate::CudaDisplay::write(&side, "cublasZtrsmBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasZtrsmBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasZtrsmBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(diag), ": ").as_bytes())?;
    crate::CudaDisplay::write(&diag, "cublasZtrsmBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasZtrsmBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasZtrsmBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cublasZtrsmBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasZtrsmBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasZtrsmBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(B), ": ").as_bytes())?;
    crate::CudaDisplay::write(&B, "cublasZtrsmBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cublasZtrsmBatched_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(batchCount), ": ").as_bytes())?;
    crate::CudaDisplay::write(&batchCount, "cublasZtrsmBatched_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasSdgmm(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    mode: cuda_types::cublas::cublasSideMode_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    A: *const f32,
    lda: ::core::ffi::c_int,
    x: *const f32,
    incx: ::core::ffi::c_int,
    C: *mut f32,
    ldc: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasSdgmm", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(mode), ": ").as_bytes())?;
    crate::CudaDisplay::write(&mode, "cublasSdgmm", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasSdgmm", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasSdgmm", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasSdgmm", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasSdgmm", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasSdgmm", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasSdgmm", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(C), ": ").as_bytes())?;
    crate::CudaDisplay::write(&C, "cublasSdgmm", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cublasSdgmm", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasSdgmm_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    mode: cuda_types::cublas::cublasSideMode_t,
    m: i64,
    n: i64,
    A: *const f32,
    lda: i64,
    x: *const f32,
    incx: i64,
    C: *mut f32,
    ldc: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasSdgmm_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(mode), ": ").as_bytes())?;
    crate::CudaDisplay::write(&mode, "cublasSdgmm_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasSdgmm_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasSdgmm_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasSdgmm_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasSdgmm_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasSdgmm_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasSdgmm_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(C), ": ").as_bytes())?;
    crate::CudaDisplay::write(&C, "cublasSdgmm_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cublasSdgmm_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasDdgmm(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    mode: cuda_types::cublas::cublasSideMode_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    A: *const f64,
    lda: ::core::ffi::c_int,
    x: *const f64,
    incx: ::core::ffi::c_int,
    C: *mut f64,
    ldc: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasDdgmm", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(mode), ": ").as_bytes())?;
    crate::CudaDisplay::write(&mode, "cublasDdgmm", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasDdgmm", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasDdgmm", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasDdgmm", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasDdgmm", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasDdgmm", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasDdgmm", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(C), ": ").as_bytes())?;
    crate::CudaDisplay::write(&C, "cublasDdgmm", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cublasDdgmm", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasDdgmm_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    mode: cuda_types::cublas::cublasSideMode_t,
    m: i64,
    n: i64,
    A: *const f64,
    lda: i64,
    x: *const f64,
    incx: i64,
    C: *mut f64,
    ldc: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasDdgmm_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(mode), ": ").as_bytes())?;
    crate::CudaDisplay::write(&mode, "cublasDdgmm_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasDdgmm_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasDdgmm_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasDdgmm_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasDdgmm_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasDdgmm_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasDdgmm_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(C), ": ").as_bytes())?;
    crate::CudaDisplay::write(&C, "cublasDdgmm_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cublasDdgmm_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasCdgmm(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    mode: cuda_types::cublas::cublasSideMode_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    A: *const cuda_types::cublas::cuComplex,
    lda: ::core::ffi::c_int,
    x: *const cuda_types::cublas::cuComplex,
    incx: ::core::ffi::c_int,
    C: *mut cuda_types::cublas::cuComplex,
    ldc: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasCdgmm", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(mode), ": ").as_bytes())?;
    crate::CudaDisplay::write(&mode, "cublasCdgmm", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasCdgmm", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasCdgmm", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasCdgmm", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasCdgmm", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasCdgmm", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasCdgmm", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(C), ": ").as_bytes())?;
    crate::CudaDisplay::write(&C, "cublasCdgmm", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cublasCdgmm", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasCdgmm_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    mode: cuda_types::cublas::cublasSideMode_t,
    m: i64,
    n: i64,
    A: *const cuda_types::cublas::cuComplex,
    lda: i64,
    x: *const cuda_types::cublas::cuComplex,
    incx: i64,
    C: *mut cuda_types::cublas::cuComplex,
    ldc: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasCdgmm_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(mode), ": ").as_bytes())?;
    crate::CudaDisplay::write(&mode, "cublasCdgmm_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasCdgmm_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasCdgmm_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasCdgmm_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasCdgmm_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasCdgmm_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasCdgmm_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(C), ": ").as_bytes())?;
    crate::CudaDisplay::write(&C, "cublasCdgmm_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cublasCdgmm_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasZdgmm(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    mode: cuda_types::cublas::cublasSideMode_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    A: *const cuda_types::cublas::cuDoubleComplex,
    lda: ::core::ffi::c_int,
    x: *const cuda_types::cublas::cuDoubleComplex,
    incx: ::core::ffi::c_int,
    C: *mut cuda_types::cublas::cuDoubleComplex,
    ldc: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasZdgmm", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(mode), ": ").as_bytes())?;
    crate::CudaDisplay::write(&mode, "cublasZdgmm", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasZdgmm", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasZdgmm", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasZdgmm", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasZdgmm", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasZdgmm", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasZdgmm", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(C), ": ").as_bytes())?;
    crate::CudaDisplay::write(&C, "cublasZdgmm", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cublasZdgmm", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasZdgmm_64(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    mode: cuda_types::cublas::cublasSideMode_t,
    m: i64,
    n: i64,
    A: *const cuda_types::cublas::cuDoubleComplex,
    lda: i64,
    x: *const cuda_types::cublas::cuDoubleComplex,
    incx: i64,
    C: *mut cuda_types::cublas::cuDoubleComplex,
    ldc: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasZdgmm_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(mode), ": ").as_bytes())?;
    crate::CudaDisplay::write(&mode, "cublasZdgmm_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasZdgmm_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasZdgmm_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasZdgmm_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasZdgmm_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cublasZdgmm_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(incx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&incx, "cublasZdgmm_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(C), ": ").as_bytes())?;
    crate::CudaDisplay::write(&C, "cublasZdgmm_64", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cublasZdgmm_64", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasSmatinvBatched(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    n: ::core::ffi::c_int,
    A: *const *const f32,
    lda: ::core::ffi::c_int,
    Ainv: *const *mut f32,
    lda_inv: ::core::ffi::c_int,
    info: *mut ::core::ffi::c_int,
    batchSize: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasSmatinvBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasSmatinvBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasSmatinvBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasSmatinvBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Ainv), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Ainv, "cublasSmatinvBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda_inv), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda_inv, "cublasSmatinvBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cublasSmatinvBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(batchSize), ": ").as_bytes())?;
    crate::CudaDisplay::write(&batchSize, "cublasSmatinvBatched", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasDmatinvBatched(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    n: ::core::ffi::c_int,
    A: *const *const f64,
    lda: ::core::ffi::c_int,
    Ainv: *const *mut f64,
    lda_inv: ::core::ffi::c_int,
    info: *mut ::core::ffi::c_int,
    batchSize: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasDmatinvBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasDmatinvBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasDmatinvBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasDmatinvBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Ainv), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Ainv, "cublasDmatinvBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda_inv), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda_inv, "cublasDmatinvBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cublasDmatinvBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(batchSize), ": ").as_bytes())?;
    crate::CudaDisplay::write(&batchSize, "cublasDmatinvBatched", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasCmatinvBatched(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    n: ::core::ffi::c_int,
    A: *const *const cuda_types::cublas::cuComplex,
    lda: ::core::ffi::c_int,
    Ainv: *const *mut cuda_types::cublas::cuComplex,
    lda_inv: ::core::ffi::c_int,
    info: *mut ::core::ffi::c_int,
    batchSize: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasCmatinvBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasCmatinvBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasCmatinvBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasCmatinvBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Ainv), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Ainv, "cublasCmatinvBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda_inv), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda_inv, "cublasCmatinvBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cublasCmatinvBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(batchSize), ": ").as_bytes())?;
    crate::CudaDisplay::write(&batchSize, "cublasCmatinvBatched", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasZmatinvBatched(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    n: ::core::ffi::c_int,
    A: *const *const cuda_types::cublas::cuDoubleComplex,
    lda: ::core::ffi::c_int,
    Ainv: *const *mut cuda_types::cublas::cuDoubleComplex,
    lda_inv: ::core::ffi::c_int,
    info: *mut ::core::ffi::c_int,
    batchSize: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasZmatinvBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasZmatinvBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasZmatinvBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasZmatinvBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Ainv), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Ainv, "cublasZmatinvBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda_inv), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda_inv, "cublasZmatinvBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cublasZmatinvBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(batchSize), ": ").as_bytes())?;
    crate::CudaDisplay::write(&batchSize, "cublasZmatinvBatched", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasSgeqrfBatched(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    Aarray: *const *mut f32,
    lda: ::core::ffi::c_int,
    TauArray: *const *mut f32,
    info: *mut ::core::ffi::c_int,
    batchSize: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasSgeqrfBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasSgeqrfBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasSgeqrfBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Aarray), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Aarray, "cublasSgeqrfBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasSgeqrfBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(TauArray), ": ").as_bytes())?;
    crate::CudaDisplay::write(&TauArray, "cublasSgeqrfBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cublasSgeqrfBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(batchSize), ": ").as_bytes())?;
    crate::CudaDisplay::write(&batchSize, "cublasSgeqrfBatched", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasDgeqrfBatched(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    Aarray: *const *mut f64,
    lda: ::core::ffi::c_int,
    TauArray: *const *mut f64,
    info: *mut ::core::ffi::c_int,
    batchSize: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasDgeqrfBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasDgeqrfBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasDgeqrfBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Aarray), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Aarray, "cublasDgeqrfBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasDgeqrfBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(TauArray), ": ").as_bytes())?;
    crate::CudaDisplay::write(&TauArray, "cublasDgeqrfBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cublasDgeqrfBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(batchSize), ": ").as_bytes())?;
    crate::CudaDisplay::write(&batchSize, "cublasDgeqrfBatched", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasCgeqrfBatched(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    Aarray: *const *mut cuda_types::cublas::cuComplex,
    lda: ::core::ffi::c_int,
    TauArray: *const *mut cuda_types::cublas::cuComplex,
    info: *mut ::core::ffi::c_int,
    batchSize: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasCgeqrfBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasCgeqrfBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasCgeqrfBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Aarray), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Aarray, "cublasCgeqrfBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasCgeqrfBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(TauArray), ": ").as_bytes())?;
    crate::CudaDisplay::write(&TauArray, "cublasCgeqrfBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cublasCgeqrfBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(batchSize), ": ").as_bytes())?;
    crate::CudaDisplay::write(&batchSize, "cublasCgeqrfBatched", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasZgeqrfBatched(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    Aarray: *const *mut cuda_types::cublas::cuDoubleComplex,
    lda: ::core::ffi::c_int,
    TauArray: *const *mut cuda_types::cublas::cuDoubleComplex,
    info: *mut ::core::ffi::c_int,
    batchSize: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasZgeqrfBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasZgeqrfBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasZgeqrfBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Aarray), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Aarray, "cublasZgeqrfBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasZgeqrfBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(TauArray), ": ").as_bytes())?;
    crate::CudaDisplay::write(&TauArray, "cublasZgeqrfBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cublasZgeqrfBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(batchSize), ": ").as_bytes())?;
    crate::CudaDisplay::write(&batchSize, "cublasZgeqrfBatched", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasSgelsBatched(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    trans: cuda_types::cublas::cublasOperation_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    nrhs: ::core::ffi::c_int,
    Aarray: *const *mut f32,
    lda: ::core::ffi::c_int,
    Carray: *const *mut f32,
    ldc: ::core::ffi::c_int,
    info: *mut ::core::ffi::c_int,
    devInfoArray: *mut ::core::ffi::c_int,
    batchSize: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasSgelsBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasSgelsBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasSgelsBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasSgelsBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nrhs), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nrhs, "cublasSgelsBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Aarray), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Aarray, "cublasSgelsBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasSgelsBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Carray), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Carray, "cublasSgelsBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cublasSgelsBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cublasSgelsBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(devInfoArray), ": ").as_bytes())?;
    crate::CudaDisplay::write(&devInfoArray, "cublasSgelsBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(batchSize), ": ").as_bytes())?;
    crate::CudaDisplay::write(&batchSize, "cublasSgelsBatched", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasDgelsBatched(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    trans: cuda_types::cublas::cublasOperation_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    nrhs: ::core::ffi::c_int,
    Aarray: *const *mut f64,
    lda: ::core::ffi::c_int,
    Carray: *const *mut f64,
    ldc: ::core::ffi::c_int,
    info: *mut ::core::ffi::c_int,
    devInfoArray: *mut ::core::ffi::c_int,
    batchSize: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasDgelsBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasDgelsBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasDgelsBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasDgelsBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nrhs), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nrhs, "cublasDgelsBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Aarray), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Aarray, "cublasDgelsBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasDgelsBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Carray), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Carray, "cublasDgelsBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cublasDgelsBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cublasDgelsBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(devInfoArray), ": ").as_bytes())?;
    crate::CudaDisplay::write(&devInfoArray, "cublasDgelsBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(batchSize), ": ").as_bytes())?;
    crate::CudaDisplay::write(&batchSize, "cublasDgelsBatched", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasCgelsBatched(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    trans: cuda_types::cublas::cublasOperation_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    nrhs: ::core::ffi::c_int,
    Aarray: *const *mut cuda_types::cublas::cuComplex,
    lda: ::core::ffi::c_int,
    Carray: *const *mut cuda_types::cublas::cuComplex,
    ldc: ::core::ffi::c_int,
    info: *mut ::core::ffi::c_int,
    devInfoArray: *mut ::core::ffi::c_int,
    batchSize: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasCgelsBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasCgelsBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasCgelsBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasCgelsBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nrhs), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nrhs, "cublasCgelsBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Aarray), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Aarray, "cublasCgelsBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasCgelsBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Carray), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Carray, "cublasCgelsBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cublasCgelsBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cublasCgelsBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(devInfoArray), ": ").as_bytes())?;
    crate::CudaDisplay::write(&devInfoArray, "cublasCgelsBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(batchSize), ": ").as_bytes())?;
    crate::CudaDisplay::write(&batchSize, "cublasCgelsBatched", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasZgelsBatched(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    trans: cuda_types::cublas::cublasOperation_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    nrhs: ::core::ffi::c_int,
    Aarray: *const *mut cuda_types::cublas::cuDoubleComplex,
    lda: ::core::ffi::c_int,
    Carray: *const *mut cuda_types::cublas::cuDoubleComplex,
    ldc: ::core::ffi::c_int,
    info: *mut ::core::ffi::c_int,
    devInfoArray: *mut ::core::ffi::c_int,
    batchSize: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasZgelsBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasZgelsBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasZgelsBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasZgelsBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nrhs), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nrhs, "cublasZgelsBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Aarray), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Aarray, "cublasZgelsBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasZgelsBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Carray), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Carray, "cublasZgelsBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cublasZgelsBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cublasZgelsBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(devInfoArray), ": ").as_bytes())?;
    crate::CudaDisplay::write(&devInfoArray, "cublasZgelsBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(batchSize), ": ").as_bytes())?;
    crate::CudaDisplay::write(&batchSize, "cublasZgelsBatched", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasStpttr(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    n: ::core::ffi::c_int,
    AP: *const f32,
    A: *mut f32,
    lda: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasStpttr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasStpttr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasStpttr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(AP), ": ").as_bytes())?;
    crate::CudaDisplay::write(&AP, "cublasStpttr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasStpttr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasStpttr", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasDtpttr(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    n: ::core::ffi::c_int,
    AP: *const f64,
    A: *mut f64,
    lda: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasDtpttr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasDtpttr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasDtpttr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(AP), ": ").as_bytes())?;
    crate::CudaDisplay::write(&AP, "cublasDtpttr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasDtpttr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasDtpttr", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasCtpttr(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    n: ::core::ffi::c_int,
    AP: *const cuda_types::cublas::cuComplex,
    A: *mut cuda_types::cublas::cuComplex,
    lda: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasCtpttr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasCtpttr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasCtpttr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(AP), ": ").as_bytes())?;
    crate::CudaDisplay::write(&AP, "cublasCtpttr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasCtpttr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasCtpttr", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasZtpttr(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    n: ::core::ffi::c_int,
    AP: *const cuda_types::cublas::cuDoubleComplex,
    A: *mut cuda_types::cublas::cuDoubleComplex,
    lda: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasZtpttr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasZtpttr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasZtpttr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(AP), ": ").as_bytes())?;
    crate::CudaDisplay::write(&AP, "cublasZtpttr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasZtpttr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasZtpttr", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasStrttp(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    n: ::core::ffi::c_int,
    A: *const f32,
    lda: ::core::ffi::c_int,
    AP: *mut f32,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasStrttp", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasStrttp", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasStrttp", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasStrttp", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasStrttp", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(AP), ": ").as_bytes())?;
    crate::CudaDisplay::write(&AP, "cublasStrttp", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasDtrttp(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    n: ::core::ffi::c_int,
    A: *const f64,
    lda: ::core::ffi::c_int,
    AP: *mut f64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasDtrttp", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasDtrttp", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasDtrttp", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasDtrttp", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasDtrttp", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(AP), ": ").as_bytes())?;
    crate::CudaDisplay::write(&AP, "cublasDtrttp", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasCtrttp(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    n: ::core::ffi::c_int,
    A: *const cuda_types::cublas::cuComplex,
    lda: ::core::ffi::c_int,
    AP: *mut cuda_types::cublas::cuComplex,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasCtrttp", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasCtrttp", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasCtrttp", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasCtrttp", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasCtrttp", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(AP), ": ").as_bytes())?;
    crate::CudaDisplay::write(&AP, "cublasCtrttp", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasZtrttp(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    uplo: cuda_types::cublas::cublasFillMode_t,
    n: ::core::ffi::c_int,
    A: *const cuda_types::cublas::cuDoubleComplex,
    lda: ::core::ffi::c_int,
    AP: *mut cuda_types::cublas::cuDoubleComplex,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasZtrttp", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(uplo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&uplo, "cublasZtrttp", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasZtrttp", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasZtrttp", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasZtrttp", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(AP), ": ").as_bytes())?;
    crate::CudaDisplay::write(&AP, "cublasZtrttp", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasSgetrfBatched(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    n: ::core::ffi::c_int,
    A: *const *mut f32,
    lda: ::core::ffi::c_int,
    P: *mut ::core::ffi::c_int,
    info: *mut ::core::ffi::c_int,
    batchSize: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasSgetrfBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasSgetrfBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasSgetrfBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasSgetrfBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(P), ": ").as_bytes())?;
    crate::CudaDisplay::write(&P, "cublasSgetrfBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cublasSgetrfBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(batchSize), ": ").as_bytes())?;
    crate::CudaDisplay::write(&batchSize, "cublasSgetrfBatched", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasDgetrfBatched(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    n: ::core::ffi::c_int,
    A: *const *mut f64,
    lda: ::core::ffi::c_int,
    P: *mut ::core::ffi::c_int,
    info: *mut ::core::ffi::c_int,
    batchSize: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasDgetrfBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasDgetrfBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasDgetrfBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasDgetrfBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(P), ": ").as_bytes())?;
    crate::CudaDisplay::write(&P, "cublasDgetrfBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cublasDgetrfBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(batchSize), ": ").as_bytes())?;
    crate::CudaDisplay::write(&batchSize, "cublasDgetrfBatched", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasCgetrfBatched(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    n: ::core::ffi::c_int,
    A: *const *mut cuda_types::cublas::cuComplex,
    lda: ::core::ffi::c_int,
    P: *mut ::core::ffi::c_int,
    info: *mut ::core::ffi::c_int,
    batchSize: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasCgetrfBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasCgetrfBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasCgetrfBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasCgetrfBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(P), ": ").as_bytes())?;
    crate::CudaDisplay::write(&P, "cublasCgetrfBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cublasCgetrfBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(batchSize), ": ").as_bytes())?;
    crate::CudaDisplay::write(&batchSize, "cublasCgetrfBatched", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasZgetrfBatched(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    n: ::core::ffi::c_int,
    A: *const *mut cuda_types::cublas::cuDoubleComplex,
    lda: ::core::ffi::c_int,
    P: *mut ::core::ffi::c_int,
    info: *mut ::core::ffi::c_int,
    batchSize: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasZgetrfBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasZgetrfBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasZgetrfBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasZgetrfBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(P), ": ").as_bytes())?;
    crate::CudaDisplay::write(&P, "cublasZgetrfBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cublasZgetrfBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(batchSize), ": ").as_bytes())?;
    crate::CudaDisplay::write(&batchSize, "cublasZgetrfBatched", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasSgetriBatched(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    n: ::core::ffi::c_int,
    A: *const *const f32,
    lda: ::core::ffi::c_int,
    P: *const ::core::ffi::c_int,
    C: *const *mut f32,
    ldc: ::core::ffi::c_int,
    info: *mut ::core::ffi::c_int,
    batchSize: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasSgetriBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasSgetriBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasSgetriBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasSgetriBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(P), ": ").as_bytes())?;
    crate::CudaDisplay::write(&P, "cublasSgetriBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(C), ": ").as_bytes())?;
    crate::CudaDisplay::write(&C, "cublasSgetriBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cublasSgetriBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cublasSgetriBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(batchSize), ": ").as_bytes())?;
    crate::CudaDisplay::write(&batchSize, "cublasSgetriBatched", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasDgetriBatched(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    n: ::core::ffi::c_int,
    A: *const *const f64,
    lda: ::core::ffi::c_int,
    P: *const ::core::ffi::c_int,
    C: *const *mut f64,
    ldc: ::core::ffi::c_int,
    info: *mut ::core::ffi::c_int,
    batchSize: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasDgetriBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasDgetriBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasDgetriBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasDgetriBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(P), ": ").as_bytes())?;
    crate::CudaDisplay::write(&P, "cublasDgetriBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(C), ": ").as_bytes())?;
    crate::CudaDisplay::write(&C, "cublasDgetriBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cublasDgetriBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cublasDgetriBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(batchSize), ": ").as_bytes())?;
    crate::CudaDisplay::write(&batchSize, "cublasDgetriBatched", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasCgetriBatched(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    n: ::core::ffi::c_int,
    A: *const *const cuda_types::cublas::cuComplex,
    lda: ::core::ffi::c_int,
    P: *const ::core::ffi::c_int,
    C: *const *mut cuda_types::cublas::cuComplex,
    ldc: ::core::ffi::c_int,
    info: *mut ::core::ffi::c_int,
    batchSize: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasCgetriBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasCgetriBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasCgetriBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasCgetriBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(P), ": ").as_bytes())?;
    crate::CudaDisplay::write(&P, "cublasCgetriBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(C), ": ").as_bytes())?;
    crate::CudaDisplay::write(&C, "cublasCgetriBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cublasCgetriBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cublasCgetriBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(batchSize), ": ").as_bytes())?;
    crate::CudaDisplay::write(&batchSize, "cublasCgetriBatched", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasZgetriBatched(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    n: ::core::ffi::c_int,
    A: *const *const cuda_types::cublas::cuDoubleComplex,
    lda: ::core::ffi::c_int,
    P: *const ::core::ffi::c_int,
    C: *const *mut cuda_types::cublas::cuDoubleComplex,
    ldc: ::core::ffi::c_int,
    info: *mut ::core::ffi::c_int,
    batchSize: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasZgetriBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasZgetriBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasZgetriBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasZgetriBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(P), ": ").as_bytes())?;
    crate::CudaDisplay::write(&P, "cublasZgetriBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(C), ": ").as_bytes())?;
    crate::CudaDisplay::write(&C, "cublasZgetriBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cublasZgetriBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cublasZgetriBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(batchSize), ": ").as_bytes())?;
    crate::CudaDisplay::write(&batchSize, "cublasZgetriBatched", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasSgetrsBatched(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    trans: cuda_types::cublas::cublasOperation_t,
    n: ::core::ffi::c_int,
    nrhs: ::core::ffi::c_int,
    Aarray: *const *const f32,
    lda: ::core::ffi::c_int,
    devIpiv: *const ::core::ffi::c_int,
    Barray: *const *mut f32,
    ldb: ::core::ffi::c_int,
    info: *mut ::core::ffi::c_int,
    batchSize: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasSgetrsBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasSgetrsBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasSgetrsBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nrhs), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nrhs, "cublasSgetrsBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Aarray), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Aarray, "cublasSgetrsBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasSgetrsBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(devIpiv), ": ").as_bytes())?;
    crate::CudaDisplay::write(&devIpiv, "cublasSgetrsBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Barray), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Barray, "cublasSgetrsBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cublasSgetrsBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cublasSgetrsBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(batchSize), ": ").as_bytes())?;
    crate::CudaDisplay::write(&batchSize, "cublasSgetrsBatched", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasDgetrsBatched(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    trans: cuda_types::cublas::cublasOperation_t,
    n: ::core::ffi::c_int,
    nrhs: ::core::ffi::c_int,
    Aarray: *const *const f64,
    lda: ::core::ffi::c_int,
    devIpiv: *const ::core::ffi::c_int,
    Barray: *const *mut f64,
    ldb: ::core::ffi::c_int,
    info: *mut ::core::ffi::c_int,
    batchSize: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasDgetrsBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasDgetrsBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasDgetrsBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nrhs), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nrhs, "cublasDgetrsBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Aarray), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Aarray, "cublasDgetrsBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasDgetrsBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(devIpiv), ": ").as_bytes())?;
    crate::CudaDisplay::write(&devIpiv, "cublasDgetrsBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Barray), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Barray, "cublasDgetrsBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cublasDgetrsBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cublasDgetrsBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(batchSize), ": ").as_bytes())?;
    crate::CudaDisplay::write(&batchSize, "cublasDgetrsBatched", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasCgetrsBatched(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    trans: cuda_types::cublas::cublasOperation_t,
    n: ::core::ffi::c_int,
    nrhs: ::core::ffi::c_int,
    Aarray: *const *const cuda_types::cublas::cuComplex,
    lda: ::core::ffi::c_int,
    devIpiv: *const ::core::ffi::c_int,
    Barray: *const *mut cuda_types::cublas::cuComplex,
    ldb: ::core::ffi::c_int,
    info: *mut ::core::ffi::c_int,
    batchSize: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasCgetrsBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasCgetrsBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasCgetrsBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nrhs), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nrhs, "cublasCgetrsBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Aarray), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Aarray, "cublasCgetrsBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasCgetrsBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(devIpiv), ": ").as_bytes())?;
    crate::CudaDisplay::write(&devIpiv, "cublasCgetrsBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Barray), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Barray, "cublasCgetrsBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cublasCgetrsBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cublasCgetrsBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(batchSize), ": ").as_bytes())?;
    crate::CudaDisplay::write(&batchSize, "cublasCgetrsBatched", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasZgetrsBatched(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    trans: cuda_types::cublas::cublasOperation_t,
    n: ::core::ffi::c_int,
    nrhs: ::core::ffi::c_int,
    Aarray: *const *const cuda_types::cublas::cuDoubleComplex,
    lda: ::core::ffi::c_int,
    devIpiv: *const ::core::ffi::c_int,
    Barray: *const *mut cuda_types::cublas::cuDoubleComplex,
    ldb: ::core::ffi::c_int,
    info: *mut ::core::ffi::c_int,
    batchSize: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasZgetrsBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(trans), ": ").as_bytes())?;
    crate::CudaDisplay::write(&trans, "cublasZgetrsBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasZgetrsBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nrhs), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nrhs, "cublasZgetrsBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Aarray), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Aarray, "cublasZgetrsBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasZgetrsBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(devIpiv), ": ").as_bytes())?;
    crate::CudaDisplay::write(&devIpiv, "cublasZgetrsBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(Barray), ": ").as_bytes())?;
    crate::CudaDisplay::write(&Barray, "cublasZgetrsBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cublasZgetrsBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cublasZgetrsBatched", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(batchSize), ": ").as_bytes())?;
    crate::CudaDisplay::write(&batchSize, "cublasZgetrsBatched", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cublasUint8gemmBias(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cublas::cublasHandle_t,
    transa: cuda_types::cublas::cublasOperation_t,
    transb: cuda_types::cublas::cublasOperation_t,
    transc: cuda_types::cublas::cublasOperation_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    k: ::core::ffi::c_int,
    A: *const ::core::ffi::c_uchar,
    A_bias: ::core::ffi::c_int,
    lda: ::core::ffi::c_int,
    B: *const ::core::ffi::c_uchar,
    B_bias: ::core::ffi::c_int,
    ldb: ::core::ffi::c_int,
    C: *mut ::core::ffi::c_uchar,
    C_bias: ::core::ffi::c_int,
    ldc: ::core::ffi::c_int,
    C_mult: ::core::ffi::c_int,
    C_shift: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cublasUint8gemmBias", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transa), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transa, "cublasUint8gemmBias", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transb, "cublasUint8gemmBias", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transc, "cublasUint8gemmBias", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cublasUint8gemmBias", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cublasUint8gemmBias", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(k), ": ").as_bytes())?;
    crate::CudaDisplay::write(&k, "cublasUint8gemmBias", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cublasUint8gemmBias", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A_bias), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A_bias, "cublasUint8gemmBias", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cublasUint8gemmBias", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(B), ": ").as_bytes())?;
    crate::CudaDisplay::write(&B, "cublasUint8gemmBias", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(B_bias), ": ").as_bytes())?;
    crate::CudaDisplay::write(&B_bias, "cublasUint8gemmBias", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cublasUint8gemmBias", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(C), ": ").as_bytes())?;
    crate::CudaDisplay::write(&C, "cublasUint8gemmBias", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(C_bias), ": ").as_bytes())?;
    crate::CudaDisplay::write(&C_bias, "cublasUint8gemmBias", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cublasUint8gemmBias", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(C_mult), ": ").as_bytes())?;
    crate::CudaDisplay::write(&C_mult, "cublasUint8gemmBias", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(C_shift), ": ").as_bytes())?;
    crate::CudaDisplay::write(&C_shift, "cublasUint8gemmBias", arg_idx, writer)?;
    writer.write_all(b")")
}
impl crate::CudaDisplay for cuda_types::cublas::cublasStatus_t {
    fn write(
        &self,
        _fn_name: &'static str,
        _index: usize,
        writer: &mut (impl std::io::Write + ?Sized),
    ) -> std::io::Result<()> {
        match self {
            Ok(()) => writer.write_all(b"CUBLAS_STATUS_SUCCESS"),
            Err(err) => {
                match err.0.get() {
                    1 => writer.write_all("CUBLAS_STATUS_NOT_INITIALIZED".as_bytes()),
                    3 => writer.write_all("CUBLAS_STATUS_ALLOC_FAILED".as_bytes()),
                    7 => writer.write_all("CUBLAS_STATUS_INVALID_VALUE".as_bytes()),
                    8 => writer.write_all("CUBLAS_STATUS_ARCH_MISMATCH".as_bytes()),
                    11 => writer.write_all("CUBLAS_STATUS_MAPPING_ERROR".as_bytes()),
                    13 => writer.write_all("CUBLAS_STATUS_EXECUTION_FAILED".as_bytes()),
                    14 => writer.write_all("CUBLAS_STATUS_INTERNAL_ERROR".as_bytes()),
                    15 => writer.write_all("CUBLAS_STATUS_NOT_SUPPORTED".as_bytes()),
                    16 => writer.write_all("CUBLAS_STATUS_LICENSE_ERROR".as_bytes()),
                    err => write!(writer, "{}", err),
                }
            }
        }
    }
}
