// Generated automatically by zluda_bindgen
// DO NOT EDIT MANUALLY
#![allow(warnings)]
impl crate::CudaDisplay for cuda_types::cusparse::cusparseHandle_t {
    fn write(
        &self,
        _fn_name: &'static str,
        _index: usize,
        writer: &mut (impl std::io::Write + ?Sized),
    ) -> std::io::Result<()> {
        if self.is_null() {
            writer.write_all(b"NULL")
        } else {
            write!(writer, "{:p}", *self)
        }
    }
}
impl crate::CudaDisplay for cuda_types::cusparse::cusparseMatDescr_t {
    fn write(
        &self,
        _fn_name: &'static str,
        _index: usize,
        writer: &mut (impl std::io::Write + ?Sized),
    ) -> std::io::Result<()> {
        if self.is_null() {
            writer.write_all(b"NULL")
        } else {
            write!(writer, "{:p}", *self)
        }
    }
}
impl crate::CudaDisplay for cuda_types::cusparse::bsrsv2Info_t {
    fn write(
        &self,
        _fn_name: &'static str,
        _index: usize,
        writer: &mut (impl std::io::Write + ?Sized),
    ) -> std::io::Result<()> {
        if self.is_null() {
            writer.write_all(b"NULL")
        } else {
            write!(writer, "{:p}", *self)
        }
    }
}
impl crate::CudaDisplay for cuda_types::cusparse::bsrsm2Info_t {
    fn write(
        &self,
        _fn_name: &'static str,
        _index: usize,
        writer: &mut (impl std::io::Write + ?Sized),
    ) -> std::io::Result<()> {
        if self.is_null() {
            writer.write_all(b"NULL")
        } else {
            write!(writer, "{:p}", *self)
        }
    }
}
impl crate::CudaDisplay for cuda_types::cusparse::csric02Info_t {
    fn write(
        &self,
        _fn_name: &'static str,
        _index: usize,
        writer: &mut (impl std::io::Write + ?Sized),
    ) -> std::io::Result<()> {
        if self.is_null() {
            writer.write_all(b"NULL")
        } else {
            write!(writer, "{:p}", *self)
        }
    }
}
impl crate::CudaDisplay for cuda_types::cusparse::bsric02Info_t {
    fn write(
        &self,
        _fn_name: &'static str,
        _index: usize,
        writer: &mut (impl std::io::Write + ?Sized),
    ) -> std::io::Result<()> {
        if self.is_null() {
            writer.write_all(b"NULL")
        } else {
            write!(writer, "{:p}", *self)
        }
    }
}
impl crate::CudaDisplay for cuda_types::cusparse::csrilu02Info_t {
    fn write(
        &self,
        _fn_name: &'static str,
        _index: usize,
        writer: &mut (impl std::io::Write + ?Sized),
    ) -> std::io::Result<()> {
        if self.is_null() {
            writer.write_all(b"NULL")
        } else {
            write!(writer, "{:p}", *self)
        }
    }
}
impl crate::CudaDisplay for cuda_types::cusparse::bsrilu02Info_t {
    fn write(
        &self,
        _fn_name: &'static str,
        _index: usize,
        writer: &mut (impl std::io::Write + ?Sized),
    ) -> std::io::Result<()> {
        if self.is_null() {
            writer.write_all(b"NULL")
        } else {
            write!(writer, "{:p}", *self)
        }
    }
}
impl crate::CudaDisplay for cuda_types::cusparse::csru2csrInfo_t {
    fn write(
        &self,
        _fn_name: &'static str,
        _index: usize,
        writer: &mut (impl std::io::Write + ?Sized),
    ) -> std::io::Result<()> {
        if self.is_null() {
            writer.write_all(b"NULL")
        } else {
            write!(writer, "{:p}", *self)
        }
    }
}
impl crate::CudaDisplay for cuda_types::cusparse::cusparseColorInfo_t {
    fn write(
        &self,
        _fn_name: &'static str,
        _index: usize,
        writer: &mut (impl std::io::Write + ?Sized),
    ) -> std::io::Result<()> {
        if self.is_null() {
            writer.write_all(b"NULL")
        } else {
            write!(writer, "{:p}", *self)
        }
    }
}
impl crate::CudaDisplay for cuda_types::cusparse::pruneInfo_t {
    fn write(
        &self,
        _fn_name: &'static str,
        _index: usize,
        writer: &mut (impl std::io::Write + ?Sized),
    ) -> std::io::Result<()> {
        if self.is_null() {
            writer.write_all(b"NULL")
        } else {
            write!(writer, "{:p}", *self)
        }
    }
}
impl crate::CudaDisplay for cuda_types::cusparse::cusparsePointerMode_t {
    fn write(
        &self,
        _fn_name: &'static str,
        _index: usize,
        writer: &mut (impl std::io::Write + ?Sized),
    ) -> std::io::Result<()> {
        match self {
            &cuda_types::cusparse::cusparsePointerMode_t::CUSPARSE_POINTER_MODE_HOST => {
                writer.write_all(stringify!(CUSPARSE_POINTER_MODE_HOST).as_bytes())
            }
            &cuda_types::cusparse::cusparsePointerMode_t::CUSPARSE_POINTER_MODE_DEVICE => {
                writer.write_all(stringify!(CUSPARSE_POINTER_MODE_DEVICE).as_bytes())
            }
            _ => write!(writer, "{}", self.0),
        }
    }
}
impl crate::CudaDisplay for cuda_types::cusparse::cusparseAction_t {
    fn write(
        &self,
        _fn_name: &'static str,
        _index: usize,
        writer: &mut (impl std::io::Write + ?Sized),
    ) -> std::io::Result<()> {
        match self {
            &cuda_types::cusparse::cusparseAction_t::CUSPARSE_ACTION_SYMBOLIC => {
                writer.write_all(stringify!(CUSPARSE_ACTION_SYMBOLIC).as_bytes())
            }
            &cuda_types::cusparse::cusparseAction_t::CUSPARSE_ACTION_NUMERIC => {
                writer.write_all(stringify!(CUSPARSE_ACTION_NUMERIC).as_bytes())
            }
            _ => write!(writer, "{}", self.0),
        }
    }
}
impl crate::CudaDisplay for cuda_types::cusparse::cusparseMatrixType_t {
    fn write(
        &self,
        _fn_name: &'static str,
        _index: usize,
        writer: &mut (impl std::io::Write + ?Sized),
    ) -> std::io::Result<()> {
        match self {
            &cuda_types::cusparse::cusparseMatrixType_t::CUSPARSE_MATRIX_TYPE_GENERAL => {
                writer.write_all(stringify!(CUSPARSE_MATRIX_TYPE_GENERAL).as_bytes())
            }
            &cuda_types::cusparse::cusparseMatrixType_t::CUSPARSE_MATRIX_TYPE_SYMMETRIC => {
                writer.write_all(stringify!(CUSPARSE_MATRIX_TYPE_SYMMETRIC).as_bytes())
            }
            &cuda_types::cusparse::cusparseMatrixType_t::CUSPARSE_MATRIX_TYPE_HERMITIAN => {
                writer.write_all(stringify!(CUSPARSE_MATRIX_TYPE_HERMITIAN).as_bytes())
            }
            &cuda_types::cusparse::cusparseMatrixType_t::CUSPARSE_MATRIX_TYPE_TRIANGULAR => {
                writer.write_all(stringify!(CUSPARSE_MATRIX_TYPE_TRIANGULAR).as_bytes())
            }
            _ => write!(writer, "{}", self.0),
        }
    }
}
impl crate::CudaDisplay for cuda_types::cusparse::cusparseFillMode_t {
    fn write(
        &self,
        _fn_name: &'static str,
        _index: usize,
        writer: &mut (impl std::io::Write + ?Sized),
    ) -> std::io::Result<()> {
        match self {
            &cuda_types::cusparse::cusparseFillMode_t::CUSPARSE_FILL_MODE_LOWER => {
                writer.write_all(stringify!(CUSPARSE_FILL_MODE_LOWER).as_bytes())
            }
            &cuda_types::cusparse::cusparseFillMode_t::CUSPARSE_FILL_MODE_UPPER => {
                writer.write_all(stringify!(CUSPARSE_FILL_MODE_UPPER).as_bytes())
            }
            _ => write!(writer, "{}", self.0),
        }
    }
}
impl crate::CudaDisplay for cuda_types::cusparse::cusparseDiagType_t {
    fn write(
        &self,
        _fn_name: &'static str,
        _index: usize,
        writer: &mut (impl std::io::Write + ?Sized),
    ) -> std::io::Result<()> {
        match self {
            &cuda_types::cusparse::cusparseDiagType_t::CUSPARSE_DIAG_TYPE_NON_UNIT => {
                writer.write_all(stringify!(CUSPARSE_DIAG_TYPE_NON_UNIT).as_bytes())
            }
            &cuda_types::cusparse::cusparseDiagType_t::CUSPARSE_DIAG_TYPE_UNIT => {
                writer.write_all(stringify!(CUSPARSE_DIAG_TYPE_UNIT).as_bytes())
            }
            _ => write!(writer, "{}", self.0),
        }
    }
}
impl crate::CudaDisplay for cuda_types::cusparse::cusparseIndexBase_t {
    fn write(
        &self,
        _fn_name: &'static str,
        _index: usize,
        writer: &mut (impl std::io::Write + ?Sized),
    ) -> std::io::Result<()> {
        match self {
            &cuda_types::cusparse::cusparseIndexBase_t::CUSPARSE_INDEX_BASE_ZERO => {
                writer.write_all(stringify!(CUSPARSE_INDEX_BASE_ZERO).as_bytes())
            }
            &cuda_types::cusparse::cusparseIndexBase_t::CUSPARSE_INDEX_BASE_ONE => {
                writer.write_all(stringify!(CUSPARSE_INDEX_BASE_ONE).as_bytes())
            }
            _ => write!(writer, "{}", self.0),
        }
    }
}
impl crate::CudaDisplay for cuda_types::cusparse::cusparseOperation_t {
    fn write(
        &self,
        _fn_name: &'static str,
        _index: usize,
        writer: &mut (impl std::io::Write + ?Sized),
    ) -> std::io::Result<()> {
        match self {
            &cuda_types::cusparse::cusparseOperation_t::CUSPARSE_OPERATION_NON_TRANSPOSE => {
                writer.write_all(stringify!(CUSPARSE_OPERATION_NON_TRANSPOSE).as_bytes())
            }
            &cuda_types::cusparse::cusparseOperation_t::CUSPARSE_OPERATION_TRANSPOSE => {
                writer.write_all(stringify!(CUSPARSE_OPERATION_TRANSPOSE).as_bytes())
            }
            &cuda_types::cusparse::cusparseOperation_t::CUSPARSE_OPERATION_CONJUGATE_TRANSPOSE => {
                writer
                    .write_all(
                        stringify!(CUSPARSE_OPERATION_CONJUGATE_TRANSPOSE).as_bytes(),
                    )
            }
            _ => write!(writer, "{}", self.0),
        }
    }
}
impl crate::CudaDisplay for cuda_types::cusparse::cusparseDirection_t {
    fn write(
        &self,
        _fn_name: &'static str,
        _index: usize,
        writer: &mut (impl std::io::Write + ?Sized),
    ) -> std::io::Result<()> {
        match self {
            &cuda_types::cusparse::cusparseDirection_t::CUSPARSE_DIRECTION_ROW => {
                writer.write_all(stringify!(CUSPARSE_DIRECTION_ROW).as_bytes())
            }
            &cuda_types::cusparse::cusparseDirection_t::CUSPARSE_DIRECTION_COLUMN => {
                writer.write_all(stringify!(CUSPARSE_DIRECTION_COLUMN).as_bytes())
            }
            _ => write!(writer, "{}", self.0),
        }
    }
}
impl crate::CudaDisplay for cuda_types::cusparse::cusparseSolvePolicy_t {
    fn write(
        &self,
        _fn_name: &'static str,
        _index: usize,
        writer: &mut (impl std::io::Write + ?Sized),
    ) -> std::io::Result<()> {
        match self {
            &cuda_types::cusparse::cusparseSolvePolicy_t::CUSPARSE_SOLVE_POLICY_NO_LEVEL => {
                writer.write_all(stringify!(CUSPARSE_SOLVE_POLICY_NO_LEVEL).as_bytes())
            }
            &cuda_types::cusparse::cusparseSolvePolicy_t::CUSPARSE_SOLVE_POLICY_USE_LEVEL => {
                writer.write_all(stringify!(CUSPARSE_SOLVE_POLICY_USE_LEVEL).as_bytes())
            }
            _ => write!(writer, "{}", self.0),
        }
    }
}
impl crate::CudaDisplay for cuda_types::cusparse::cusparseColorAlg_t {
    fn write(
        &self,
        _fn_name: &'static str,
        _index: usize,
        writer: &mut (impl std::io::Write + ?Sized),
    ) -> std::io::Result<()> {
        match self {
            &cuda_types::cusparse::cusparseColorAlg_t::CUSPARSE_COLOR_ALG0 => {
                writer.write_all(stringify!(CUSPARSE_COLOR_ALG0).as_bytes())
            }
            &cuda_types::cusparse::cusparseColorAlg_t::CUSPARSE_COLOR_ALG1 => {
                writer.write_all(stringify!(CUSPARSE_COLOR_ALG1).as_bytes())
            }
            _ => write!(writer, "{}", self.0),
        }
    }
}
pub fn write_cusparseCreate(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: *mut cuda_types::cusparse::cusparseHandle_t,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseCreate", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseDestroy(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseDestroy", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseGetVersion(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    version: *mut ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseGetVersion", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(version), ": ").as_bytes())?;
    crate::CudaDisplay::write(&version, "cusparseGetVersion", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseGetProperty(
    writer: &mut (impl std::io::Write + ?Sized),
    type_: cuda_types::cusparse::libraryPropertyType,
    value: *mut ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(type_), ": ").as_bytes())?;
    crate::CudaDisplay::write(&type_, "cusparseGetProperty", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(value), ": ").as_bytes())?;
    crate::CudaDisplay::write(&value, "cusparseGetProperty", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseGetErrorName(
    writer: &mut (impl std::io::Write + ?Sized),
    status: cuda_types::cusparse::cusparseStatus_t,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(status), ": ").as_bytes())?;
    crate::CudaDisplay::write(&status, "cusparseGetErrorName", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseGetErrorString(
    writer: &mut (impl std::io::Write + ?Sized),
    status: cuda_types::cusparse::cusparseStatus_t,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(status), ": ").as_bytes())?;
    crate::CudaDisplay::write(&status, "cusparseGetErrorString", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseSetStream(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    streamId: cuda_types::cusparse::cudaStream_t,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseSetStream", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(streamId), ": ").as_bytes())?;
    crate::CudaDisplay::write(&streamId, "cusparseSetStream", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseGetStream(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    streamId: *mut cuda_types::cusparse::cudaStream_t,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseGetStream", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(streamId), ": ").as_bytes())?;
    crate::CudaDisplay::write(&streamId, "cusparseGetStream", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseGetPointerMode(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    mode: *mut cuda_types::cusparse::cusparsePointerMode_t,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseGetPointerMode", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(mode), ": ").as_bytes())?;
    crate::CudaDisplay::write(&mode, "cusparseGetPointerMode", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseSetPointerMode(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    mode: cuda_types::cusparse::cusparsePointerMode_t,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseSetPointerMode", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(mode), ": ").as_bytes())?;
    crate::CudaDisplay::write(&mode, "cusparseSetPointerMode", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseLoggerSetCallback(
    writer: &mut (impl std::io::Write + ?Sized),
    callback: cuda_types::cusparse::cusparseLoggerCallback_t,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(callback), ": ").as_bytes())?;
    crate::CudaDisplay::write(&callback, "cusparseLoggerSetCallback", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseLoggerSetFile(
    writer: &mut (impl std::io::Write + ?Sized),
    file: *mut cuda_types::FILE,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(file), ": ").as_bytes())?;
    crate::CudaDisplay::write(&file, "cusparseLoggerSetFile", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseLoggerOpenFile(
    writer: &mut (impl std::io::Write + ?Sized),
    logFile: *const ::core::ffi::c_char,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(logFile), ": ").as_bytes())?;
    crate::CudaDisplay::write(&logFile, "cusparseLoggerOpenFile", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseLoggerSetLevel(
    writer: &mut (impl std::io::Write + ?Sized),
    level: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(level), ": ").as_bytes())?;
    crate::CudaDisplay::write(&level, "cusparseLoggerSetLevel", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseLoggerSetMask(
    writer: &mut (impl std::io::Write + ?Sized),
    mask: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(mask), ": ").as_bytes())?;
    crate::CudaDisplay::write(&mask, "cusparseLoggerSetMask", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseLoggerForceDisable(
    writer: &mut (impl std::io::Write + ?Sized),
) -> std::io::Result<()> {
    writer.write_all(b"()")
}
pub fn write_cusparseCreateMatDescr(
    writer: &mut (impl std::io::Write + ?Sized),
    descrA: *mut cuda_types::cusparse::cusparseMatDescr_t,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseCreateMatDescr", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseDestroyMatDescr(
    writer: &mut (impl std::io::Write + ?Sized),
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseDestroyMatDescr", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseSetMatType(
    writer: &mut (impl std::io::Write + ?Sized),
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    type_: cuda_types::cusparse::cusparseMatrixType_t,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseSetMatType", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(type_), ": ").as_bytes())?;
    crate::CudaDisplay::write(&type_, "cusparseSetMatType", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseGetMatType(
    writer: &mut (impl std::io::Write + ?Sized),
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseGetMatType", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseSetMatFillMode(
    writer: &mut (impl std::io::Write + ?Sized),
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    fillMode: cuda_types::cusparse::cusparseFillMode_t,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseSetMatFillMode", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(fillMode), ": ").as_bytes())?;
    crate::CudaDisplay::write(&fillMode, "cusparseSetMatFillMode", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseGetMatFillMode(
    writer: &mut (impl std::io::Write + ?Sized),
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseGetMatFillMode", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseSetMatDiagType(
    writer: &mut (impl std::io::Write + ?Sized),
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    diagType: cuda_types::cusparse::cusparseDiagType_t,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseSetMatDiagType", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(diagType), ": ").as_bytes())?;
    crate::CudaDisplay::write(&diagType, "cusparseSetMatDiagType", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseGetMatDiagType(
    writer: &mut (impl std::io::Write + ?Sized),
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseGetMatDiagType", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseSetMatIndexBase(
    writer: &mut (impl std::io::Write + ?Sized),
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    base: cuda_types::cusparse::cusparseIndexBase_t,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseSetMatIndexBase", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(base), ": ").as_bytes())?;
    crate::CudaDisplay::write(&base, "cusparseSetMatIndexBase", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseGetMatIndexBase(
    writer: &mut (impl std::io::Write + ?Sized),
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseGetMatIndexBase", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseCreateCsric02Info(
    writer: &mut (impl std::io::Write + ?Sized),
    info: *mut cuda_types::cusparse::csric02Info_t,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cusparseCreateCsric02Info", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseDestroyCsric02Info(
    writer: &mut (impl std::io::Write + ?Sized),
    info: cuda_types::cusparse::csric02Info_t,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cusparseDestroyCsric02Info", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseCreateBsric02Info(
    writer: &mut (impl std::io::Write + ?Sized),
    info: *mut cuda_types::cusparse::bsric02Info_t,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cusparseCreateBsric02Info", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseDestroyBsric02Info(
    writer: &mut (impl std::io::Write + ?Sized),
    info: cuda_types::cusparse::bsric02Info_t,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cusparseDestroyBsric02Info", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseCreateCsrilu02Info(
    writer: &mut (impl std::io::Write + ?Sized),
    info: *mut cuda_types::cusparse::csrilu02Info_t,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cusparseCreateCsrilu02Info", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseDestroyCsrilu02Info(
    writer: &mut (impl std::io::Write + ?Sized),
    info: cuda_types::cusparse::csrilu02Info_t,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cusparseDestroyCsrilu02Info", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseCreateBsrilu02Info(
    writer: &mut (impl std::io::Write + ?Sized),
    info: *mut cuda_types::cusparse::bsrilu02Info_t,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cusparseCreateBsrilu02Info", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseDestroyBsrilu02Info(
    writer: &mut (impl std::io::Write + ?Sized),
    info: cuda_types::cusparse::bsrilu02Info_t,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cusparseDestroyBsrilu02Info", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseCreateBsrsv2Info(
    writer: &mut (impl std::io::Write + ?Sized),
    info: *mut cuda_types::cusparse::bsrsv2Info_t,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cusparseCreateBsrsv2Info", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseDestroyBsrsv2Info(
    writer: &mut (impl std::io::Write + ?Sized),
    info: cuda_types::cusparse::bsrsv2Info_t,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cusparseDestroyBsrsv2Info", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseCreateBsrsm2Info(
    writer: &mut (impl std::io::Write + ?Sized),
    info: *mut cuda_types::cusparse::bsrsm2Info_t,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cusparseCreateBsrsm2Info", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseDestroyBsrsm2Info(
    writer: &mut (impl std::io::Write + ?Sized),
    info: cuda_types::cusparse::bsrsm2Info_t,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cusparseDestroyBsrsm2Info", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseCreateCsru2csrInfo(
    writer: &mut (impl std::io::Write + ?Sized),
    info: *mut cuda_types::cusparse::csru2csrInfo_t,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cusparseCreateCsru2csrInfo", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseDestroyCsru2csrInfo(
    writer: &mut (impl std::io::Write + ?Sized),
    info: cuda_types::cusparse::csru2csrInfo_t,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cusparseDestroyCsru2csrInfo", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseCreateColorInfo(
    writer: &mut (impl std::io::Write + ?Sized),
    info: *mut cuda_types::cusparse::cusparseColorInfo_t,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cusparseCreateColorInfo", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseDestroyColorInfo(
    writer: &mut (impl std::io::Write + ?Sized),
    info: cuda_types::cusparse::cusparseColorInfo_t,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cusparseDestroyColorInfo", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseCreatePruneInfo(
    writer: &mut (impl std::io::Write + ?Sized),
    info: *mut cuda_types::cusparse::pruneInfo_t,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cusparseCreatePruneInfo", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseDestroyPruneInfo(
    writer: &mut (impl std::io::Write + ?Sized),
    info: cuda_types::cusparse::pruneInfo_t,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cusparseDestroyPruneInfo", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseSgemvi(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    transA: cuda_types::cusparse::cusparseOperation_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    alpha: *const f32,
    A: *const f32,
    lda: ::core::ffi::c_int,
    nnz: ::core::ffi::c_int,
    xVal: *const f32,
    xInd: *const ::core::ffi::c_int,
    beta: *const f32,
    y: *mut f32,
    idxBase: cuda_types::cusparse::cusparseIndexBase_t,
    pBuffer: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseSgemvi", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transA, "cusparseSgemvi", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cusparseSgemvi", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cusparseSgemvi", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cusparseSgemvi", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cusparseSgemvi", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cusparseSgemvi", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnz), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnz, "cusparseSgemvi", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(xVal), ": ").as_bytes())?;
    crate::CudaDisplay::write(&xVal, "cusparseSgemvi", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(xInd), ": ").as_bytes())?;
    crate::CudaDisplay::write(&xInd, "cusparseSgemvi", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cusparseSgemvi", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cusparseSgemvi", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(idxBase), ": ").as_bytes())?;
    crate::CudaDisplay::write(&idxBase, "cusparseSgemvi", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBuffer), ": ").as_bytes())?;
    crate::CudaDisplay::write(&pBuffer, "cusparseSgemvi", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseSgemvi_bufferSize(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    transA: cuda_types::cusparse::cusparseOperation_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    nnz: ::core::ffi::c_int,
    pBufferSize: *mut ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseSgemvi_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transA, "cusparseSgemvi_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cusparseSgemvi_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cusparseSgemvi_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnz), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnz, "cusparseSgemvi_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBufferSize), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &pBufferSize,
        "cusparseSgemvi_bufferSize",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseDgemvi(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    transA: cuda_types::cusparse::cusparseOperation_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    alpha: *const f64,
    A: *const f64,
    lda: ::core::ffi::c_int,
    nnz: ::core::ffi::c_int,
    xVal: *const f64,
    xInd: *const ::core::ffi::c_int,
    beta: *const f64,
    y: *mut f64,
    idxBase: cuda_types::cusparse::cusparseIndexBase_t,
    pBuffer: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseDgemvi", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transA, "cusparseDgemvi", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cusparseDgemvi", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cusparseDgemvi", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cusparseDgemvi", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cusparseDgemvi", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cusparseDgemvi", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnz), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnz, "cusparseDgemvi", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(xVal), ": ").as_bytes())?;
    crate::CudaDisplay::write(&xVal, "cusparseDgemvi", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(xInd), ": ").as_bytes())?;
    crate::CudaDisplay::write(&xInd, "cusparseDgemvi", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cusparseDgemvi", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cusparseDgemvi", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(idxBase), ": ").as_bytes())?;
    crate::CudaDisplay::write(&idxBase, "cusparseDgemvi", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBuffer), ": ").as_bytes())?;
    crate::CudaDisplay::write(&pBuffer, "cusparseDgemvi", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseDgemvi_bufferSize(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    transA: cuda_types::cusparse::cusparseOperation_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    nnz: ::core::ffi::c_int,
    pBufferSize: *mut ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseDgemvi_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transA, "cusparseDgemvi_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cusparseDgemvi_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cusparseDgemvi_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnz), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnz, "cusparseDgemvi_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBufferSize), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &pBufferSize,
        "cusparseDgemvi_bufferSize",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseCgemvi(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    transA: cuda_types::cusparse::cusparseOperation_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    alpha: *const cuda_types::cusparse::cuComplex,
    A: *const cuda_types::cusparse::cuComplex,
    lda: ::core::ffi::c_int,
    nnz: ::core::ffi::c_int,
    xVal: *const cuda_types::cusparse::cuComplex,
    xInd: *const ::core::ffi::c_int,
    beta: *const cuda_types::cusparse::cuComplex,
    y: *mut cuda_types::cusparse::cuComplex,
    idxBase: cuda_types::cusparse::cusparseIndexBase_t,
    pBuffer: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseCgemvi", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transA, "cusparseCgemvi", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cusparseCgemvi", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cusparseCgemvi", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cusparseCgemvi", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cusparseCgemvi", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cusparseCgemvi", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnz), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnz, "cusparseCgemvi", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(xVal), ": ").as_bytes())?;
    crate::CudaDisplay::write(&xVal, "cusparseCgemvi", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(xInd), ": ").as_bytes())?;
    crate::CudaDisplay::write(&xInd, "cusparseCgemvi", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cusparseCgemvi", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cusparseCgemvi", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(idxBase), ": ").as_bytes())?;
    crate::CudaDisplay::write(&idxBase, "cusparseCgemvi", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBuffer), ": ").as_bytes())?;
    crate::CudaDisplay::write(&pBuffer, "cusparseCgemvi", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseCgemvi_bufferSize(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    transA: cuda_types::cusparse::cusparseOperation_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    nnz: ::core::ffi::c_int,
    pBufferSize: *mut ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseCgemvi_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transA, "cusparseCgemvi_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cusparseCgemvi_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cusparseCgemvi_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnz), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnz, "cusparseCgemvi_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBufferSize), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &pBufferSize,
        "cusparseCgemvi_bufferSize",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseZgemvi(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    transA: cuda_types::cusparse::cusparseOperation_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    alpha: *const cuda_types::cusparse::cuDoubleComplex,
    A: *const cuda_types::cusparse::cuDoubleComplex,
    lda: ::core::ffi::c_int,
    nnz: ::core::ffi::c_int,
    xVal: *const cuda_types::cusparse::cuDoubleComplex,
    xInd: *const ::core::ffi::c_int,
    beta: *const cuda_types::cusparse::cuDoubleComplex,
    y: *mut cuda_types::cusparse::cuDoubleComplex,
    idxBase: cuda_types::cusparse::cusparseIndexBase_t,
    pBuffer: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseZgemvi", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transA, "cusparseZgemvi", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cusparseZgemvi", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cusparseZgemvi", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cusparseZgemvi", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cusparseZgemvi", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cusparseZgemvi", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnz), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnz, "cusparseZgemvi", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(xVal), ": ").as_bytes())?;
    crate::CudaDisplay::write(&xVal, "cusparseZgemvi", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(xInd), ": ").as_bytes())?;
    crate::CudaDisplay::write(&xInd, "cusparseZgemvi", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cusparseZgemvi", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cusparseZgemvi", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(idxBase), ": ").as_bytes())?;
    crate::CudaDisplay::write(&idxBase, "cusparseZgemvi", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBuffer), ": ").as_bytes())?;
    crate::CudaDisplay::write(&pBuffer, "cusparseZgemvi", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseZgemvi_bufferSize(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    transA: cuda_types::cusparse::cusparseOperation_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    nnz: ::core::ffi::c_int,
    pBufferSize: *mut ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseZgemvi_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transA, "cusparseZgemvi_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cusparseZgemvi_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cusparseZgemvi_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnz), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnz, "cusparseZgemvi_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBufferSize), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &pBufferSize,
        "cusparseZgemvi_bufferSize",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseSbsrmv(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    dirA: cuda_types::cusparse::cusparseDirection_t,
    transA: cuda_types::cusparse::cusparseOperation_t,
    mb: ::core::ffi::c_int,
    nb: ::core::ffi::c_int,
    nnzb: ::core::ffi::c_int,
    alpha: *const f32,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    bsrSortedValA: *const f32,
    bsrSortedRowPtrA: *const ::core::ffi::c_int,
    bsrSortedColIndA: *const ::core::ffi::c_int,
    blockDim: ::core::ffi::c_int,
    x: *const f32,
    beta: *const f32,
    y: *mut f32,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseSbsrmv", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dirA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dirA, "cusparseSbsrmv", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transA, "cusparseSbsrmv", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(mb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&mb, "cusparseSbsrmv", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nb, "cusparseSbsrmv", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnzb, "cusparseSbsrmv", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cusparseSbsrmv", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseSbsrmv", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedValA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrSortedValA, "cusparseSbsrmv", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedRowPtrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrSortedRowPtrA, "cusparseSbsrmv", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedColIndA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrSortedColIndA, "cusparseSbsrmv", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(blockDim), ": ").as_bytes())?;
    crate::CudaDisplay::write(&blockDim, "cusparseSbsrmv", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cusparseSbsrmv", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cusparseSbsrmv", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cusparseSbsrmv", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseDbsrmv(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    dirA: cuda_types::cusparse::cusparseDirection_t,
    transA: cuda_types::cusparse::cusparseOperation_t,
    mb: ::core::ffi::c_int,
    nb: ::core::ffi::c_int,
    nnzb: ::core::ffi::c_int,
    alpha: *const f64,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    bsrSortedValA: *const f64,
    bsrSortedRowPtrA: *const ::core::ffi::c_int,
    bsrSortedColIndA: *const ::core::ffi::c_int,
    blockDim: ::core::ffi::c_int,
    x: *const f64,
    beta: *const f64,
    y: *mut f64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseDbsrmv", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dirA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dirA, "cusparseDbsrmv", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transA, "cusparseDbsrmv", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(mb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&mb, "cusparseDbsrmv", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nb, "cusparseDbsrmv", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnzb, "cusparseDbsrmv", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cusparseDbsrmv", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseDbsrmv", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedValA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrSortedValA, "cusparseDbsrmv", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedRowPtrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrSortedRowPtrA, "cusparseDbsrmv", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedColIndA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrSortedColIndA, "cusparseDbsrmv", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(blockDim), ": ").as_bytes())?;
    crate::CudaDisplay::write(&blockDim, "cusparseDbsrmv", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cusparseDbsrmv", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cusparseDbsrmv", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cusparseDbsrmv", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseCbsrmv(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    dirA: cuda_types::cusparse::cusparseDirection_t,
    transA: cuda_types::cusparse::cusparseOperation_t,
    mb: ::core::ffi::c_int,
    nb: ::core::ffi::c_int,
    nnzb: ::core::ffi::c_int,
    alpha: *const cuda_types::cusparse::cuComplex,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    bsrSortedValA: *const cuda_types::cusparse::cuComplex,
    bsrSortedRowPtrA: *const ::core::ffi::c_int,
    bsrSortedColIndA: *const ::core::ffi::c_int,
    blockDim: ::core::ffi::c_int,
    x: *const cuda_types::cusparse::cuComplex,
    beta: *const cuda_types::cusparse::cuComplex,
    y: *mut cuda_types::cusparse::cuComplex,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseCbsrmv", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dirA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dirA, "cusparseCbsrmv", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transA, "cusparseCbsrmv", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(mb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&mb, "cusparseCbsrmv", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nb, "cusparseCbsrmv", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnzb, "cusparseCbsrmv", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cusparseCbsrmv", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseCbsrmv", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedValA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrSortedValA, "cusparseCbsrmv", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedRowPtrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrSortedRowPtrA, "cusparseCbsrmv", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedColIndA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrSortedColIndA, "cusparseCbsrmv", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(blockDim), ": ").as_bytes())?;
    crate::CudaDisplay::write(&blockDim, "cusparseCbsrmv", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cusparseCbsrmv", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cusparseCbsrmv", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cusparseCbsrmv", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseZbsrmv(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    dirA: cuda_types::cusparse::cusparseDirection_t,
    transA: cuda_types::cusparse::cusparseOperation_t,
    mb: ::core::ffi::c_int,
    nb: ::core::ffi::c_int,
    nnzb: ::core::ffi::c_int,
    alpha: *const cuda_types::cusparse::cuDoubleComplex,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    bsrSortedValA: *const cuda_types::cusparse::cuDoubleComplex,
    bsrSortedRowPtrA: *const ::core::ffi::c_int,
    bsrSortedColIndA: *const ::core::ffi::c_int,
    blockDim: ::core::ffi::c_int,
    x: *const cuda_types::cusparse::cuDoubleComplex,
    beta: *const cuda_types::cusparse::cuDoubleComplex,
    y: *mut cuda_types::cusparse::cuDoubleComplex,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseZbsrmv", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dirA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dirA, "cusparseZbsrmv", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transA, "cusparseZbsrmv", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(mb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&mb, "cusparseZbsrmv", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nb, "cusparseZbsrmv", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnzb, "cusparseZbsrmv", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cusparseZbsrmv", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseZbsrmv", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedValA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrSortedValA, "cusparseZbsrmv", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedRowPtrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrSortedRowPtrA, "cusparseZbsrmv", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedColIndA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrSortedColIndA, "cusparseZbsrmv", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(blockDim), ": ").as_bytes())?;
    crate::CudaDisplay::write(&blockDim, "cusparseZbsrmv", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cusparseZbsrmv", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cusparseZbsrmv", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cusparseZbsrmv", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseSbsrxmv(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    dirA: cuda_types::cusparse::cusparseDirection_t,
    transA: cuda_types::cusparse::cusparseOperation_t,
    sizeOfMask: ::core::ffi::c_int,
    mb: ::core::ffi::c_int,
    nb: ::core::ffi::c_int,
    nnzb: ::core::ffi::c_int,
    alpha: *const f32,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    bsrSortedValA: *const f32,
    bsrSortedMaskPtrA: *const ::core::ffi::c_int,
    bsrSortedRowPtrA: *const ::core::ffi::c_int,
    bsrSortedEndPtrA: *const ::core::ffi::c_int,
    bsrSortedColIndA: *const ::core::ffi::c_int,
    blockDim: ::core::ffi::c_int,
    x: *const f32,
    beta: *const f32,
    y: *mut f32,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseSbsrxmv", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dirA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dirA, "cusparseSbsrxmv", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transA, "cusparseSbsrxmv", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(sizeOfMask), ": ").as_bytes())?;
    crate::CudaDisplay::write(&sizeOfMask, "cusparseSbsrxmv", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(mb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&mb, "cusparseSbsrxmv", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nb, "cusparseSbsrxmv", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnzb, "cusparseSbsrxmv", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cusparseSbsrxmv", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseSbsrxmv", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedValA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrSortedValA, "cusparseSbsrxmv", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedMaskPtrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrSortedMaskPtrA, "cusparseSbsrxmv", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedRowPtrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrSortedRowPtrA, "cusparseSbsrxmv", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedEndPtrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrSortedEndPtrA, "cusparseSbsrxmv", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedColIndA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrSortedColIndA, "cusparseSbsrxmv", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(blockDim), ": ").as_bytes())?;
    crate::CudaDisplay::write(&blockDim, "cusparseSbsrxmv", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cusparseSbsrxmv", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cusparseSbsrxmv", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cusparseSbsrxmv", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseDbsrxmv(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    dirA: cuda_types::cusparse::cusparseDirection_t,
    transA: cuda_types::cusparse::cusparseOperation_t,
    sizeOfMask: ::core::ffi::c_int,
    mb: ::core::ffi::c_int,
    nb: ::core::ffi::c_int,
    nnzb: ::core::ffi::c_int,
    alpha: *const f64,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    bsrSortedValA: *const f64,
    bsrSortedMaskPtrA: *const ::core::ffi::c_int,
    bsrSortedRowPtrA: *const ::core::ffi::c_int,
    bsrSortedEndPtrA: *const ::core::ffi::c_int,
    bsrSortedColIndA: *const ::core::ffi::c_int,
    blockDim: ::core::ffi::c_int,
    x: *const f64,
    beta: *const f64,
    y: *mut f64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseDbsrxmv", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dirA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dirA, "cusparseDbsrxmv", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transA, "cusparseDbsrxmv", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(sizeOfMask), ": ").as_bytes())?;
    crate::CudaDisplay::write(&sizeOfMask, "cusparseDbsrxmv", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(mb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&mb, "cusparseDbsrxmv", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nb, "cusparseDbsrxmv", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnzb, "cusparseDbsrxmv", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cusparseDbsrxmv", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseDbsrxmv", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedValA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrSortedValA, "cusparseDbsrxmv", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedMaskPtrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrSortedMaskPtrA, "cusparseDbsrxmv", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedRowPtrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrSortedRowPtrA, "cusparseDbsrxmv", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedEndPtrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrSortedEndPtrA, "cusparseDbsrxmv", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedColIndA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrSortedColIndA, "cusparseDbsrxmv", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(blockDim), ": ").as_bytes())?;
    crate::CudaDisplay::write(&blockDim, "cusparseDbsrxmv", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cusparseDbsrxmv", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cusparseDbsrxmv", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cusparseDbsrxmv", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseCbsrxmv(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    dirA: cuda_types::cusparse::cusparseDirection_t,
    transA: cuda_types::cusparse::cusparseOperation_t,
    sizeOfMask: ::core::ffi::c_int,
    mb: ::core::ffi::c_int,
    nb: ::core::ffi::c_int,
    nnzb: ::core::ffi::c_int,
    alpha: *const cuda_types::cusparse::cuComplex,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    bsrSortedValA: *const cuda_types::cusparse::cuComplex,
    bsrSortedMaskPtrA: *const ::core::ffi::c_int,
    bsrSortedRowPtrA: *const ::core::ffi::c_int,
    bsrSortedEndPtrA: *const ::core::ffi::c_int,
    bsrSortedColIndA: *const ::core::ffi::c_int,
    blockDim: ::core::ffi::c_int,
    x: *const cuda_types::cusparse::cuComplex,
    beta: *const cuda_types::cusparse::cuComplex,
    y: *mut cuda_types::cusparse::cuComplex,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseCbsrxmv", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dirA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dirA, "cusparseCbsrxmv", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transA, "cusparseCbsrxmv", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(sizeOfMask), ": ").as_bytes())?;
    crate::CudaDisplay::write(&sizeOfMask, "cusparseCbsrxmv", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(mb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&mb, "cusparseCbsrxmv", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nb, "cusparseCbsrxmv", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnzb, "cusparseCbsrxmv", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cusparseCbsrxmv", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseCbsrxmv", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedValA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrSortedValA, "cusparseCbsrxmv", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedMaskPtrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrSortedMaskPtrA, "cusparseCbsrxmv", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedRowPtrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrSortedRowPtrA, "cusparseCbsrxmv", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedEndPtrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrSortedEndPtrA, "cusparseCbsrxmv", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedColIndA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrSortedColIndA, "cusparseCbsrxmv", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(blockDim), ": ").as_bytes())?;
    crate::CudaDisplay::write(&blockDim, "cusparseCbsrxmv", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cusparseCbsrxmv", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cusparseCbsrxmv", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cusparseCbsrxmv", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseZbsrxmv(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    dirA: cuda_types::cusparse::cusparseDirection_t,
    transA: cuda_types::cusparse::cusparseOperation_t,
    sizeOfMask: ::core::ffi::c_int,
    mb: ::core::ffi::c_int,
    nb: ::core::ffi::c_int,
    nnzb: ::core::ffi::c_int,
    alpha: *const cuda_types::cusparse::cuDoubleComplex,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    bsrSortedValA: *const cuda_types::cusparse::cuDoubleComplex,
    bsrSortedMaskPtrA: *const ::core::ffi::c_int,
    bsrSortedRowPtrA: *const ::core::ffi::c_int,
    bsrSortedEndPtrA: *const ::core::ffi::c_int,
    bsrSortedColIndA: *const ::core::ffi::c_int,
    blockDim: ::core::ffi::c_int,
    x: *const cuda_types::cusparse::cuDoubleComplex,
    beta: *const cuda_types::cusparse::cuDoubleComplex,
    y: *mut cuda_types::cusparse::cuDoubleComplex,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseZbsrxmv", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dirA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dirA, "cusparseZbsrxmv", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transA, "cusparseZbsrxmv", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(sizeOfMask), ": ").as_bytes())?;
    crate::CudaDisplay::write(&sizeOfMask, "cusparseZbsrxmv", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(mb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&mb, "cusparseZbsrxmv", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nb, "cusparseZbsrxmv", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnzb, "cusparseZbsrxmv", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cusparseZbsrxmv", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseZbsrxmv", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedValA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrSortedValA, "cusparseZbsrxmv", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedMaskPtrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrSortedMaskPtrA, "cusparseZbsrxmv", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedRowPtrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrSortedRowPtrA, "cusparseZbsrxmv", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedEndPtrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrSortedEndPtrA, "cusparseZbsrxmv", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedColIndA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrSortedColIndA, "cusparseZbsrxmv", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(blockDim), ": ").as_bytes())?;
    crate::CudaDisplay::write(&blockDim, "cusparseZbsrxmv", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cusparseZbsrxmv", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cusparseZbsrxmv", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(y), ": ").as_bytes())?;
    crate::CudaDisplay::write(&y, "cusparseZbsrxmv", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseXbsrsv2_zeroPivot(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    info: cuda_types::cusparse::bsrsv2Info_t,
    position: *mut ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseXbsrsv2_zeroPivot", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cusparseXbsrsv2_zeroPivot", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(position), ": ").as_bytes())?;
    crate::CudaDisplay::write(&position, "cusparseXbsrsv2_zeroPivot", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseSbsrsv2_bufferSize(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    dirA: cuda_types::cusparse::cusparseDirection_t,
    transA: cuda_types::cusparse::cusparseOperation_t,
    mb: ::core::ffi::c_int,
    nnzb: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    bsrSortedValA: *mut f32,
    bsrSortedRowPtrA: *const ::core::ffi::c_int,
    bsrSortedColIndA: *const ::core::ffi::c_int,
    blockDim: ::core::ffi::c_int,
    info: cuda_types::cusparse::bsrsv2Info_t,
    pBufferSizeInBytes: *mut ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseSbsrsv2_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dirA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dirA, "cusparseSbsrsv2_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transA, "cusparseSbsrsv2_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(mb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&mb, "cusparseSbsrsv2_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnzb, "cusparseSbsrsv2_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseSbsrsv2_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedValA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedValA,
        "cusparseSbsrsv2_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedRowPtrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedRowPtrA,
        "cusparseSbsrsv2_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedColIndA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedColIndA,
        "cusparseSbsrsv2_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(blockDim), ": ").as_bytes())?;
    crate::CudaDisplay::write(&blockDim, "cusparseSbsrsv2_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cusparseSbsrsv2_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBufferSizeInBytes), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &pBufferSizeInBytes,
        "cusparseSbsrsv2_bufferSize",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseDbsrsv2_bufferSize(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    dirA: cuda_types::cusparse::cusparseDirection_t,
    transA: cuda_types::cusparse::cusparseOperation_t,
    mb: ::core::ffi::c_int,
    nnzb: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    bsrSortedValA: *mut f64,
    bsrSortedRowPtrA: *const ::core::ffi::c_int,
    bsrSortedColIndA: *const ::core::ffi::c_int,
    blockDim: ::core::ffi::c_int,
    info: cuda_types::cusparse::bsrsv2Info_t,
    pBufferSizeInBytes: *mut ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseDbsrsv2_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dirA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dirA, "cusparseDbsrsv2_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transA, "cusparseDbsrsv2_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(mb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&mb, "cusparseDbsrsv2_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnzb, "cusparseDbsrsv2_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseDbsrsv2_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedValA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedValA,
        "cusparseDbsrsv2_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedRowPtrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedRowPtrA,
        "cusparseDbsrsv2_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedColIndA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedColIndA,
        "cusparseDbsrsv2_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(blockDim), ": ").as_bytes())?;
    crate::CudaDisplay::write(&blockDim, "cusparseDbsrsv2_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cusparseDbsrsv2_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBufferSizeInBytes), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &pBufferSizeInBytes,
        "cusparseDbsrsv2_bufferSize",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseCbsrsv2_bufferSize(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    dirA: cuda_types::cusparse::cusparseDirection_t,
    transA: cuda_types::cusparse::cusparseOperation_t,
    mb: ::core::ffi::c_int,
    nnzb: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    bsrSortedValA: *mut cuda_types::cusparse::cuComplex,
    bsrSortedRowPtrA: *const ::core::ffi::c_int,
    bsrSortedColIndA: *const ::core::ffi::c_int,
    blockDim: ::core::ffi::c_int,
    info: cuda_types::cusparse::bsrsv2Info_t,
    pBufferSizeInBytes: *mut ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseCbsrsv2_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dirA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dirA, "cusparseCbsrsv2_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transA, "cusparseCbsrsv2_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(mb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&mb, "cusparseCbsrsv2_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnzb, "cusparseCbsrsv2_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseCbsrsv2_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedValA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedValA,
        "cusparseCbsrsv2_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedRowPtrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedRowPtrA,
        "cusparseCbsrsv2_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedColIndA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedColIndA,
        "cusparseCbsrsv2_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(blockDim), ": ").as_bytes())?;
    crate::CudaDisplay::write(&blockDim, "cusparseCbsrsv2_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cusparseCbsrsv2_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBufferSizeInBytes), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &pBufferSizeInBytes,
        "cusparseCbsrsv2_bufferSize",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseZbsrsv2_bufferSize(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    dirA: cuda_types::cusparse::cusparseDirection_t,
    transA: cuda_types::cusparse::cusparseOperation_t,
    mb: ::core::ffi::c_int,
    nnzb: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    bsrSortedValA: *mut cuda_types::cusparse::cuDoubleComplex,
    bsrSortedRowPtrA: *const ::core::ffi::c_int,
    bsrSortedColIndA: *const ::core::ffi::c_int,
    blockDim: ::core::ffi::c_int,
    info: cuda_types::cusparse::bsrsv2Info_t,
    pBufferSizeInBytes: *mut ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseZbsrsv2_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dirA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dirA, "cusparseZbsrsv2_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transA, "cusparseZbsrsv2_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(mb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&mb, "cusparseZbsrsv2_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnzb, "cusparseZbsrsv2_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseZbsrsv2_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedValA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedValA,
        "cusparseZbsrsv2_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedRowPtrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedRowPtrA,
        "cusparseZbsrsv2_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedColIndA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedColIndA,
        "cusparseZbsrsv2_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(blockDim), ": ").as_bytes())?;
    crate::CudaDisplay::write(&blockDim, "cusparseZbsrsv2_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cusparseZbsrsv2_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBufferSizeInBytes), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &pBufferSizeInBytes,
        "cusparseZbsrsv2_bufferSize",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseSbsrsv2_bufferSizeExt(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    dirA: cuda_types::cusparse::cusparseDirection_t,
    transA: cuda_types::cusparse::cusparseOperation_t,
    mb: ::core::ffi::c_int,
    nnzb: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    bsrSortedValA: *mut f32,
    bsrSortedRowPtrA: *const ::core::ffi::c_int,
    bsrSortedColIndA: *const ::core::ffi::c_int,
    blockSize: ::core::ffi::c_int,
    info: cuda_types::cusparse::bsrsv2Info_t,
    pBufferSize: *mut usize,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &handle,
        "cusparseSbsrsv2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dirA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dirA, "cusparseSbsrsv2_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &transA,
        "cusparseSbsrsv2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(mb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&mb, "cusparseSbsrsv2_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnzb, "cusparseSbsrsv2_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &descrA,
        "cusparseSbsrsv2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedValA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedValA,
        "cusparseSbsrsv2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedRowPtrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedRowPtrA,
        "cusparseSbsrsv2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedColIndA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedColIndA,
        "cusparseSbsrsv2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(blockSize), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &blockSize,
        "cusparseSbsrsv2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cusparseSbsrsv2_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBufferSize), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &pBufferSize,
        "cusparseSbsrsv2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseDbsrsv2_bufferSizeExt(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    dirA: cuda_types::cusparse::cusparseDirection_t,
    transA: cuda_types::cusparse::cusparseOperation_t,
    mb: ::core::ffi::c_int,
    nnzb: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    bsrSortedValA: *mut f64,
    bsrSortedRowPtrA: *const ::core::ffi::c_int,
    bsrSortedColIndA: *const ::core::ffi::c_int,
    blockSize: ::core::ffi::c_int,
    info: cuda_types::cusparse::bsrsv2Info_t,
    pBufferSize: *mut usize,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &handle,
        "cusparseDbsrsv2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dirA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dirA, "cusparseDbsrsv2_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &transA,
        "cusparseDbsrsv2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(mb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&mb, "cusparseDbsrsv2_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnzb, "cusparseDbsrsv2_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &descrA,
        "cusparseDbsrsv2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedValA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedValA,
        "cusparseDbsrsv2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedRowPtrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedRowPtrA,
        "cusparseDbsrsv2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedColIndA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedColIndA,
        "cusparseDbsrsv2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(blockSize), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &blockSize,
        "cusparseDbsrsv2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cusparseDbsrsv2_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBufferSize), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &pBufferSize,
        "cusparseDbsrsv2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseCbsrsv2_bufferSizeExt(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    dirA: cuda_types::cusparse::cusparseDirection_t,
    transA: cuda_types::cusparse::cusparseOperation_t,
    mb: ::core::ffi::c_int,
    nnzb: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    bsrSortedValA: *mut cuda_types::cusparse::cuComplex,
    bsrSortedRowPtrA: *const ::core::ffi::c_int,
    bsrSortedColIndA: *const ::core::ffi::c_int,
    blockSize: ::core::ffi::c_int,
    info: cuda_types::cusparse::bsrsv2Info_t,
    pBufferSize: *mut usize,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &handle,
        "cusparseCbsrsv2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dirA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dirA, "cusparseCbsrsv2_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &transA,
        "cusparseCbsrsv2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(mb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&mb, "cusparseCbsrsv2_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnzb, "cusparseCbsrsv2_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &descrA,
        "cusparseCbsrsv2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedValA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedValA,
        "cusparseCbsrsv2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedRowPtrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedRowPtrA,
        "cusparseCbsrsv2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedColIndA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedColIndA,
        "cusparseCbsrsv2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(blockSize), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &blockSize,
        "cusparseCbsrsv2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cusparseCbsrsv2_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBufferSize), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &pBufferSize,
        "cusparseCbsrsv2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseZbsrsv2_bufferSizeExt(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    dirA: cuda_types::cusparse::cusparseDirection_t,
    transA: cuda_types::cusparse::cusparseOperation_t,
    mb: ::core::ffi::c_int,
    nnzb: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    bsrSortedValA: *mut cuda_types::cusparse::cuDoubleComplex,
    bsrSortedRowPtrA: *const ::core::ffi::c_int,
    bsrSortedColIndA: *const ::core::ffi::c_int,
    blockSize: ::core::ffi::c_int,
    info: cuda_types::cusparse::bsrsv2Info_t,
    pBufferSize: *mut usize,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &handle,
        "cusparseZbsrsv2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dirA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dirA, "cusparseZbsrsv2_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &transA,
        "cusparseZbsrsv2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(mb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&mb, "cusparseZbsrsv2_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnzb, "cusparseZbsrsv2_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &descrA,
        "cusparseZbsrsv2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedValA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedValA,
        "cusparseZbsrsv2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedRowPtrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedRowPtrA,
        "cusparseZbsrsv2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedColIndA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedColIndA,
        "cusparseZbsrsv2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(blockSize), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &blockSize,
        "cusparseZbsrsv2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cusparseZbsrsv2_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBufferSize), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &pBufferSize,
        "cusparseZbsrsv2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseSbsrsv2_analysis(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    dirA: cuda_types::cusparse::cusparseDirection_t,
    transA: cuda_types::cusparse::cusparseOperation_t,
    mb: ::core::ffi::c_int,
    nnzb: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    bsrSortedValA: *const f32,
    bsrSortedRowPtrA: *const ::core::ffi::c_int,
    bsrSortedColIndA: *const ::core::ffi::c_int,
    blockDim: ::core::ffi::c_int,
    info: cuda_types::cusparse::bsrsv2Info_t,
    policy: cuda_types::cusparse::cusparseSolvePolicy_t,
    pBuffer: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseSbsrsv2_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dirA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dirA, "cusparseSbsrsv2_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transA, "cusparseSbsrsv2_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(mb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&mb, "cusparseSbsrsv2_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnzb, "cusparseSbsrsv2_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseSbsrsv2_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedValA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedValA,
        "cusparseSbsrsv2_analysis",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedRowPtrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedRowPtrA,
        "cusparseSbsrsv2_analysis",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedColIndA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedColIndA,
        "cusparseSbsrsv2_analysis",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(blockDim), ": ").as_bytes())?;
    crate::CudaDisplay::write(&blockDim, "cusparseSbsrsv2_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cusparseSbsrsv2_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(policy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&policy, "cusparseSbsrsv2_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBuffer), ": ").as_bytes())?;
    crate::CudaDisplay::write(&pBuffer, "cusparseSbsrsv2_analysis", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseDbsrsv2_analysis(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    dirA: cuda_types::cusparse::cusparseDirection_t,
    transA: cuda_types::cusparse::cusparseOperation_t,
    mb: ::core::ffi::c_int,
    nnzb: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    bsrSortedValA: *const f64,
    bsrSortedRowPtrA: *const ::core::ffi::c_int,
    bsrSortedColIndA: *const ::core::ffi::c_int,
    blockDim: ::core::ffi::c_int,
    info: cuda_types::cusparse::bsrsv2Info_t,
    policy: cuda_types::cusparse::cusparseSolvePolicy_t,
    pBuffer: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseDbsrsv2_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dirA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dirA, "cusparseDbsrsv2_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transA, "cusparseDbsrsv2_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(mb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&mb, "cusparseDbsrsv2_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnzb, "cusparseDbsrsv2_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseDbsrsv2_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedValA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedValA,
        "cusparseDbsrsv2_analysis",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedRowPtrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedRowPtrA,
        "cusparseDbsrsv2_analysis",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedColIndA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedColIndA,
        "cusparseDbsrsv2_analysis",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(blockDim), ": ").as_bytes())?;
    crate::CudaDisplay::write(&blockDim, "cusparseDbsrsv2_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cusparseDbsrsv2_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(policy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&policy, "cusparseDbsrsv2_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBuffer), ": ").as_bytes())?;
    crate::CudaDisplay::write(&pBuffer, "cusparseDbsrsv2_analysis", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseCbsrsv2_analysis(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    dirA: cuda_types::cusparse::cusparseDirection_t,
    transA: cuda_types::cusparse::cusparseOperation_t,
    mb: ::core::ffi::c_int,
    nnzb: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    bsrSortedValA: *const cuda_types::cusparse::cuComplex,
    bsrSortedRowPtrA: *const ::core::ffi::c_int,
    bsrSortedColIndA: *const ::core::ffi::c_int,
    blockDim: ::core::ffi::c_int,
    info: cuda_types::cusparse::bsrsv2Info_t,
    policy: cuda_types::cusparse::cusparseSolvePolicy_t,
    pBuffer: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseCbsrsv2_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dirA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dirA, "cusparseCbsrsv2_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transA, "cusparseCbsrsv2_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(mb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&mb, "cusparseCbsrsv2_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnzb, "cusparseCbsrsv2_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseCbsrsv2_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedValA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedValA,
        "cusparseCbsrsv2_analysis",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedRowPtrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedRowPtrA,
        "cusparseCbsrsv2_analysis",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedColIndA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedColIndA,
        "cusparseCbsrsv2_analysis",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(blockDim), ": ").as_bytes())?;
    crate::CudaDisplay::write(&blockDim, "cusparseCbsrsv2_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cusparseCbsrsv2_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(policy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&policy, "cusparseCbsrsv2_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBuffer), ": ").as_bytes())?;
    crate::CudaDisplay::write(&pBuffer, "cusparseCbsrsv2_analysis", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseZbsrsv2_analysis(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    dirA: cuda_types::cusparse::cusparseDirection_t,
    transA: cuda_types::cusparse::cusparseOperation_t,
    mb: ::core::ffi::c_int,
    nnzb: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    bsrSortedValA: *const cuda_types::cusparse::cuDoubleComplex,
    bsrSortedRowPtrA: *const ::core::ffi::c_int,
    bsrSortedColIndA: *const ::core::ffi::c_int,
    blockDim: ::core::ffi::c_int,
    info: cuda_types::cusparse::bsrsv2Info_t,
    policy: cuda_types::cusparse::cusparseSolvePolicy_t,
    pBuffer: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseZbsrsv2_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dirA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dirA, "cusparseZbsrsv2_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transA, "cusparseZbsrsv2_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(mb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&mb, "cusparseZbsrsv2_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnzb, "cusparseZbsrsv2_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseZbsrsv2_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedValA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedValA,
        "cusparseZbsrsv2_analysis",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedRowPtrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedRowPtrA,
        "cusparseZbsrsv2_analysis",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedColIndA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedColIndA,
        "cusparseZbsrsv2_analysis",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(blockDim), ": ").as_bytes())?;
    crate::CudaDisplay::write(&blockDim, "cusparseZbsrsv2_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cusparseZbsrsv2_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(policy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&policy, "cusparseZbsrsv2_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBuffer), ": ").as_bytes())?;
    crate::CudaDisplay::write(&pBuffer, "cusparseZbsrsv2_analysis", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseSbsrsv2_solve(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    dirA: cuda_types::cusparse::cusparseDirection_t,
    transA: cuda_types::cusparse::cusparseOperation_t,
    mb: ::core::ffi::c_int,
    nnzb: ::core::ffi::c_int,
    alpha: *const f32,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    bsrSortedValA: *const f32,
    bsrSortedRowPtrA: *const ::core::ffi::c_int,
    bsrSortedColIndA: *const ::core::ffi::c_int,
    blockDim: ::core::ffi::c_int,
    info: cuda_types::cusparse::bsrsv2Info_t,
    f: *const f32,
    x: *mut f32,
    policy: cuda_types::cusparse::cusparseSolvePolicy_t,
    pBuffer: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseSbsrsv2_solve", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dirA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dirA, "cusparseSbsrsv2_solve", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transA, "cusparseSbsrsv2_solve", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(mb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&mb, "cusparseSbsrsv2_solve", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnzb, "cusparseSbsrsv2_solve", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cusparseSbsrsv2_solve", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseSbsrsv2_solve", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedValA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrSortedValA, "cusparseSbsrsv2_solve", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedRowPtrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedRowPtrA,
        "cusparseSbsrsv2_solve",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedColIndA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedColIndA,
        "cusparseSbsrsv2_solve",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(blockDim), ": ").as_bytes())?;
    crate::CudaDisplay::write(&blockDim, "cusparseSbsrsv2_solve", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cusparseSbsrsv2_solve", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(f), ": ").as_bytes())?;
    crate::CudaDisplay::write(&f, "cusparseSbsrsv2_solve", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cusparseSbsrsv2_solve", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(policy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&policy, "cusparseSbsrsv2_solve", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBuffer), ": ").as_bytes())?;
    crate::CudaDisplay::write(&pBuffer, "cusparseSbsrsv2_solve", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseDbsrsv2_solve(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    dirA: cuda_types::cusparse::cusparseDirection_t,
    transA: cuda_types::cusparse::cusparseOperation_t,
    mb: ::core::ffi::c_int,
    nnzb: ::core::ffi::c_int,
    alpha: *const f64,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    bsrSortedValA: *const f64,
    bsrSortedRowPtrA: *const ::core::ffi::c_int,
    bsrSortedColIndA: *const ::core::ffi::c_int,
    blockDim: ::core::ffi::c_int,
    info: cuda_types::cusparse::bsrsv2Info_t,
    f: *const f64,
    x: *mut f64,
    policy: cuda_types::cusparse::cusparseSolvePolicy_t,
    pBuffer: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseDbsrsv2_solve", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dirA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dirA, "cusparseDbsrsv2_solve", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transA, "cusparseDbsrsv2_solve", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(mb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&mb, "cusparseDbsrsv2_solve", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnzb, "cusparseDbsrsv2_solve", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cusparseDbsrsv2_solve", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseDbsrsv2_solve", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedValA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrSortedValA, "cusparseDbsrsv2_solve", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedRowPtrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedRowPtrA,
        "cusparseDbsrsv2_solve",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedColIndA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedColIndA,
        "cusparseDbsrsv2_solve",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(blockDim), ": ").as_bytes())?;
    crate::CudaDisplay::write(&blockDim, "cusparseDbsrsv2_solve", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cusparseDbsrsv2_solve", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(f), ": ").as_bytes())?;
    crate::CudaDisplay::write(&f, "cusparseDbsrsv2_solve", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cusparseDbsrsv2_solve", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(policy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&policy, "cusparseDbsrsv2_solve", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBuffer), ": ").as_bytes())?;
    crate::CudaDisplay::write(&pBuffer, "cusparseDbsrsv2_solve", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseCbsrsv2_solve(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    dirA: cuda_types::cusparse::cusparseDirection_t,
    transA: cuda_types::cusparse::cusparseOperation_t,
    mb: ::core::ffi::c_int,
    nnzb: ::core::ffi::c_int,
    alpha: *const cuda_types::cusparse::cuComplex,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    bsrSortedValA: *const cuda_types::cusparse::cuComplex,
    bsrSortedRowPtrA: *const ::core::ffi::c_int,
    bsrSortedColIndA: *const ::core::ffi::c_int,
    blockDim: ::core::ffi::c_int,
    info: cuda_types::cusparse::bsrsv2Info_t,
    f: *const cuda_types::cusparse::cuComplex,
    x: *mut cuda_types::cusparse::cuComplex,
    policy: cuda_types::cusparse::cusparseSolvePolicy_t,
    pBuffer: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseCbsrsv2_solve", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dirA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dirA, "cusparseCbsrsv2_solve", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transA, "cusparseCbsrsv2_solve", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(mb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&mb, "cusparseCbsrsv2_solve", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnzb, "cusparseCbsrsv2_solve", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cusparseCbsrsv2_solve", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseCbsrsv2_solve", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedValA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrSortedValA, "cusparseCbsrsv2_solve", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedRowPtrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedRowPtrA,
        "cusparseCbsrsv2_solve",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedColIndA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedColIndA,
        "cusparseCbsrsv2_solve",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(blockDim), ": ").as_bytes())?;
    crate::CudaDisplay::write(&blockDim, "cusparseCbsrsv2_solve", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cusparseCbsrsv2_solve", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(f), ": ").as_bytes())?;
    crate::CudaDisplay::write(&f, "cusparseCbsrsv2_solve", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cusparseCbsrsv2_solve", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(policy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&policy, "cusparseCbsrsv2_solve", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBuffer), ": ").as_bytes())?;
    crate::CudaDisplay::write(&pBuffer, "cusparseCbsrsv2_solve", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseZbsrsv2_solve(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    dirA: cuda_types::cusparse::cusparseDirection_t,
    transA: cuda_types::cusparse::cusparseOperation_t,
    mb: ::core::ffi::c_int,
    nnzb: ::core::ffi::c_int,
    alpha: *const cuda_types::cusparse::cuDoubleComplex,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    bsrSortedValA: *const cuda_types::cusparse::cuDoubleComplex,
    bsrSortedRowPtrA: *const ::core::ffi::c_int,
    bsrSortedColIndA: *const ::core::ffi::c_int,
    blockDim: ::core::ffi::c_int,
    info: cuda_types::cusparse::bsrsv2Info_t,
    f: *const cuda_types::cusparse::cuDoubleComplex,
    x: *mut cuda_types::cusparse::cuDoubleComplex,
    policy: cuda_types::cusparse::cusparseSolvePolicy_t,
    pBuffer: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseZbsrsv2_solve", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dirA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dirA, "cusparseZbsrsv2_solve", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transA, "cusparseZbsrsv2_solve", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(mb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&mb, "cusparseZbsrsv2_solve", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnzb, "cusparseZbsrsv2_solve", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cusparseZbsrsv2_solve", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseZbsrsv2_solve", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedValA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrSortedValA, "cusparseZbsrsv2_solve", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedRowPtrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedRowPtrA,
        "cusparseZbsrsv2_solve",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedColIndA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedColIndA,
        "cusparseZbsrsv2_solve",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(blockDim), ": ").as_bytes())?;
    crate::CudaDisplay::write(&blockDim, "cusparseZbsrsv2_solve", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cusparseZbsrsv2_solve", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(f), ": ").as_bytes())?;
    crate::CudaDisplay::write(&f, "cusparseZbsrsv2_solve", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cusparseZbsrsv2_solve", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(policy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&policy, "cusparseZbsrsv2_solve", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBuffer), ": ").as_bytes())?;
    crate::CudaDisplay::write(&pBuffer, "cusparseZbsrsv2_solve", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseSbsrmm(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    dirA: cuda_types::cusparse::cusparseDirection_t,
    transA: cuda_types::cusparse::cusparseOperation_t,
    transB: cuda_types::cusparse::cusparseOperation_t,
    mb: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    kb: ::core::ffi::c_int,
    nnzb: ::core::ffi::c_int,
    alpha: *const f32,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    bsrSortedValA: *const f32,
    bsrSortedRowPtrA: *const ::core::ffi::c_int,
    bsrSortedColIndA: *const ::core::ffi::c_int,
    blockSize: ::core::ffi::c_int,
    B: *const f32,
    ldb: ::core::ffi::c_int,
    beta: *const f32,
    C: *mut f32,
    ldc: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseSbsrmm", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dirA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dirA, "cusparseSbsrmm", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transA, "cusparseSbsrmm", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transB), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transB, "cusparseSbsrmm", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(mb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&mb, "cusparseSbsrmm", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cusparseSbsrmm", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(kb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&kb, "cusparseSbsrmm", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnzb, "cusparseSbsrmm", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cusparseSbsrmm", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseSbsrmm", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedValA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrSortedValA, "cusparseSbsrmm", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedRowPtrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrSortedRowPtrA, "cusparseSbsrmm", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedColIndA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrSortedColIndA, "cusparseSbsrmm", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(blockSize), ": ").as_bytes())?;
    crate::CudaDisplay::write(&blockSize, "cusparseSbsrmm", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(B), ": ").as_bytes())?;
    crate::CudaDisplay::write(&B, "cusparseSbsrmm", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cusparseSbsrmm", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cusparseSbsrmm", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(C), ": ").as_bytes())?;
    crate::CudaDisplay::write(&C, "cusparseSbsrmm", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cusparseSbsrmm", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseDbsrmm(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    dirA: cuda_types::cusparse::cusparseDirection_t,
    transA: cuda_types::cusparse::cusparseOperation_t,
    transB: cuda_types::cusparse::cusparseOperation_t,
    mb: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    kb: ::core::ffi::c_int,
    nnzb: ::core::ffi::c_int,
    alpha: *const f64,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    bsrSortedValA: *const f64,
    bsrSortedRowPtrA: *const ::core::ffi::c_int,
    bsrSortedColIndA: *const ::core::ffi::c_int,
    blockSize: ::core::ffi::c_int,
    B: *const f64,
    ldb: ::core::ffi::c_int,
    beta: *const f64,
    C: *mut f64,
    ldc: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseDbsrmm", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dirA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dirA, "cusparseDbsrmm", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transA, "cusparseDbsrmm", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transB), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transB, "cusparseDbsrmm", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(mb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&mb, "cusparseDbsrmm", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cusparseDbsrmm", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(kb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&kb, "cusparseDbsrmm", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnzb, "cusparseDbsrmm", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cusparseDbsrmm", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseDbsrmm", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedValA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrSortedValA, "cusparseDbsrmm", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedRowPtrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrSortedRowPtrA, "cusparseDbsrmm", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedColIndA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrSortedColIndA, "cusparseDbsrmm", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(blockSize), ": ").as_bytes())?;
    crate::CudaDisplay::write(&blockSize, "cusparseDbsrmm", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(B), ": ").as_bytes())?;
    crate::CudaDisplay::write(&B, "cusparseDbsrmm", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cusparseDbsrmm", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cusparseDbsrmm", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(C), ": ").as_bytes())?;
    crate::CudaDisplay::write(&C, "cusparseDbsrmm", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cusparseDbsrmm", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseCbsrmm(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    dirA: cuda_types::cusparse::cusparseDirection_t,
    transA: cuda_types::cusparse::cusparseOperation_t,
    transB: cuda_types::cusparse::cusparseOperation_t,
    mb: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    kb: ::core::ffi::c_int,
    nnzb: ::core::ffi::c_int,
    alpha: *const cuda_types::cusparse::cuComplex,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    bsrSortedValA: *const cuda_types::cusparse::cuComplex,
    bsrSortedRowPtrA: *const ::core::ffi::c_int,
    bsrSortedColIndA: *const ::core::ffi::c_int,
    blockSize: ::core::ffi::c_int,
    B: *const cuda_types::cusparse::cuComplex,
    ldb: ::core::ffi::c_int,
    beta: *const cuda_types::cusparse::cuComplex,
    C: *mut cuda_types::cusparse::cuComplex,
    ldc: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseCbsrmm", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dirA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dirA, "cusparseCbsrmm", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transA, "cusparseCbsrmm", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transB), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transB, "cusparseCbsrmm", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(mb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&mb, "cusparseCbsrmm", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cusparseCbsrmm", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(kb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&kb, "cusparseCbsrmm", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnzb, "cusparseCbsrmm", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cusparseCbsrmm", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseCbsrmm", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedValA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrSortedValA, "cusparseCbsrmm", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedRowPtrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrSortedRowPtrA, "cusparseCbsrmm", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedColIndA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrSortedColIndA, "cusparseCbsrmm", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(blockSize), ": ").as_bytes())?;
    crate::CudaDisplay::write(&blockSize, "cusparseCbsrmm", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(B), ": ").as_bytes())?;
    crate::CudaDisplay::write(&B, "cusparseCbsrmm", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cusparseCbsrmm", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cusparseCbsrmm", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(C), ": ").as_bytes())?;
    crate::CudaDisplay::write(&C, "cusparseCbsrmm", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cusparseCbsrmm", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseZbsrmm(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    dirA: cuda_types::cusparse::cusparseDirection_t,
    transA: cuda_types::cusparse::cusparseOperation_t,
    transB: cuda_types::cusparse::cusparseOperation_t,
    mb: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    kb: ::core::ffi::c_int,
    nnzb: ::core::ffi::c_int,
    alpha: *const cuda_types::cusparse::cuDoubleComplex,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    bsrSortedValA: *const cuda_types::cusparse::cuDoubleComplex,
    bsrSortedRowPtrA: *const ::core::ffi::c_int,
    bsrSortedColIndA: *const ::core::ffi::c_int,
    blockSize: ::core::ffi::c_int,
    B: *const cuda_types::cusparse::cuDoubleComplex,
    ldb: ::core::ffi::c_int,
    beta: *const cuda_types::cusparse::cuDoubleComplex,
    C: *mut cuda_types::cusparse::cuDoubleComplex,
    ldc: ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseZbsrmm", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dirA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dirA, "cusparseZbsrmm", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transA, "cusparseZbsrmm", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transB), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transB, "cusparseZbsrmm", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(mb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&mb, "cusparseZbsrmm", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cusparseZbsrmm", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(kb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&kb, "cusparseZbsrmm", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnzb, "cusparseZbsrmm", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cusparseZbsrmm", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseZbsrmm", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedValA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrSortedValA, "cusparseZbsrmm", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedRowPtrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrSortedRowPtrA, "cusparseZbsrmm", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedColIndA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrSortedColIndA, "cusparseZbsrmm", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(blockSize), ": ").as_bytes())?;
    crate::CudaDisplay::write(&blockSize, "cusparseZbsrmm", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(B), ": ").as_bytes())?;
    crate::CudaDisplay::write(&B, "cusparseZbsrmm", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cusparseZbsrmm", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cusparseZbsrmm", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(C), ": ").as_bytes())?;
    crate::CudaDisplay::write(&C, "cusparseZbsrmm", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldc), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldc, "cusparseZbsrmm", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseXbsrsm2_zeroPivot(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    info: cuda_types::cusparse::bsrsm2Info_t,
    position: *mut ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseXbsrsm2_zeroPivot", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cusparseXbsrsm2_zeroPivot", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(position), ": ").as_bytes())?;
    crate::CudaDisplay::write(&position, "cusparseXbsrsm2_zeroPivot", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseSbsrsm2_bufferSize(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    dirA: cuda_types::cusparse::cusparseDirection_t,
    transA: cuda_types::cusparse::cusparseOperation_t,
    transXY: cuda_types::cusparse::cusparseOperation_t,
    mb: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    nnzb: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    bsrSortedVal: *mut f32,
    bsrSortedRowPtr: *const ::core::ffi::c_int,
    bsrSortedColInd: *const ::core::ffi::c_int,
    blockSize: ::core::ffi::c_int,
    info: cuda_types::cusparse::bsrsm2Info_t,
    pBufferSizeInBytes: *mut ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseSbsrsm2_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dirA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dirA, "cusparseSbsrsm2_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transA, "cusparseSbsrsm2_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transXY), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transXY, "cusparseSbsrsm2_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(mb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&mb, "cusparseSbsrsm2_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cusparseSbsrsm2_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnzb, "cusparseSbsrsm2_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseSbsrsm2_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedVal), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedVal,
        "cusparseSbsrsm2_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedRowPtr), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedRowPtr,
        "cusparseSbsrsm2_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedColInd), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedColInd,
        "cusparseSbsrsm2_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(blockSize), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &blockSize,
        "cusparseSbsrsm2_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cusparseSbsrsm2_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBufferSizeInBytes), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &pBufferSizeInBytes,
        "cusparseSbsrsm2_bufferSize",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseDbsrsm2_bufferSize(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    dirA: cuda_types::cusparse::cusparseDirection_t,
    transA: cuda_types::cusparse::cusparseOperation_t,
    transXY: cuda_types::cusparse::cusparseOperation_t,
    mb: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    nnzb: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    bsrSortedVal: *mut f64,
    bsrSortedRowPtr: *const ::core::ffi::c_int,
    bsrSortedColInd: *const ::core::ffi::c_int,
    blockSize: ::core::ffi::c_int,
    info: cuda_types::cusparse::bsrsm2Info_t,
    pBufferSizeInBytes: *mut ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseDbsrsm2_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dirA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dirA, "cusparseDbsrsm2_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transA, "cusparseDbsrsm2_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transXY), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transXY, "cusparseDbsrsm2_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(mb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&mb, "cusparseDbsrsm2_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cusparseDbsrsm2_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnzb, "cusparseDbsrsm2_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseDbsrsm2_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedVal), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedVal,
        "cusparseDbsrsm2_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedRowPtr), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedRowPtr,
        "cusparseDbsrsm2_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedColInd), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedColInd,
        "cusparseDbsrsm2_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(blockSize), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &blockSize,
        "cusparseDbsrsm2_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cusparseDbsrsm2_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBufferSizeInBytes), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &pBufferSizeInBytes,
        "cusparseDbsrsm2_bufferSize",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseCbsrsm2_bufferSize(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    dirA: cuda_types::cusparse::cusparseDirection_t,
    transA: cuda_types::cusparse::cusparseOperation_t,
    transXY: cuda_types::cusparse::cusparseOperation_t,
    mb: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    nnzb: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    bsrSortedVal: *mut cuda_types::cusparse::cuComplex,
    bsrSortedRowPtr: *const ::core::ffi::c_int,
    bsrSortedColInd: *const ::core::ffi::c_int,
    blockSize: ::core::ffi::c_int,
    info: cuda_types::cusparse::bsrsm2Info_t,
    pBufferSizeInBytes: *mut ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseCbsrsm2_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dirA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dirA, "cusparseCbsrsm2_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transA, "cusparseCbsrsm2_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transXY), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transXY, "cusparseCbsrsm2_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(mb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&mb, "cusparseCbsrsm2_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cusparseCbsrsm2_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnzb, "cusparseCbsrsm2_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseCbsrsm2_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedVal), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedVal,
        "cusparseCbsrsm2_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedRowPtr), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedRowPtr,
        "cusparseCbsrsm2_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedColInd), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedColInd,
        "cusparseCbsrsm2_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(blockSize), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &blockSize,
        "cusparseCbsrsm2_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cusparseCbsrsm2_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBufferSizeInBytes), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &pBufferSizeInBytes,
        "cusparseCbsrsm2_bufferSize",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseZbsrsm2_bufferSize(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    dirA: cuda_types::cusparse::cusparseDirection_t,
    transA: cuda_types::cusparse::cusparseOperation_t,
    transXY: cuda_types::cusparse::cusparseOperation_t,
    mb: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    nnzb: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    bsrSortedVal: *mut cuda_types::cusparse::cuDoubleComplex,
    bsrSortedRowPtr: *const ::core::ffi::c_int,
    bsrSortedColInd: *const ::core::ffi::c_int,
    blockSize: ::core::ffi::c_int,
    info: cuda_types::cusparse::bsrsm2Info_t,
    pBufferSizeInBytes: *mut ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseZbsrsm2_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dirA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dirA, "cusparseZbsrsm2_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transA, "cusparseZbsrsm2_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transXY), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transXY, "cusparseZbsrsm2_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(mb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&mb, "cusparseZbsrsm2_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cusparseZbsrsm2_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnzb, "cusparseZbsrsm2_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseZbsrsm2_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedVal), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedVal,
        "cusparseZbsrsm2_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedRowPtr), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedRowPtr,
        "cusparseZbsrsm2_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedColInd), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedColInd,
        "cusparseZbsrsm2_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(blockSize), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &blockSize,
        "cusparseZbsrsm2_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cusparseZbsrsm2_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBufferSizeInBytes), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &pBufferSizeInBytes,
        "cusparseZbsrsm2_bufferSize",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseSbsrsm2_bufferSizeExt(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    dirA: cuda_types::cusparse::cusparseDirection_t,
    transA: cuda_types::cusparse::cusparseOperation_t,
    transB: cuda_types::cusparse::cusparseOperation_t,
    mb: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    nnzb: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    bsrSortedVal: *mut f32,
    bsrSortedRowPtr: *const ::core::ffi::c_int,
    bsrSortedColInd: *const ::core::ffi::c_int,
    blockSize: ::core::ffi::c_int,
    info: cuda_types::cusparse::bsrsm2Info_t,
    pBufferSize: *mut usize,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &handle,
        "cusparseSbsrsm2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dirA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dirA, "cusparseSbsrsm2_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &transA,
        "cusparseSbsrsm2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transB), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &transB,
        "cusparseSbsrsm2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(mb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&mb, "cusparseSbsrsm2_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cusparseSbsrsm2_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnzb, "cusparseSbsrsm2_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &descrA,
        "cusparseSbsrsm2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedVal), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedVal,
        "cusparseSbsrsm2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedRowPtr), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedRowPtr,
        "cusparseSbsrsm2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedColInd), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedColInd,
        "cusparseSbsrsm2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(blockSize), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &blockSize,
        "cusparseSbsrsm2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cusparseSbsrsm2_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBufferSize), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &pBufferSize,
        "cusparseSbsrsm2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseDbsrsm2_bufferSizeExt(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    dirA: cuda_types::cusparse::cusparseDirection_t,
    transA: cuda_types::cusparse::cusparseOperation_t,
    transB: cuda_types::cusparse::cusparseOperation_t,
    mb: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    nnzb: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    bsrSortedVal: *mut f64,
    bsrSortedRowPtr: *const ::core::ffi::c_int,
    bsrSortedColInd: *const ::core::ffi::c_int,
    blockSize: ::core::ffi::c_int,
    info: cuda_types::cusparse::bsrsm2Info_t,
    pBufferSize: *mut usize,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &handle,
        "cusparseDbsrsm2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dirA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dirA, "cusparseDbsrsm2_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &transA,
        "cusparseDbsrsm2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transB), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &transB,
        "cusparseDbsrsm2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(mb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&mb, "cusparseDbsrsm2_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cusparseDbsrsm2_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnzb, "cusparseDbsrsm2_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &descrA,
        "cusparseDbsrsm2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedVal), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedVal,
        "cusparseDbsrsm2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedRowPtr), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedRowPtr,
        "cusparseDbsrsm2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedColInd), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedColInd,
        "cusparseDbsrsm2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(blockSize), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &blockSize,
        "cusparseDbsrsm2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cusparseDbsrsm2_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBufferSize), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &pBufferSize,
        "cusparseDbsrsm2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseCbsrsm2_bufferSizeExt(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    dirA: cuda_types::cusparse::cusparseDirection_t,
    transA: cuda_types::cusparse::cusparseOperation_t,
    transB: cuda_types::cusparse::cusparseOperation_t,
    mb: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    nnzb: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    bsrSortedVal: *mut cuda_types::cusparse::cuComplex,
    bsrSortedRowPtr: *const ::core::ffi::c_int,
    bsrSortedColInd: *const ::core::ffi::c_int,
    blockSize: ::core::ffi::c_int,
    info: cuda_types::cusparse::bsrsm2Info_t,
    pBufferSize: *mut usize,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &handle,
        "cusparseCbsrsm2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dirA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dirA, "cusparseCbsrsm2_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &transA,
        "cusparseCbsrsm2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transB), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &transB,
        "cusparseCbsrsm2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(mb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&mb, "cusparseCbsrsm2_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cusparseCbsrsm2_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnzb, "cusparseCbsrsm2_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &descrA,
        "cusparseCbsrsm2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedVal), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedVal,
        "cusparseCbsrsm2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedRowPtr), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedRowPtr,
        "cusparseCbsrsm2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedColInd), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedColInd,
        "cusparseCbsrsm2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(blockSize), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &blockSize,
        "cusparseCbsrsm2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cusparseCbsrsm2_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBufferSize), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &pBufferSize,
        "cusparseCbsrsm2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseZbsrsm2_bufferSizeExt(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    dirA: cuda_types::cusparse::cusparseDirection_t,
    transA: cuda_types::cusparse::cusparseOperation_t,
    transB: cuda_types::cusparse::cusparseOperation_t,
    mb: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    nnzb: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    bsrSortedVal: *mut cuda_types::cusparse::cuDoubleComplex,
    bsrSortedRowPtr: *const ::core::ffi::c_int,
    bsrSortedColInd: *const ::core::ffi::c_int,
    blockSize: ::core::ffi::c_int,
    info: cuda_types::cusparse::bsrsm2Info_t,
    pBufferSize: *mut usize,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &handle,
        "cusparseZbsrsm2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dirA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dirA, "cusparseZbsrsm2_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &transA,
        "cusparseZbsrsm2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transB), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &transB,
        "cusparseZbsrsm2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(mb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&mb, "cusparseZbsrsm2_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cusparseZbsrsm2_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnzb, "cusparseZbsrsm2_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &descrA,
        "cusparseZbsrsm2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedVal), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedVal,
        "cusparseZbsrsm2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedRowPtr), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedRowPtr,
        "cusparseZbsrsm2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedColInd), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedColInd,
        "cusparseZbsrsm2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(blockSize), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &blockSize,
        "cusparseZbsrsm2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cusparseZbsrsm2_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBufferSize), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &pBufferSize,
        "cusparseZbsrsm2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseSbsrsm2_analysis(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    dirA: cuda_types::cusparse::cusparseDirection_t,
    transA: cuda_types::cusparse::cusparseOperation_t,
    transXY: cuda_types::cusparse::cusparseOperation_t,
    mb: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    nnzb: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    bsrSortedVal: *const f32,
    bsrSortedRowPtr: *const ::core::ffi::c_int,
    bsrSortedColInd: *const ::core::ffi::c_int,
    blockSize: ::core::ffi::c_int,
    info: cuda_types::cusparse::bsrsm2Info_t,
    policy: cuda_types::cusparse::cusparseSolvePolicy_t,
    pBuffer: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseSbsrsm2_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dirA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dirA, "cusparseSbsrsm2_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transA, "cusparseSbsrsm2_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transXY), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transXY, "cusparseSbsrsm2_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(mb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&mb, "cusparseSbsrsm2_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cusparseSbsrsm2_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnzb, "cusparseSbsrsm2_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseSbsrsm2_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedVal), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedVal,
        "cusparseSbsrsm2_analysis",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedRowPtr), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedRowPtr,
        "cusparseSbsrsm2_analysis",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedColInd), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedColInd,
        "cusparseSbsrsm2_analysis",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(blockSize), ": ").as_bytes())?;
    crate::CudaDisplay::write(&blockSize, "cusparseSbsrsm2_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cusparseSbsrsm2_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(policy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&policy, "cusparseSbsrsm2_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBuffer), ": ").as_bytes())?;
    crate::CudaDisplay::write(&pBuffer, "cusparseSbsrsm2_analysis", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseDbsrsm2_analysis(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    dirA: cuda_types::cusparse::cusparseDirection_t,
    transA: cuda_types::cusparse::cusparseOperation_t,
    transXY: cuda_types::cusparse::cusparseOperation_t,
    mb: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    nnzb: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    bsrSortedVal: *const f64,
    bsrSortedRowPtr: *const ::core::ffi::c_int,
    bsrSortedColInd: *const ::core::ffi::c_int,
    blockSize: ::core::ffi::c_int,
    info: cuda_types::cusparse::bsrsm2Info_t,
    policy: cuda_types::cusparse::cusparseSolvePolicy_t,
    pBuffer: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseDbsrsm2_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dirA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dirA, "cusparseDbsrsm2_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transA, "cusparseDbsrsm2_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transXY), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transXY, "cusparseDbsrsm2_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(mb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&mb, "cusparseDbsrsm2_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cusparseDbsrsm2_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnzb, "cusparseDbsrsm2_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseDbsrsm2_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedVal), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedVal,
        "cusparseDbsrsm2_analysis",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedRowPtr), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedRowPtr,
        "cusparseDbsrsm2_analysis",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedColInd), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedColInd,
        "cusparseDbsrsm2_analysis",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(blockSize), ": ").as_bytes())?;
    crate::CudaDisplay::write(&blockSize, "cusparseDbsrsm2_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cusparseDbsrsm2_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(policy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&policy, "cusparseDbsrsm2_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBuffer), ": ").as_bytes())?;
    crate::CudaDisplay::write(&pBuffer, "cusparseDbsrsm2_analysis", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseCbsrsm2_analysis(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    dirA: cuda_types::cusparse::cusparseDirection_t,
    transA: cuda_types::cusparse::cusparseOperation_t,
    transXY: cuda_types::cusparse::cusparseOperation_t,
    mb: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    nnzb: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    bsrSortedVal: *const cuda_types::cusparse::cuComplex,
    bsrSortedRowPtr: *const ::core::ffi::c_int,
    bsrSortedColInd: *const ::core::ffi::c_int,
    blockSize: ::core::ffi::c_int,
    info: cuda_types::cusparse::bsrsm2Info_t,
    policy: cuda_types::cusparse::cusparseSolvePolicy_t,
    pBuffer: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseCbsrsm2_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dirA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dirA, "cusparseCbsrsm2_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transA, "cusparseCbsrsm2_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transXY), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transXY, "cusparseCbsrsm2_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(mb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&mb, "cusparseCbsrsm2_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cusparseCbsrsm2_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnzb, "cusparseCbsrsm2_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseCbsrsm2_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedVal), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedVal,
        "cusparseCbsrsm2_analysis",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedRowPtr), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedRowPtr,
        "cusparseCbsrsm2_analysis",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedColInd), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedColInd,
        "cusparseCbsrsm2_analysis",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(blockSize), ": ").as_bytes())?;
    crate::CudaDisplay::write(&blockSize, "cusparseCbsrsm2_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cusparseCbsrsm2_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(policy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&policy, "cusparseCbsrsm2_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBuffer), ": ").as_bytes())?;
    crate::CudaDisplay::write(&pBuffer, "cusparseCbsrsm2_analysis", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseZbsrsm2_analysis(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    dirA: cuda_types::cusparse::cusparseDirection_t,
    transA: cuda_types::cusparse::cusparseOperation_t,
    transXY: cuda_types::cusparse::cusparseOperation_t,
    mb: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    nnzb: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    bsrSortedVal: *const cuda_types::cusparse::cuDoubleComplex,
    bsrSortedRowPtr: *const ::core::ffi::c_int,
    bsrSortedColInd: *const ::core::ffi::c_int,
    blockSize: ::core::ffi::c_int,
    info: cuda_types::cusparse::bsrsm2Info_t,
    policy: cuda_types::cusparse::cusparseSolvePolicy_t,
    pBuffer: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseZbsrsm2_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dirA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dirA, "cusparseZbsrsm2_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transA, "cusparseZbsrsm2_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transXY), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transXY, "cusparseZbsrsm2_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(mb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&mb, "cusparseZbsrsm2_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cusparseZbsrsm2_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnzb, "cusparseZbsrsm2_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseZbsrsm2_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedVal), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedVal,
        "cusparseZbsrsm2_analysis",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedRowPtr), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedRowPtr,
        "cusparseZbsrsm2_analysis",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedColInd), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedColInd,
        "cusparseZbsrsm2_analysis",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(blockSize), ": ").as_bytes())?;
    crate::CudaDisplay::write(&blockSize, "cusparseZbsrsm2_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cusparseZbsrsm2_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(policy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&policy, "cusparseZbsrsm2_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBuffer), ": ").as_bytes())?;
    crate::CudaDisplay::write(&pBuffer, "cusparseZbsrsm2_analysis", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseSbsrsm2_solve(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    dirA: cuda_types::cusparse::cusparseDirection_t,
    transA: cuda_types::cusparse::cusparseOperation_t,
    transXY: cuda_types::cusparse::cusparseOperation_t,
    mb: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    nnzb: ::core::ffi::c_int,
    alpha: *const f32,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    bsrSortedVal: *const f32,
    bsrSortedRowPtr: *const ::core::ffi::c_int,
    bsrSortedColInd: *const ::core::ffi::c_int,
    blockSize: ::core::ffi::c_int,
    info: cuda_types::cusparse::bsrsm2Info_t,
    B: *const f32,
    ldb: ::core::ffi::c_int,
    X: *mut f32,
    ldx: ::core::ffi::c_int,
    policy: cuda_types::cusparse::cusparseSolvePolicy_t,
    pBuffer: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseSbsrsm2_solve", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dirA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dirA, "cusparseSbsrsm2_solve", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transA, "cusparseSbsrsm2_solve", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transXY), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transXY, "cusparseSbsrsm2_solve", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(mb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&mb, "cusparseSbsrsm2_solve", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cusparseSbsrsm2_solve", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnzb, "cusparseSbsrsm2_solve", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cusparseSbsrsm2_solve", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseSbsrsm2_solve", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedVal), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrSortedVal, "cusparseSbsrsm2_solve", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedRowPtr), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedRowPtr,
        "cusparseSbsrsm2_solve",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedColInd), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedColInd,
        "cusparseSbsrsm2_solve",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(blockSize), ": ").as_bytes())?;
    crate::CudaDisplay::write(&blockSize, "cusparseSbsrsm2_solve", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cusparseSbsrsm2_solve", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(B), ": ").as_bytes())?;
    crate::CudaDisplay::write(&B, "cusparseSbsrsm2_solve", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cusparseSbsrsm2_solve", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(X), ": ").as_bytes())?;
    crate::CudaDisplay::write(&X, "cusparseSbsrsm2_solve", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldx, "cusparseSbsrsm2_solve", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(policy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&policy, "cusparseSbsrsm2_solve", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBuffer), ": ").as_bytes())?;
    crate::CudaDisplay::write(&pBuffer, "cusparseSbsrsm2_solve", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseDbsrsm2_solve(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    dirA: cuda_types::cusparse::cusparseDirection_t,
    transA: cuda_types::cusparse::cusparseOperation_t,
    transXY: cuda_types::cusparse::cusparseOperation_t,
    mb: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    nnzb: ::core::ffi::c_int,
    alpha: *const f64,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    bsrSortedVal: *const f64,
    bsrSortedRowPtr: *const ::core::ffi::c_int,
    bsrSortedColInd: *const ::core::ffi::c_int,
    blockSize: ::core::ffi::c_int,
    info: cuda_types::cusparse::bsrsm2Info_t,
    B: *const f64,
    ldb: ::core::ffi::c_int,
    X: *mut f64,
    ldx: ::core::ffi::c_int,
    policy: cuda_types::cusparse::cusparseSolvePolicy_t,
    pBuffer: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseDbsrsm2_solve", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dirA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dirA, "cusparseDbsrsm2_solve", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transA, "cusparseDbsrsm2_solve", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transXY), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transXY, "cusparseDbsrsm2_solve", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(mb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&mb, "cusparseDbsrsm2_solve", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cusparseDbsrsm2_solve", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnzb, "cusparseDbsrsm2_solve", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cusparseDbsrsm2_solve", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseDbsrsm2_solve", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedVal), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrSortedVal, "cusparseDbsrsm2_solve", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedRowPtr), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedRowPtr,
        "cusparseDbsrsm2_solve",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedColInd), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedColInd,
        "cusparseDbsrsm2_solve",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(blockSize), ": ").as_bytes())?;
    crate::CudaDisplay::write(&blockSize, "cusparseDbsrsm2_solve", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cusparseDbsrsm2_solve", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(B), ": ").as_bytes())?;
    crate::CudaDisplay::write(&B, "cusparseDbsrsm2_solve", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cusparseDbsrsm2_solve", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(X), ": ").as_bytes())?;
    crate::CudaDisplay::write(&X, "cusparseDbsrsm2_solve", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldx, "cusparseDbsrsm2_solve", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(policy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&policy, "cusparseDbsrsm2_solve", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBuffer), ": ").as_bytes())?;
    crate::CudaDisplay::write(&pBuffer, "cusparseDbsrsm2_solve", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseCbsrsm2_solve(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    dirA: cuda_types::cusparse::cusparseDirection_t,
    transA: cuda_types::cusparse::cusparseOperation_t,
    transXY: cuda_types::cusparse::cusparseOperation_t,
    mb: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    nnzb: ::core::ffi::c_int,
    alpha: *const cuda_types::cusparse::cuComplex,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    bsrSortedVal: *const cuda_types::cusparse::cuComplex,
    bsrSortedRowPtr: *const ::core::ffi::c_int,
    bsrSortedColInd: *const ::core::ffi::c_int,
    blockSize: ::core::ffi::c_int,
    info: cuda_types::cusparse::bsrsm2Info_t,
    B: *const cuda_types::cusparse::cuComplex,
    ldb: ::core::ffi::c_int,
    X: *mut cuda_types::cusparse::cuComplex,
    ldx: ::core::ffi::c_int,
    policy: cuda_types::cusparse::cusparseSolvePolicy_t,
    pBuffer: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseCbsrsm2_solve", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dirA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dirA, "cusparseCbsrsm2_solve", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transA, "cusparseCbsrsm2_solve", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transXY), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transXY, "cusparseCbsrsm2_solve", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(mb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&mb, "cusparseCbsrsm2_solve", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cusparseCbsrsm2_solve", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnzb, "cusparseCbsrsm2_solve", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cusparseCbsrsm2_solve", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseCbsrsm2_solve", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedVal), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrSortedVal, "cusparseCbsrsm2_solve", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedRowPtr), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedRowPtr,
        "cusparseCbsrsm2_solve",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedColInd), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedColInd,
        "cusparseCbsrsm2_solve",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(blockSize), ": ").as_bytes())?;
    crate::CudaDisplay::write(&blockSize, "cusparseCbsrsm2_solve", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cusparseCbsrsm2_solve", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(B), ": ").as_bytes())?;
    crate::CudaDisplay::write(&B, "cusparseCbsrsm2_solve", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cusparseCbsrsm2_solve", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(X), ": ").as_bytes())?;
    crate::CudaDisplay::write(&X, "cusparseCbsrsm2_solve", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldx, "cusparseCbsrsm2_solve", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(policy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&policy, "cusparseCbsrsm2_solve", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBuffer), ": ").as_bytes())?;
    crate::CudaDisplay::write(&pBuffer, "cusparseCbsrsm2_solve", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseZbsrsm2_solve(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    dirA: cuda_types::cusparse::cusparseDirection_t,
    transA: cuda_types::cusparse::cusparseOperation_t,
    transXY: cuda_types::cusparse::cusparseOperation_t,
    mb: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    nnzb: ::core::ffi::c_int,
    alpha: *const cuda_types::cusparse::cuDoubleComplex,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    bsrSortedVal: *const cuda_types::cusparse::cuDoubleComplex,
    bsrSortedRowPtr: *const ::core::ffi::c_int,
    bsrSortedColInd: *const ::core::ffi::c_int,
    blockSize: ::core::ffi::c_int,
    info: cuda_types::cusparse::bsrsm2Info_t,
    B: *const cuda_types::cusparse::cuDoubleComplex,
    ldb: ::core::ffi::c_int,
    X: *mut cuda_types::cusparse::cuDoubleComplex,
    ldx: ::core::ffi::c_int,
    policy: cuda_types::cusparse::cusparseSolvePolicy_t,
    pBuffer: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseZbsrsm2_solve", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dirA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dirA, "cusparseZbsrsm2_solve", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transA, "cusparseZbsrsm2_solve", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(transXY), ": ").as_bytes())?;
    crate::CudaDisplay::write(&transXY, "cusparseZbsrsm2_solve", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(mb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&mb, "cusparseZbsrsm2_solve", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cusparseZbsrsm2_solve", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnzb, "cusparseZbsrsm2_solve", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cusparseZbsrsm2_solve", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseZbsrsm2_solve", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedVal), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrSortedVal, "cusparseZbsrsm2_solve", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedRowPtr), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedRowPtr,
        "cusparseZbsrsm2_solve",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedColInd), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedColInd,
        "cusparseZbsrsm2_solve",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(blockSize), ": ").as_bytes())?;
    crate::CudaDisplay::write(&blockSize, "cusparseZbsrsm2_solve", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cusparseZbsrsm2_solve", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(B), ": ").as_bytes())?;
    crate::CudaDisplay::write(&B, "cusparseZbsrsm2_solve", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cusparseZbsrsm2_solve", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(X), ": ").as_bytes())?;
    crate::CudaDisplay::write(&X, "cusparseZbsrsm2_solve", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldx), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldx, "cusparseZbsrsm2_solve", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(policy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&policy, "cusparseZbsrsm2_solve", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBuffer), ": ").as_bytes())?;
    crate::CudaDisplay::write(&pBuffer, "cusparseZbsrsm2_solve", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseScsrilu02_numericBoost(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    info: cuda_types::cusparse::csrilu02Info_t,
    enable_boost: ::core::ffi::c_int,
    tol: *mut f64,
    boost_val: *mut f32,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &handle,
        "cusparseScsrilu02_numericBoost",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cusparseScsrilu02_numericBoost", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(enable_boost), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &enable_boost,
        "cusparseScsrilu02_numericBoost",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(tol), ": ").as_bytes())?;
    crate::CudaDisplay::write(&tol, "cusparseScsrilu02_numericBoost", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(boost_val), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &boost_val,
        "cusparseScsrilu02_numericBoost",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseDcsrilu02_numericBoost(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    info: cuda_types::cusparse::csrilu02Info_t,
    enable_boost: ::core::ffi::c_int,
    tol: *mut f64,
    boost_val: *mut f64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &handle,
        "cusparseDcsrilu02_numericBoost",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cusparseDcsrilu02_numericBoost", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(enable_boost), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &enable_boost,
        "cusparseDcsrilu02_numericBoost",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(tol), ": ").as_bytes())?;
    crate::CudaDisplay::write(&tol, "cusparseDcsrilu02_numericBoost", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(boost_val), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &boost_val,
        "cusparseDcsrilu02_numericBoost",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseCcsrilu02_numericBoost(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    info: cuda_types::cusparse::csrilu02Info_t,
    enable_boost: ::core::ffi::c_int,
    tol: *mut f64,
    boost_val: *mut cuda_types::cusparse::cuComplex,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &handle,
        "cusparseCcsrilu02_numericBoost",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cusparseCcsrilu02_numericBoost", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(enable_boost), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &enable_boost,
        "cusparseCcsrilu02_numericBoost",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(tol), ": ").as_bytes())?;
    crate::CudaDisplay::write(&tol, "cusparseCcsrilu02_numericBoost", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(boost_val), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &boost_val,
        "cusparseCcsrilu02_numericBoost",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseZcsrilu02_numericBoost(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    info: cuda_types::cusparse::csrilu02Info_t,
    enable_boost: ::core::ffi::c_int,
    tol: *mut f64,
    boost_val: *mut cuda_types::cusparse::cuDoubleComplex,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &handle,
        "cusparseZcsrilu02_numericBoost",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cusparseZcsrilu02_numericBoost", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(enable_boost), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &enable_boost,
        "cusparseZcsrilu02_numericBoost",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(tol), ": ").as_bytes())?;
    crate::CudaDisplay::write(&tol, "cusparseZcsrilu02_numericBoost", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(boost_val), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &boost_val,
        "cusparseZcsrilu02_numericBoost",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseXcsrilu02_zeroPivot(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    info: cuda_types::cusparse::csrilu02Info_t,
    position: *mut ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseXcsrilu02_zeroPivot", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cusparseXcsrilu02_zeroPivot", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(position), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &position,
        "cusparseXcsrilu02_zeroPivot",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseScsrilu02_bufferSize(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    m: ::core::ffi::c_int,
    nnz: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    csrSortedValA: *mut f32,
    csrSortedRowPtrA: *const ::core::ffi::c_int,
    csrSortedColIndA: *const ::core::ffi::c_int,
    info: cuda_types::cusparse::csrilu02Info_t,
    pBufferSizeInBytes: *mut ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseScsrilu02_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cusparseScsrilu02_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnz), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnz, "cusparseScsrilu02_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseScsrilu02_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedValA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedValA,
        "cusparseScsrilu02_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedRowPtrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedRowPtrA,
        "cusparseScsrilu02_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedColIndA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedColIndA,
        "cusparseScsrilu02_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cusparseScsrilu02_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBufferSizeInBytes), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &pBufferSizeInBytes,
        "cusparseScsrilu02_bufferSize",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseDcsrilu02_bufferSize(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    m: ::core::ffi::c_int,
    nnz: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    csrSortedValA: *mut f64,
    csrSortedRowPtrA: *const ::core::ffi::c_int,
    csrSortedColIndA: *const ::core::ffi::c_int,
    info: cuda_types::cusparse::csrilu02Info_t,
    pBufferSizeInBytes: *mut ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseDcsrilu02_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cusparseDcsrilu02_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnz), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnz, "cusparseDcsrilu02_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseDcsrilu02_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedValA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedValA,
        "cusparseDcsrilu02_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedRowPtrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedRowPtrA,
        "cusparseDcsrilu02_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedColIndA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedColIndA,
        "cusparseDcsrilu02_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cusparseDcsrilu02_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBufferSizeInBytes), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &pBufferSizeInBytes,
        "cusparseDcsrilu02_bufferSize",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseCcsrilu02_bufferSize(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    m: ::core::ffi::c_int,
    nnz: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    csrSortedValA: *mut cuda_types::cusparse::cuComplex,
    csrSortedRowPtrA: *const ::core::ffi::c_int,
    csrSortedColIndA: *const ::core::ffi::c_int,
    info: cuda_types::cusparse::csrilu02Info_t,
    pBufferSizeInBytes: *mut ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseCcsrilu02_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cusparseCcsrilu02_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnz), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnz, "cusparseCcsrilu02_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseCcsrilu02_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedValA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedValA,
        "cusparseCcsrilu02_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedRowPtrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedRowPtrA,
        "cusparseCcsrilu02_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedColIndA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedColIndA,
        "cusparseCcsrilu02_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cusparseCcsrilu02_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBufferSizeInBytes), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &pBufferSizeInBytes,
        "cusparseCcsrilu02_bufferSize",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseZcsrilu02_bufferSize(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    m: ::core::ffi::c_int,
    nnz: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    csrSortedValA: *mut cuda_types::cusparse::cuDoubleComplex,
    csrSortedRowPtrA: *const ::core::ffi::c_int,
    csrSortedColIndA: *const ::core::ffi::c_int,
    info: cuda_types::cusparse::csrilu02Info_t,
    pBufferSizeInBytes: *mut ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseZcsrilu02_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cusparseZcsrilu02_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnz), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnz, "cusparseZcsrilu02_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseZcsrilu02_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedValA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedValA,
        "cusparseZcsrilu02_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedRowPtrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedRowPtrA,
        "cusparseZcsrilu02_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedColIndA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedColIndA,
        "cusparseZcsrilu02_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cusparseZcsrilu02_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBufferSizeInBytes), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &pBufferSizeInBytes,
        "cusparseZcsrilu02_bufferSize",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseScsrilu02_bufferSizeExt(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    m: ::core::ffi::c_int,
    nnz: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    csrSortedVal: *mut f32,
    csrSortedRowPtr: *const ::core::ffi::c_int,
    csrSortedColInd: *const ::core::ffi::c_int,
    info: cuda_types::cusparse::csrilu02Info_t,
    pBufferSize: *mut usize,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &handle,
        "cusparseScsrilu02_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cusparseScsrilu02_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnz), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnz, "cusparseScsrilu02_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &descrA,
        "cusparseScsrilu02_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedVal), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedVal,
        "cusparseScsrilu02_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedRowPtr), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedRowPtr,
        "cusparseScsrilu02_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedColInd), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedColInd,
        "cusparseScsrilu02_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &info,
        "cusparseScsrilu02_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBufferSize), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &pBufferSize,
        "cusparseScsrilu02_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseDcsrilu02_bufferSizeExt(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    m: ::core::ffi::c_int,
    nnz: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    csrSortedVal: *mut f64,
    csrSortedRowPtr: *const ::core::ffi::c_int,
    csrSortedColInd: *const ::core::ffi::c_int,
    info: cuda_types::cusparse::csrilu02Info_t,
    pBufferSize: *mut usize,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &handle,
        "cusparseDcsrilu02_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cusparseDcsrilu02_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnz), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnz, "cusparseDcsrilu02_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &descrA,
        "cusparseDcsrilu02_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedVal), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedVal,
        "cusparseDcsrilu02_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedRowPtr), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedRowPtr,
        "cusparseDcsrilu02_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedColInd), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedColInd,
        "cusparseDcsrilu02_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &info,
        "cusparseDcsrilu02_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBufferSize), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &pBufferSize,
        "cusparseDcsrilu02_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseCcsrilu02_bufferSizeExt(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    m: ::core::ffi::c_int,
    nnz: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    csrSortedVal: *mut cuda_types::cusparse::cuComplex,
    csrSortedRowPtr: *const ::core::ffi::c_int,
    csrSortedColInd: *const ::core::ffi::c_int,
    info: cuda_types::cusparse::csrilu02Info_t,
    pBufferSize: *mut usize,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &handle,
        "cusparseCcsrilu02_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cusparseCcsrilu02_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnz), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnz, "cusparseCcsrilu02_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &descrA,
        "cusparseCcsrilu02_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedVal), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedVal,
        "cusparseCcsrilu02_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedRowPtr), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedRowPtr,
        "cusparseCcsrilu02_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedColInd), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedColInd,
        "cusparseCcsrilu02_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &info,
        "cusparseCcsrilu02_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBufferSize), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &pBufferSize,
        "cusparseCcsrilu02_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseZcsrilu02_bufferSizeExt(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    m: ::core::ffi::c_int,
    nnz: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    csrSortedVal: *mut cuda_types::cusparse::cuDoubleComplex,
    csrSortedRowPtr: *const ::core::ffi::c_int,
    csrSortedColInd: *const ::core::ffi::c_int,
    info: cuda_types::cusparse::csrilu02Info_t,
    pBufferSize: *mut usize,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &handle,
        "cusparseZcsrilu02_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cusparseZcsrilu02_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnz), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnz, "cusparseZcsrilu02_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &descrA,
        "cusparseZcsrilu02_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedVal), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedVal,
        "cusparseZcsrilu02_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedRowPtr), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedRowPtr,
        "cusparseZcsrilu02_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedColInd), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedColInd,
        "cusparseZcsrilu02_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &info,
        "cusparseZcsrilu02_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBufferSize), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &pBufferSize,
        "cusparseZcsrilu02_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseScsrilu02_analysis(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    m: ::core::ffi::c_int,
    nnz: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    csrSortedValA: *const f32,
    csrSortedRowPtrA: *const ::core::ffi::c_int,
    csrSortedColIndA: *const ::core::ffi::c_int,
    info: cuda_types::cusparse::csrilu02Info_t,
    policy: cuda_types::cusparse::cusparseSolvePolicy_t,
    pBuffer: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseScsrilu02_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cusparseScsrilu02_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnz), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnz, "cusparseScsrilu02_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseScsrilu02_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedValA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedValA,
        "cusparseScsrilu02_analysis",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedRowPtrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedRowPtrA,
        "cusparseScsrilu02_analysis",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedColIndA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedColIndA,
        "cusparseScsrilu02_analysis",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cusparseScsrilu02_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(policy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&policy, "cusparseScsrilu02_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBuffer), ": ").as_bytes())?;
    crate::CudaDisplay::write(&pBuffer, "cusparseScsrilu02_analysis", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseDcsrilu02_analysis(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    m: ::core::ffi::c_int,
    nnz: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    csrSortedValA: *const f64,
    csrSortedRowPtrA: *const ::core::ffi::c_int,
    csrSortedColIndA: *const ::core::ffi::c_int,
    info: cuda_types::cusparse::csrilu02Info_t,
    policy: cuda_types::cusparse::cusparseSolvePolicy_t,
    pBuffer: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseDcsrilu02_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cusparseDcsrilu02_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnz), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnz, "cusparseDcsrilu02_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseDcsrilu02_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedValA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedValA,
        "cusparseDcsrilu02_analysis",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedRowPtrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedRowPtrA,
        "cusparseDcsrilu02_analysis",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedColIndA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedColIndA,
        "cusparseDcsrilu02_analysis",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cusparseDcsrilu02_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(policy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&policy, "cusparseDcsrilu02_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBuffer), ": ").as_bytes())?;
    crate::CudaDisplay::write(&pBuffer, "cusparseDcsrilu02_analysis", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseCcsrilu02_analysis(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    m: ::core::ffi::c_int,
    nnz: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    csrSortedValA: *const cuda_types::cusparse::cuComplex,
    csrSortedRowPtrA: *const ::core::ffi::c_int,
    csrSortedColIndA: *const ::core::ffi::c_int,
    info: cuda_types::cusparse::csrilu02Info_t,
    policy: cuda_types::cusparse::cusparseSolvePolicy_t,
    pBuffer: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseCcsrilu02_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cusparseCcsrilu02_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnz), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnz, "cusparseCcsrilu02_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseCcsrilu02_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedValA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedValA,
        "cusparseCcsrilu02_analysis",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedRowPtrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedRowPtrA,
        "cusparseCcsrilu02_analysis",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedColIndA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedColIndA,
        "cusparseCcsrilu02_analysis",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cusparseCcsrilu02_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(policy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&policy, "cusparseCcsrilu02_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBuffer), ": ").as_bytes())?;
    crate::CudaDisplay::write(&pBuffer, "cusparseCcsrilu02_analysis", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseZcsrilu02_analysis(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    m: ::core::ffi::c_int,
    nnz: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    csrSortedValA: *const cuda_types::cusparse::cuDoubleComplex,
    csrSortedRowPtrA: *const ::core::ffi::c_int,
    csrSortedColIndA: *const ::core::ffi::c_int,
    info: cuda_types::cusparse::csrilu02Info_t,
    policy: cuda_types::cusparse::cusparseSolvePolicy_t,
    pBuffer: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseZcsrilu02_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cusparseZcsrilu02_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnz), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnz, "cusparseZcsrilu02_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseZcsrilu02_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedValA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedValA,
        "cusparseZcsrilu02_analysis",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedRowPtrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedRowPtrA,
        "cusparseZcsrilu02_analysis",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedColIndA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedColIndA,
        "cusparseZcsrilu02_analysis",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cusparseZcsrilu02_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(policy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&policy, "cusparseZcsrilu02_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBuffer), ": ").as_bytes())?;
    crate::CudaDisplay::write(&pBuffer, "cusparseZcsrilu02_analysis", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseScsrilu02(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    m: ::core::ffi::c_int,
    nnz: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    csrSortedValA_valM: *mut f32,
    csrSortedRowPtrA: *const ::core::ffi::c_int,
    csrSortedColIndA: *const ::core::ffi::c_int,
    info: cuda_types::cusparse::csrilu02Info_t,
    policy: cuda_types::cusparse::cusparseSolvePolicy_t,
    pBuffer: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseScsrilu02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cusparseScsrilu02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnz), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnz, "cusparseScsrilu02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseScsrilu02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedValA_valM), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedValA_valM,
        "cusparseScsrilu02",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedRowPtrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrSortedRowPtrA, "cusparseScsrilu02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedColIndA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrSortedColIndA, "cusparseScsrilu02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cusparseScsrilu02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(policy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&policy, "cusparseScsrilu02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBuffer), ": ").as_bytes())?;
    crate::CudaDisplay::write(&pBuffer, "cusparseScsrilu02", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseDcsrilu02(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    m: ::core::ffi::c_int,
    nnz: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    csrSortedValA_valM: *mut f64,
    csrSortedRowPtrA: *const ::core::ffi::c_int,
    csrSortedColIndA: *const ::core::ffi::c_int,
    info: cuda_types::cusparse::csrilu02Info_t,
    policy: cuda_types::cusparse::cusparseSolvePolicy_t,
    pBuffer: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseDcsrilu02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cusparseDcsrilu02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnz), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnz, "cusparseDcsrilu02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseDcsrilu02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedValA_valM), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedValA_valM,
        "cusparseDcsrilu02",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedRowPtrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrSortedRowPtrA, "cusparseDcsrilu02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedColIndA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrSortedColIndA, "cusparseDcsrilu02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cusparseDcsrilu02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(policy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&policy, "cusparseDcsrilu02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBuffer), ": ").as_bytes())?;
    crate::CudaDisplay::write(&pBuffer, "cusparseDcsrilu02", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseCcsrilu02(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    m: ::core::ffi::c_int,
    nnz: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    csrSortedValA_valM: *mut cuda_types::cusparse::cuComplex,
    csrSortedRowPtrA: *const ::core::ffi::c_int,
    csrSortedColIndA: *const ::core::ffi::c_int,
    info: cuda_types::cusparse::csrilu02Info_t,
    policy: cuda_types::cusparse::cusparseSolvePolicy_t,
    pBuffer: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseCcsrilu02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cusparseCcsrilu02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnz), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnz, "cusparseCcsrilu02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseCcsrilu02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedValA_valM), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedValA_valM,
        "cusparseCcsrilu02",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedRowPtrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrSortedRowPtrA, "cusparseCcsrilu02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedColIndA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrSortedColIndA, "cusparseCcsrilu02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cusparseCcsrilu02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(policy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&policy, "cusparseCcsrilu02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBuffer), ": ").as_bytes())?;
    crate::CudaDisplay::write(&pBuffer, "cusparseCcsrilu02", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseZcsrilu02(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    m: ::core::ffi::c_int,
    nnz: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    csrSortedValA_valM: *mut cuda_types::cusparse::cuDoubleComplex,
    csrSortedRowPtrA: *const ::core::ffi::c_int,
    csrSortedColIndA: *const ::core::ffi::c_int,
    info: cuda_types::cusparse::csrilu02Info_t,
    policy: cuda_types::cusparse::cusparseSolvePolicy_t,
    pBuffer: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseZcsrilu02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cusparseZcsrilu02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnz), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnz, "cusparseZcsrilu02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseZcsrilu02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedValA_valM), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedValA_valM,
        "cusparseZcsrilu02",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedRowPtrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrSortedRowPtrA, "cusparseZcsrilu02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedColIndA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrSortedColIndA, "cusparseZcsrilu02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cusparseZcsrilu02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(policy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&policy, "cusparseZcsrilu02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBuffer), ": ").as_bytes())?;
    crate::CudaDisplay::write(&pBuffer, "cusparseZcsrilu02", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseSbsrilu02_numericBoost(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    info: cuda_types::cusparse::bsrilu02Info_t,
    enable_boost: ::core::ffi::c_int,
    tol: *mut f64,
    boost_val: *mut f32,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &handle,
        "cusparseSbsrilu02_numericBoost",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cusparseSbsrilu02_numericBoost", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(enable_boost), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &enable_boost,
        "cusparseSbsrilu02_numericBoost",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(tol), ": ").as_bytes())?;
    crate::CudaDisplay::write(&tol, "cusparseSbsrilu02_numericBoost", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(boost_val), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &boost_val,
        "cusparseSbsrilu02_numericBoost",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseDbsrilu02_numericBoost(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    info: cuda_types::cusparse::bsrilu02Info_t,
    enable_boost: ::core::ffi::c_int,
    tol: *mut f64,
    boost_val: *mut f64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &handle,
        "cusparseDbsrilu02_numericBoost",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cusparseDbsrilu02_numericBoost", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(enable_boost), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &enable_boost,
        "cusparseDbsrilu02_numericBoost",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(tol), ": ").as_bytes())?;
    crate::CudaDisplay::write(&tol, "cusparseDbsrilu02_numericBoost", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(boost_val), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &boost_val,
        "cusparseDbsrilu02_numericBoost",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseCbsrilu02_numericBoost(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    info: cuda_types::cusparse::bsrilu02Info_t,
    enable_boost: ::core::ffi::c_int,
    tol: *mut f64,
    boost_val: *mut cuda_types::cusparse::cuComplex,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &handle,
        "cusparseCbsrilu02_numericBoost",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cusparseCbsrilu02_numericBoost", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(enable_boost), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &enable_boost,
        "cusparseCbsrilu02_numericBoost",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(tol), ": ").as_bytes())?;
    crate::CudaDisplay::write(&tol, "cusparseCbsrilu02_numericBoost", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(boost_val), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &boost_val,
        "cusparseCbsrilu02_numericBoost",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseZbsrilu02_numericBoost(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    info: cuda_types::cusparse::bsrilu02Info_t,
    enable_boost: ::core::ffi::c_int,
    tol: *mut f64,
    boost_val: *mut cuda_types::cusparse::cuDoubleComplex,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &handle,
        "cusparseZbsrilu02_numericBoost",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cusparseZbsrilu02_numericBoost", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(enable_boost), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &enable_boost,
        "cusparseZbsrilu02_numericBoost",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(tol), ": ").as_bytes())?;
    crate::CudaDisplay::write(&tol, "cusparseZbsrilu02_numericBoost", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(boost_val), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &boost_val,
        "cusparseZbsrilu02_numericBoost",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseXbsrilu02_zeroPivot(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    info: cuda_types::cusparse::bsrilu02Info_t,
    position: *mut ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseXbsrilu02_zeroPivot", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cusparseXbsrilu02_zeroPivot", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(position), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &position,
        "cusparseXbsrilu02_zeroPivot",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseSbsrilu02_bufferSize(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    dirA: cuda_types::cusparse::cusparseDirection_t,
    mb: ::core::ffi::c_int,
    nnzb: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    bsrSortedVal: *mut f32,
    bsrSortedRowPtr: *const ::core::ffi::c_int,
    bsrSortedColInd: *const ::core::ffi::c_int,
    blockDim: ::core::ffi::c_int,
    info: cuda_types::cusparse::bsrilu02Info_t,
    pBufferSizeInBytes: *mut ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseSbsrilu02_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dirA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dirA, "cusparseSbsrilu02_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(mb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&mb, "cusparseSbsrilu02_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnzb, "cusparseSbsrilu02_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseSbsrilu02_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedVal), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedVal,
        "cusparseSbsrilu02_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedRowPtr), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedRowPtr,
        "cusparseSbsrilu02_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedColInd), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedColInd,
        "cusparseSbsrilu02_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(blockDim), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &blockDim,
        "cusparseSbsrilu02_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cusparseSbsrilu02_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBufferSizeInBytes), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &pBufferSizeInBytes,
        "cusparseSbsrilu02_bufferSize",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseDbsrilu02_bufferSize(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    dirA: cuda_types::cusparse::cusparseDirection_t,
    mb: ::core::ffi::c_int,
    nnzb: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    bsrSortedVal: *mut f64,
    bsrSortedRowPtr: *const ::core::ffi::c_int,
    bsrSortedColInd: *const ::core::ffi::c_int,
    blockDim: ::core::ffi::c_int,
    info: cuda_types::cusparse::bsrilu02Info_t,
    pBufferSizeInBytes: *mut ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseDbsrilu02_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dirA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dirA, "cusparseDbsrilu02_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(mb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&mb, "cusparseDbsrilu02_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnzb, "cusparseDbsrilu02_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseDbsrilu02_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedVal), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedVal,
        "cusparseDbsrilu02_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedRowPtr), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedRowPtr,
        "cusparseDbsrilu02_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedColInd), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedColInd,
        "cusparseDbsrilu02_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(blockDim), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &blockDim,
        "cusparseDbsrilu02_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cusparseDbsrilu02_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBufferSizeInBytes), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &pBufferSizeInBytes,
        "cusparseDbsrilu02_bufferSize",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseCbsrilu02_bufferSize(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    dirA: cuda_types::cusparse::cusparseDirection_t,
    mb: ::core::ffi::c_int,
    nnzb: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    bsrSortedVal: *mut cuda_types::cusparse::cuComplex,
    bsrSortedRowPtr: *const ::core::ffi::c_int,
    bsrSortedColInd: *const ::core::ffi::c_int,
    blockDim: ::core::ffi::c_int,
    info: cuda_types::cusparse::bsrilu02Info_t,
    pBufferSizeInBytes: *mut ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseCbsrilu02_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dirA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dirA, "cusparseCbsrilu02_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(mb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&mb, "cusparseCbsrilu02_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnzb, "cusparseCbsrilu02_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseCbsrilu02_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedVal), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedVal,
        "cusparseCbsrilu02_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedRowPtr), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedRowPtr,
        "cusparseCbsrilu02_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedColInd), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedColInd,
        "cusparseCbsrilu02_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(blockDim), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &blockDim,
        "cusparseCbsrilu02_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cusparseCbsrilu02_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBufferSizeInBytes), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &pBufferSizeInBytes,
        "cusparseCbsrilu02_bufferSize",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseZbsrilu02_bufferSize(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    dirA: cuda_types::cusparse::cusparseDirection_t,
    mb: ::core::ffi::c_int,
    nnzb: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    bsrSortedVal: *mut cuda_types::cusparse::cuDoubleComplex,
    bsrSortedRowPtr: *const ::core::ffi::c_int,
    bsrSortedColInd: *const ::core::ffi::c_int,
    blockDim: ::core::ffi::c_int,
    info: cuda_types::cusparse::bsrilu02Info_t,
    pBufferSizeInBytes: *mut ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseZbsrilu02_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dirA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dirA, "cusparseZbsrilu02_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(mb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&mb, "cusparseZbsrilu02_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnzb, "cusparseZbsrilu02_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseZbsrilu02_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedVal), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedVal,
        "cusparseZbsrilu02_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedRowPtr), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedRowPtr,
        "cusparseZbsrilu02_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedColInd), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedColInd,
        "cusparseZbsrilu02_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(blockDim), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &blockDim,
        "cusparseZbsrilu02_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cusparseZbsrilu02_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBufferSizeInBytes), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &pBufferSizeInBytes,
        "cusparseZbsrilu02_bufferSize",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseSbsrilu02_bufferSizeExt(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    dirA: cuda_types::cusparse::cusparseDirection_t,
    mb: ::core::ffi::c_int,
    nnzb: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    bsrSortedVal: *mut f32,
    bsrSortedRowPtr: *const ::core::ffi::c_int,
    bsrSortedColInd: *const ::core::ffi::c_int,
    blockSize: ::core::ffi::c_int,
    info: cuda_types::cusparse::bsrilu02Info_t,
    pBufferSize: *mut usize,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &handle,
        "cusparseSbsrilu02_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dirA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &dirA,
        "cusparseSbsrilu02_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(mb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&mb, "cusparseSbsrilu02_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzb), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &nnzb,
        "cusparseSbsrilu02_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &descrA,
        "cusparseSbsrilu02_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedVal), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedVal,
        "cusparseSbsrilu02_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedRowPtr), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedRowPtr,
        "cusparseSbsrilu02_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedColInd), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedColInd,
        "cusparseSbsrilu02_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(blockSize), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &blockSize,
        "cusparseSbsrilu02_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &info,
        "cusparseSbsrilu02_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBufferSize), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &pBufferSize,
        "cusparseSbsrilu02_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseDbsrilu02_bufferSizeExt(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    dirA: cuda_types::cusparse::cusparseDirection_t,
    mb: ::core::ffi::c_int,
    nnzb: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    bsrSortedVal: *mut f64,
    bsrSortedRowPtr: *const ::core::ffi::c_int,
    bsrSortedColInd: *const ::core::ffi::c_int,
    blockSize: ::core::ffi::c_int,
    info: cuda_types::cusparse::bsrilu02Info_t,
    pBufferSize: *mut usize,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &handle,
        "cusparseDbsrilu02_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dirA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &dirA,
        "cusparseDbsrilu02_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(mb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&mb, "cusparseDbsrilu02_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzb), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &nnzb,
        "cusparseDbsrilu02_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &descrA,
        "cusparseDbsrilu02_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedVal), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedVal,
        "cusparseDbsrilu02_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedRowPtr), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedRowPtr,
        "cusparseDbsrilu02_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedColInd), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedColInd,
        "cusparseDbsrilu02_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(blockSize), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &blockSize,
        "cusparseDbsrilu02_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &info,
        "cusparseDbsrilu02_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBufferSize), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &pBufferSize,
        "cusparseDbsrilu02_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseCbsrilu02_bufferSizeExt(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    dirA: cuda_types::cusparse::cusparseDirection_t,
    mb: ::core::ffi::c_int,
    nnzb: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    bsrSortedVal: *mut cuda_types::cusparse::cuComplex,
    bsrSortedRowPtr: *const ::core::ffi::c_int,
    bsrSortedColInd: *const ::core::ffi::c_int,
    blockSize: ::core::ffi::c_int,
    info: cuda_types::cusparse::bsrilu02Info_t,
    pBufferSize: *mut usize,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &handle,
        "cusparseCbsrilu02_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dirA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &dirA,
        "cusparseCbsrilu02_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(mb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&mb, "cusparseCbsrilu02_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzb), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &nnzb,
        "cusparseCbsrilu02_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &descrA,
        "cusparseCbsrilu02_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedVal), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedVal,
        "cusparseCbsrilu02_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedRowPtr), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedRowPtr,
        "cusparseCbsrilu02_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedColInd), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedColInd,
        "cusparseCbsrilu02_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(blockSize), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &blockSize,
        "cusparseCbsrilu02_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &info,
        "cusparseCbsrilu02_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBufferSize), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &pBufferSize,
        "cusparseCbsrilu02_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseZbsrilu02_bufferSizeExt(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    dirA: cuda_types::cusparse::cusparseDirection_t,
    mb: ::core::ffi::c_int,
    nnzb: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    bsrSortedVal: *mut cuda_types::cusparse::cuDoubleComplex,
    bsrSortedRowPtr: *const ::core::ffi::c_int,
    bsrSortedColInd: *const ::core::ffi::c_int,
    blockSize: ::core::ffi::c_int,
    info: cuda_types::cusparse::bsrilu02Info_t,
    pBufferSize: *mut usize,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &handle,
        "cusparseZbsrilu02_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dirA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &dirA,
        "cusparseZbsrilu02_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(mb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&mb, "cusparseZbsrilu02_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzb), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &nnzb,
        "cusparseZbsrilu02_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &descrA,
        "cusparseZbsrilu02_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedVal), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedVal,
        "cusparseZbsrilu02_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedRowPtr), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedRowPtr,
        "cusparseZbsrilu02_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedColInd), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedColInd,
        "cusparseZbsrilu02_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(blockSize), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &blockSize,
        "cusparseZbsrilu02_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &info,
        "cusparseZbsrilu02_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBufferSize), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &pBufferSize,
        "cusparseZbsrilu02_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseSbsrilu02_analysis(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    dirA: cuda_types::cusparse::cusparseDirection_t,
    mb: ::core::ffi::c_int,
    nnzb: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    bsrSortedVal: *mut f32,
    bsrSortedRowPtr: *const ::core::ffi::c_int,
    bsrSortedColInd: *const ::core::ffi::c_int,
    blockDim: ::core::ffi::c_int,
    info: cuda_types::cusparse::bsrilu02Info_t,
    policy: cuda_types::cusparse::cusparseSolvePolicy_t,
    pBuffer: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseSbsrilu02_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dirA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dirA, "cusparseSbsrilu02_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(mb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&mb, "cusparseSbsrilu02_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnzb, "cusparseSbsrilu02_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseSbsrilu02_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedVal), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedVal,
        "cusparseSbsrilu02_analysis",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedRowPtr), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedRowPtr,
        "cusparseSbsrilu02_analysis",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedColInd), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedColInd,
        "cusparseSbsrilu02_analysis",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(blockDim), ": ").as_bytes())?;
    crate::CudaDisplay::write(&blockDim, "cusparseSbsrilu02_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cusparseSbsrilu02_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(policy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&policy, "cusparseSbsrilu02_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBuffer), ": ").as_bytes())?;
    crate::CudaDisplay::write(&pBuffer, "cusparseSbsrilu02_analysis", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseDbsrilu02_analysis(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    dirA: cuda_types::cusparse::cusparseDirection_t,
    mb: ::core::ffi::c_int,
    nnzb: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    bsrSortedVal: *mut f64,
    bsrSortedRowPtr: *const ::core::ffi::c_int,
    bsrSortedColInd: *const ::core::ffi::c_int,
    blockDim: ::core::ffi::c_int,
    info: cuda_types::cusparse::bsrilu02Info_t,
    policy: cuda_types::cusparse::cusparseSolvePolicy_t,
    pBuffer: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseDbsrilu02_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dirA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dirA, "cusparseDbsrilu02_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(mb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&mb, "cusparseDbsrilu02_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnzb, "cusparseDbsrilu02_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseDbsrilu02_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedVal), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedVal,
        "cusparseDbsrilu02_analysis",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedRowPtr), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedRowPtr,
        "cusparseDbsrilu02_analysis",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedColInd), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedColInd,
        "cusparseDbsrilu02_analysis",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(blockDim), ": ").as_bytes())?;
    crate::CudaDisplay::write(&blockDim, "cusparseDbsrilu02_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cusparseDbsrilu02_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(policy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&policy, "cusparseDbsrilu02_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBuffer), ": ").as_bytes())?;
    crate::CudaDisplay::write(&pBuffer, "cusparseDbsrilu02_analysis", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseCbsrilu02_analysis(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    dirA: cuda_types::cusparse::cusparseDirection_t,
    mb: ::core::ffi::c_int,
    nnzb: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    bsrSortedVal: *mut cuda_types::cusparse::cuComplex,
    bsrSortedRowPtr: *const ::core::ffi::c_int,
    bsrSortedColInd: *const ::core::ffi::c_int,
    blockDim: ::core::ffi::c_int,
    info: cuda_types::cusparse::bsrilu02Info_t,
    policy: cuda_types::cusparse::cusparseSolvePolicy_t,
    pBuffer: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseCbsrilu02_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dirA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dirA, "cusparseCbsrilu02_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(mb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&mb, "cusparseCbsrilu02_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnzb, "cusparseCbsrilu02_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseCbsrilu02_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedVal), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedVal,
        "cusparseCbsrilu02_analysis",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedRowPtr), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedRowPtr,
        "cusparseCbsrilu02_analysis",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedColInd), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedColInd,
        "cusparseCbsrilu02_analysis",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(blockDim), ": ").as_bytes())?;
    crate::CudaDisplay::write(&blockDim, "cusparseCbsrilu02_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cusparseCbsrilu02_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(policy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&policy, "cusparseCbsrilu02_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBuffer), ": ").as_bytes())?;
    crate::CudaDisplay::write(&pBuffer, "cusparseCbsrilu02_analysis", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseZbsrilu02_analysis(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    dirA: cuda_types::cusparse::cusparseDirection_t,
    mb: ::core::ffi::c_int,
    nnzb: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    bsrSortedVal: *mut cuda_types::cusparse::cuDoubleComplex,
    bsrSortedRowPtr: *const ::core::ffi::c_int,
    bsrSortedColInd: *const ::core::ffi::c_int,
    blockDim: ::core::ffi::c_int,
    info: cuda_types::cusparse::bsrilu02Info_t,
    policy: cuda_types::cusparse::cusparseSolvePolicy_t,
    pBuffer: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseZbsrilu02_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dirA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dirA, "cusparseZbsrilu02_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(mb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&mb, "cusparseZbsrilu02_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnzb, "cusparseZbsrilu02_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseZbsrilu02_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedVal), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedVal,
        "cusparseZbsrilu02_analysis",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedRowPtr), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedRowPtr,
        "cusparseZbsrilu02_analysis",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedColInd), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedColInd,
        "cusparseZbsrilu02_analysis",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(blockDim), ": ").as_bytes())?;
    crate::CudaDisplay::write(&blockDim, "cusparseZbsrilu02_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cusparseZbsrilu02_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(policy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&policy, "cusparseZbsrilu02_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBuffer), ": ").as_bytes())?;
    crate::CudaDisplay::write(&pBuffer, "cusparseZbsrilu02_analysis", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseSbsrilu02(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    dirA: cuda_types::cusparse::cusparseDirection_t,
    mb: ::core::ffi::c_int,
    nnzb: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    bsrSortedVal: *mut f32,
    bsrSortedRowPtr: *const ::core::ffi::c_int,
    bsrSortedColInd: *const ::core::ffi::c_int,
    blockDim: ::core::ffi::c_int,
    info: cuda_types::cusparse::bsrilu02Info_t,
    policy: cuda_types::cusparse::cusparseSolvePolicy_t,
    pBuffer: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseSbsrilu02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dirA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dirA, "cusparseSbsrilu02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(mb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&mb, "cusparseSbsrilu02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnzb, "cusparseSbsrilu02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseSbsrilu02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedVal), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrSortedVal, "cusparseSbsrilu02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedRowPtr), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrSortedRowPtr, "cusparseSbsrilu02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedColInd), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrSortedColInd, "cusparseSbsrilu02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(blockDim), ": ").as_bytes())?;
    crate::CudaDisplay::write(&blockDim, "cusparseSbsrilu02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cusparseSbsrilu02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(policy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&policy, "cusparseSbsrilu02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBuffer), ": ").as_bytes())?;
    crate::CudaDisplay::write(&pBuffer, "cusparseSbsrilu02", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseDbsrilu02(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    dirA: cuda_types::cusparse::cusparseDirection_t,
    mb: ::core::ffi::c_int,
    nnzb: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    bsrSortedVal: *mut f64,
    bsrSortedRowPtr: *const ::core::ffi::c_int,
    bsrSortedColInd: *const ::core::ffi::c_int,
    blockDim: ::core::ffi::c_int,
    info: cuda_types::cusparse::bsrilu02Info_t,
    policy: cuda_types::cusparse::cusparseSolvePolicy_t,
    pBuffer: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseDbsrilu02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dirA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dirA, "cusparseDbsrilu02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(mb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&mb, "cusparseDbsrilu02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnzb, "cusparseDbsrilu02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseDbsrilu02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedVal), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrSortedVal, "cusparseDbsrilu02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedRowPtr), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrSortedRowPtr, "cusparseDbsrilu02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedColInd), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrSortedColInd, "cusparseDbsrilu02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(blockDim), ": ").as_bytes())?;
    crate::CudaDisplay::write(&blockDim, "cusparseDbsrilu02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cusparseDbsrilu02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(policy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&policy, "cusparseDbsrilu02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBuffer), ": ").as_bytes())?;
    crate::CudaDisplay::write(&pBuffer, "cusparseDbsrilu02", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseCbsrilu02(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    dirA: cuda_types::cusparse::cusparseDirection_t,
    mb: ::core::ffi::c_int,
    nnzb: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    bsrSortedVal: *mut cuda_types::cusparse::cuComplex,
    bsrSortedRowPtr: *const ::core::ffi::c_int,
    bsrSortedColInd: *const ::core::ffi::c_int,
    blockDim: ::core::ffi::c_int,
    info: cuda_types::cusparse::bsrilu02Info_t,
    policy: cuda_types::cusparse::cusparseSolvePolicy_t,
    pBuffer: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseCbsrilu02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dirA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dirA, "cusparseCbsrilu02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(mb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&mb, "cusparseCbsrilu02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnzb, "cusparseCbsrilu02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseCbsrilu02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedVal), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrSortedVal, "cusparseCbsrilu02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedRowPtr), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrSortedRowPtr, "cusparseCbsrilu02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedColInd), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrSortedColInd, "cusparseCbsrilu02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(blockDim), ": ").as_bytes())?;
    crate::CudaDisplay::write(&blockDim, "cusparseCbsrilu02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cusparseCbsrilu02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(policy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&policy, "cusparseCbsrilu02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBuffer), ": ").as_bytes())?;
    crate::CudaDisplay::write(&pBuffer, "cusparseCbsrilu02", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseZbsrilu02(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    dirA: cuda_types::cusparse::cusparseDirection_t,
    mb: ::core::ffi::c_int,
    nnzb: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    bsrSortedVal: *mut cuda_types::cusparse::cuDoubleComplex,
    bsrSortedRowPtr: *const ::core::ffi::c_int,
    bsrSortedColInd: *const ::core::ffi::c_int,
    blockDim: ::core::ffi::c_int,
    info: cuda_types::cusparse::bsrilu02Info_t,
    policy: cuda_types::cusparse::cusparseSolvePolicy_t,
    pBuffer: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseZbsrilu02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dirA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dirA, "cusparseZbsrilu02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(mb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&mb, "cusparseZbsrilu02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnzb, "cusparseZbsrilu02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseZbsrilu02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedVal), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrSortedVal, "cusparseZbsrilu02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedRowPtr), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrSortedRowPtr, "cusparseZbsrilu02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedColInd), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrSortedColInd, "cusparseZbsrilu02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(blockDim), ": ").as_bytes())?;
    crate::CudaDisplay::write(&blockDim, "cusparseZbsrilu02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cusparseZbsrilu02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(policy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&policy, "cusparseZbsrilu02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBuffer), ": ").as_bytes())?;
    crate::CudaDisplay::write(&pBuffer, "cusparseZbsrilu02", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseXcsric02_zeroPivot(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    info: cuda_types::cusparse::csric02Info_t,
    position: *mut ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseXcsric02_zeroPivot", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cusparseXcsric02_zeroPivot", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(position), ": ").as_bytes())?;
    crate::CudaDisplay::write(&position, "cusparseXcsric02_zeroPivot", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseScsric02_bufferSize(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    m: ::core::ffi::c_int,
    nnz: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    csrSortedValA: *mut f32,
    csrSortedRowPtrA: *const ::core::ffi::c_int,
    csrSortedColIndA: *const ::core::ffi::c_int,
    info: cuda_types::cusparse::csric02Info_t,
    pBufferSizeInBytes: *mut ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseScsric02_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cusparseScsric02_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnz), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnz, "cusparseScsric02_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseScsric02_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedValA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedValA,
        "cusparseScsric02_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedRowPtrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedRowPtrA,
        "cusparseScsric02_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedColIndA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedColIndA,
        "cusparseScsric02_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cusparseScsric02_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBufferSizeInBytes), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &pBufferSizeInBytes,
        "cusparseScsric02_bufferSize",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseDcsric02_bufferSize(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    m: ::core::ffi::c_int,
    nnz: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    csrSortedValA: *mut f64,
    csrSortedRowPtrA: *const ::core::ffi::c_int,
    csrSortedColIndA: *const ::core::ffi::c_int,
    info: cuda_types::cusparse::csric02Info_t,
    pBufferSizeInBytes: *mut ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseDcsric02_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cusparseDcsric02_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnz), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnz, "cusparseDcsric02_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseDcsric02_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedValA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedValA,
        "cusparseDcsric02_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedRowPtrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedRowPtrA,
        "cusparseDcsric02_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedColIndA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedColIndA,
        "cusparseDcsric02_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cusparseDcsric02_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBufferSizeInBytes), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &pBufferSizeInBytes,
        "cusparseDcsric02_bufferSize",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseCcsric02_bufferSize(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    m: ::core::ffi::c_int,
    nnz: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    csrSortedValA: *mut cuda_types::cusparse::cuComplex,
    csrSortedRowPtrA: *const ::core::ffi::c_int,
    csrSortedColIndA: *const ::core::ffi::c_int,
    info: cuda_types::cusparse::csric02Info_t,
    pBufferSizeInBytes: *mut ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseCcsric02_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cusparseCcsric02_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnz), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnz, "cusparseCcsric02_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseCcsric02_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedValA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedValA,
        "cusparseCcsric02_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedRowPtrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedRowPtrA,
        "cusparseCcsric02_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedColIndA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedColIndA,
        "cusparseCcsric02_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cusparseCcsric02_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBufferSizeInBytes), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &pBufferSizeInBytes,
        "cusparseCcsric02_bufferSize",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseZcsric02_bufferSize(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    m: ::core::ffi::c_int,
    nnz: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    csrSortedValA: *mut cuda_types::cusparse::cuDoubleComplex,
    csrSortedRowPtrA: *const ::core::ffi::c_int,
    csrSortedColIndA: *const ::core::ffi::c_int,
    info: cuda_types::cusparse::csric02Info_t,
    pBufferSizeInBytes: *mut ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseZcsric02_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cusparseZcsric02_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnz), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnz, "cusparseZcsric02_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseZcsric02_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedValA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedValA,
        "cusparseZcsric02_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedRowPtrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedRowPtrA,
        "cusparseZcsric02_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedColIndA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedColIndA,
        "cusparseZcsric02_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cusparseZcsric02_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBufferSizeInBytes), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &pBufferSizeInBytes,
        "cusparseZcsric02_bufferSize",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseScsric02_bufferSizeExt(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    m: ::core::ffi::c_int,
    nnz: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    csrSortedVal: *mut f32,
    csrSortedRowPtr: *const ::core::ffi::c_int,
    csrSortedColInd: *const ::core::ffi::c_int,
    info: cuda_types::cusparse::csric02Info_t,
    pBufferSize: *mut usize,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &handle,
        "cusparseScsric02_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cusparseScsric02_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnz), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnz, "cusparseScsric02_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &descrA,
        "cusparseScsric02_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedVal), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedVal,
        "cusparseScsric02_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedRowPtr), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedRowPtr,
        "cusparseScsric02_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedColInd), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedColInd,
        "cusparseScsric02_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cusparseScsric02_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBufferSize), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &pBufferSize,
        "cusparseScsric02_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseDcsric02_bufferSizeExt(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    m: ::core::ffi::c_int,
    nnz: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    csrSortedVal: *mut f64,
    csrSortedRowPtr: *const ::core::ffi::c_int,
    csrSortedColInd: *const ::core::ffi::c_int,
    info: cuda_types::cusparse::csric02Info_t,
    pBufferSize: *mut usize,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &handle,
        "cusparseDcsric02_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cusparseDcsric02_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnz), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnz, "cusparseDcsric02_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &descrA,
        "cusparseDcsric02_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedVal), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedVal,
        "cusparseDcsric02_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedRowPtr), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedRowPtr,
        "cusparseDcsric02_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedColInd), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedColInd,
        "cusparseDcsric02_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cusparseDcsric02_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBufferSize), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &pBufferSize,
        "cusparseDcsric02_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseCcsric02_bufferSizeExt(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    m: ::core::ffi::c_int,
    nnz: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    csrSortedVal: *mut cuda_types::cusparse::cuComplex,
    csrSortedRowPtr: *const ::core::ffi::c_int,
    csrSortedColInd: *const ::core::ffi::c_int,
    info: cuda_types::cusparse::csric02Info_t,
    pBufferSize: *mut usize,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &handle,
        "cusparseCcsric02_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cusparseCcsric02_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnz), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnz, "cusparseCcsric02_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &descrA,
        "cusparseCcsric02_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedVal), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedVal,
        "cusparseCcsric02_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedRowPtr), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedRowPtr,
        "cusparseCcsric02_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedColInd), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedColInd,
        "cusparseCcsric02_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cusparseCcsric02_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBufferSize), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &pBufferSize,
        "cusparseCcsric02_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseZcsric02_bufferSizeExt(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    m: ::core::ffi::c_int,
    nnz: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    csrSortedVal: *mut cuda_types::cusparse::cuDoubleComplex,
    csrSortedRowPtr: *const ::core::ffi::c_int,
    csrSortedColInd: *const ::core::ffi::c_int,
    info: cuda_types::cusparse::csric02Info_t,
    pBufferSize: *mut usize,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &handle,
        "cusparseZcsric02_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cusparseZcsric02_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnz), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnz, "cusparseZcsric02_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &descrA,
        "cusparseZcsric02_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedVal), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedVal,
        "cusparseZcsric02_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedRowPtr), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedRowPtr,
        "cusparseZcsric02_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedColInd), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedColInd,
        "cusparseZcsric02_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cusparseZcsric02_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBufferSize), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &pBufferSize,
        "cusparseZcsric02_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseScsric02_analysis(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    m: ::core::ffi::c_int,
    nnz: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    csrSortedValA: *const f32,
    csrSortedRowPtrA: *const ::core::ffi::c_int,
    csrSortedColIndA: *const ::core::ffi::c_int,
    info: cuda_types::cusparse::csric02Info_t,
    policy: cuda_types::cusparse::cusparseSolvePolicy_t,
    pBuffer: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseScsric02_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cusparseScsric02_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnz), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnz, "cusparseScsric02_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseScsric02_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedValA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedValA,
        "cusparseScsric02_analysis",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedRowPtrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedRowPtrA,
        "cusparseScsric02_analysis",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedColIndA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedColIndA,
        "cusparseScsric02_analysis",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cusparseScsric02_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(policy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&policy, "cusparseScsric02_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBuffer), ": ").as_bytes())?;
    crate::CudaDisplay::write(&pBuffer, "cusparseScsric02_analysis", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseDcsric02_analysis(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    m: ::core::ffi::c_int,
    nnz: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    csrSortedValA: *const f64,
    csrSortedRowPtrA: *const ::core::ffi::c_int,
    csrSortedColIndA: *const ::core::ffi::c_int,
    info: cuda_types::cusparse::csric02Info_t,
    policy: cuda_types::cusparse::cusparseSolvePolicy_t,
    pBuffer: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseDcsric02_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cusparseDcsric02_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnz), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnz, "cusparseDcsric02_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseDcsric02_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedValA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedValA,
        "cusparseDcsric02_analysis",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedRowPtrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedRowPtrA,
        "cusparseDcsric02_analysis",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedColIndA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedColIndA,
        "cusparseDcsric02_analysis",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cusparseDcsric02_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(policy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&policy, "cusparseDcsric02_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBuffer), ": ").as_bytes())?;
    crate::CudaDisplay::write(&pBuffer, "cusparseDcsric02_analysis", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseCcsric02_analysis(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    m: ::core::ffi::c_int,
    nnz: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    csrSortedValA: *const cuda_types::cusparse::cuComplex,
    csrSortedRowPtrA: *const ::core::ffi::c_int,
    csrSortedColIndA: *const ::core::ffi::c_int,
    info: cuda_types::cusparse::csric02Info_t,
    policy: cuda_types::cusparse::cusparseSolvePolicy_t,
    pBuffer: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseCcsric02_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cusparseCcsric02_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnz), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnz, "cusparseCcsric02_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseCcsric02_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedValA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedValA,
        "cusparseCcsric02_analysis",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedRowPtrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedRowPtrA,
        "cusparseCcsric02_analysis",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedColIndA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedColIndA,
        "cusparseCcsric02_analysis",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cusparseCcsric02_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(policy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&policy, "cusparseCcsric02_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBuffer), ": ").as_bytes())?;
    crate::CudaDisplay::write(&pBuffer, "cusparseCcsric02_analysis", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseZcsric02_analysis(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    m: ::core::ffi::c_int,
    nnz: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    csrSortedValA: *const cuda_types::cusparse::cuDoubleComplex,
    csrSortedRowPtrA: *const ::core::ffi::c_int,
    csrSortedColIndA: *const ::core::ffi::c_int,
    info: cuda_types::cusparse::csric02Info_t,
    policy: cuda_types::cusparse::cusparseSolvePolicy_t,
    pBuffer: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseZcsric02_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cusparseZcsric02_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnz), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnz, "cusparseZcsric02_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseZcsric02_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedValA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedValA,
        "cusparseZcsric02_analysis",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedRowPtrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedRowPtrA,
        "cusparseZcsric02_analysis",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedColIndA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedColIndA,
        "cusparseZcsric02_analysis",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cusparseZcsric02_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(policy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&policy, "cusparseZcsric02_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBuffer), ": ").as_bytes())?;
    crate::CudaDisplay::write(&pBuffer, "cusparseZcsric02_analysis", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseScsric02(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    m: ::core::ffi::c_int,
    nnz: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    csrSortedValA_valM: *mut f32,
    csrSortedRowPtrA: *const ::core::ffi::c_int,
    csrSortedColIndA: *const ::core::ffi::c_int,
    info: cuda_types::cusparse::csric02Info_t,
    policy: cuda_types::cusparse::cusparseSolvePolicy_t,
    pBuffer: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseScsric02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cusparseScsric02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnz), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnz, "cusparseScsric02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseScsric02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedValA_valM), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrSortedValA_valM, "cusparseScsric02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedRowPtrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrSortedRowPtrA, "cusparseScsric02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedColIndA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrSortedColIndA, "cusparseScsric02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cusparseScsric02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(policy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&policy, "cusparseScsric02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBuffer), ": ").as_bytes())?;
    crate::CudaDisplay::write(&pBuffer, "cusparseScsric02", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseDcsric02(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    m: ::core::ffi::c_int,
    nnz: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    csrSortedValA_valM: *mut f64,
    csrSortedRowPtrA: *const ::core::ffi::c_int,
    csrSortedColIndA: *const ::core::ffi::c_int,
    info: cuda_types::cusparse::csric02Info_t,
    policy: cuda_types::cusparse::cusparseSolvePolicy_t,
    pBuffer: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseDcsric02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cusparseDcsric02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnz), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnz, "cusparseDcsric02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseDcsric02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedValA_valM), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrSortedValA_valM, "cusparseDcsric02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedRowPtrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrSortedRowPtrA, "cusparseDcsric02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedColIndA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrSortedColIndA, "cusparseDcsric02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cusparseDcsric02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(policy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&policy, "cusparseDcsric02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBuffer), ": ").as_bytes())?;
    crate::CudaDisplay::write(&pBuffer, "cusparseDcsric02", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseCcsric02(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    m: ::core::ffi::c_int,
    nnz: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    csrSortedValA_valM: *mut cuda_types::cusparse::cuComplex,
    csrSortedRowPtrA: *const ::core::ffi::c_int,
    csrSortedColIndA: *const ::core::ffi::c_int,
    info: cuda_types::cusparse::csric02Info_t,
    policy: cuda_types::cusparse::cusparseSolvePolicy_t,
    pBuffer: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseCcsric02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cusparseCcsric02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnz), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnz, "cusparseCcsric02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseCcsric02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedValA_valM), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrSortedValA_valM, "cusparseCcsric02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedRowPtrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrSortedRowPtrA, "cusparseCcsric02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedColIndA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrSortedColIndA, "cusparseCcsric02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cusparseCcsric02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(policy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&policy, "cusparseCcsric02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBuffer), ": ").as_bytes())?;
    crate::CudaDisplay::write(&pBuffer, "cusparseCcsric02", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseZcsric02(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    m: ::core::ffi::c_int,
    nnz: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    csrSortedValA_valM: *mut cuda_types::cusparse::cuDoubleComplex,
    csrSortedRowPtrA: *const ::core::ffi::c_int,
    csrSortedColIndA: *const ::core::ffi::c_int,
    info: cuda_types::cusparse::csric02Info_t,
    policy: cuda_types::cusparse::cusparseSolvePolicy_t,
    pBuffer: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseZcsric02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cusparseZcsric02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnz), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnz, "cusparseZcsric02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseZcsric02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedValA_valM), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrSortedValA_valM, "cusparseZcsric02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedRowPtrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrSortedRowPtrA, "cusparseZcsric02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedColIndA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrSortedColIndA, "cusparseZcsric02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cusparseZcsric02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(policy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&policy, "cusparseZcsric02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBuffer), ": ").as_bytes())?;
    crate::CudaDisplay::write(&pBuffer, "cusparseZcsric02", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseXbsric02_zeroPivot(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    info: cuda_types::cusparse::bsric02Info_t,
    position: *mut ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseXbsric02_zeroPivot", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cusparseXbsric02_zeroPivot", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(position), ": ").as_bytes())?;
    crate::CudaDisplay::write(&position, "cusparseXbsric02_zeroPivot", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseSbsric02_bufferSize(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    dirA: cuda_types::cusparse::cusparseDirection_t,
    mb: ::core::ffi::c_int,
    nnzb: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    bsrSortedVal: *mut f32,
    bsrSortedRowPtr: *const ::core::ffi::c_int,
    bsrSortedColInd: *const ::core::ffi::c_int,
    blockDim: ::core::ffi::c_int,
    info: cuda_types::cusparse::bsric02Info_t,
    pBufferSizeInBytes: *mut ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseSbsric02_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dirA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dirA, "cusparseSbsric02_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(mb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&mb, "cusparseSbsric02_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnzb, "cusparseSbsric02_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseSbsric02_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedVal), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedVal,
        "cusparseSbsric02_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedRowPtr), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedRowPtr,
        "cusparseSbsric02_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedColInd), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedColInd,
        "cusparseSbsric02_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(blockDim), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &blockDim,
        "cusparseSbsric02_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cusparseSbsric02_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBufferSizeInBytes), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &pBufferSizeInBytes,
        "cusparseSbsric02_bufferSize",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseDbsric02_bufferSize(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    dirA: cuda_types::cusparse::cusparseDirection_t,
    mb: ::core::ffi::c_int,
    nnzb: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    bsrSortedVal: *mut f64,
    bsrSortedRowPtr: *const ::core::ffi::c_int,
    bsrSortedColInd: *const ::core::ffi::c_int,
    blockDim: ::core::ffi::c_int,
    info: cuda_types::cusparse::bsric02Info_t,
    pBufferSizeInBytes: *mut ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseDbsric02_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dirA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dirA, "cusparseDbsric02_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(mb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&mb, "cusparseDbsric02_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnzb, "cusparseDbsric02_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseDbsric02_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedVal), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedVal,
        "cusparseDbsric02_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedRowPtr), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedRowPtr,
        "cusparseDbsric02_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedColInd), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedColInd,
        "cusparseDbsric02_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(blockDim), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &blockDim,
        "cusparseDbsric02_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cusparseDbsric02_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBufferSizeInBytes), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &pBufferSizeInBytes,
        "cusparseDbsric02_bufferSize",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseCbsric02_bufferSize(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    dirA: cuda_types::cusparse::cusparseDirection_t,
    mb: ::core::ffi::c_int,
    nnzb: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    bsrSortedVal: *mut cuda_types::cusparse::cuComplex,
    bsrSortedRowPtr: *const ::core::ffi::c_int,
    bsrSortedColInd: *const ::core::ffi::c_int,
    blockDim: ::core::ffi::c_int,
    info: cuda_types::cusparse::bsric02Info_t,
    pBufferSizeInBytes: *mut ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseCbsric02_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dirA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dirA, "cusparseCbsric02_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(mb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&mb, "cusparseCbsric02_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnzb, "cusparseCbsric02_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseCbsric02_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedVal), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedVal,
        "cusparseCbsric02_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedRowPtr), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedRowPtr,
        "cusparseCbsric02_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedColInd), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedColInd,
        "cusparseCbsric02_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(blockDim), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &blockDim,
        "cusparseCbsric02_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cusparseCbsric02_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBufferSizeInBytes), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &pBufferSizeInBytes,
        "cusparseCbsric02_bufferSize",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseZbsric02_bufferSize(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    dirA: cuda_types::cusparse::cusparseDirection_t,
    mb: ::core::ffi::c_int,
    nnzb: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    bsrSortedVal: *mut cuda_types::cusparse::cuDoubleComplex,
    bsrSortedRowPtr: *const ::core::ffi::c_int,
    bsrSortedColInd: *const ::core::ffi::c_int,
    blockDim: ::core::ffi::c_int,
    info: cuda_types::cusparse::bsric02Info_t,
    pBufferSizeInBytes: *mut ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseZbsric02_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dirA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dirA, "cusparseZbsric02_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(mb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&mb, "cusparseZbsric02_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnzb, "cusparseZbsric02_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseZbsric02_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedVal), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedVal,
        "cusparseZbsric02_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedRowPtr), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedRowPtr,
        "cusparseZbsric02_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedColInd), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedColInd,
        "cusparseZbsric02_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(blockDim), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &blockDim,
        "cusparseZbsric02_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cusparseZbsric02_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBufferSizeInBytes), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &pBufferSizeInBytes,
        "cusparseZbsric02_bufferSize",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseSbsric02_bufferSizeExt(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    dirA: cuda_types::cusparse::cusparseDirection_t,
    mb: ::core::ffi::c_int,
    nnzb: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    bsrSortedVal: *mut f32,
    bsrSortedRowPtr: *const ::core::ffi::c_int,
    bsrSortedColInd: *const ::core::ffi::c_int,
    blockSize: ::core::ffi::c_int,
    info: cuda_types::cusparse::bsric02Info_t,
    pBufferSize: *mut usize,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &handle,
        "cusparseSbsric02_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dirA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dirA, "cusparseSbsric02_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(mb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&mb, "cusparseSbsric02_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnzb, "cusparseSbsric02_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &descrA,
        "cusparseSbsric02_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedVal), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedVal,
        "cusparseSbsric02_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedRowPtr), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedRowPtr,
        "cusparseSbsric02_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedColInd), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedColInd,
        "cusparseSbsric02_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(blockSize), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &blockSize,
        "cusparseSbsric02_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cusparseSbsric02_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBufferSize), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &pBufferSize,
        "cusparseSbsric02_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseDbsric02_bufferSizeExt(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    dirA: cuda_types::cusparse::cusparseDirection_t,
    mb: ::core::ffi::c_int,
    nnzb: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    bsrSortedVal: *mut f64,
    bsrSortedRowPtr: *const ::core::ffi::c_int,
    bsrSortedColInd: *const ::core::ffi::c_int,
    blockSize: ::core::ffi::c_int,
    info: cuda_types::cusparse::bsric02Info_t,
    pBufferSize: *mut usize,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &handle,
        "cusparseDbsric02_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dirA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dirA, "cusparseDbsric02_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(mb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&mb, "cusparseDbsric02_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnzb, "cusparseDbsric02_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &descrA,
        "cusparseDbsric02_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedVal), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedVal,
        "cusparseDbsric02_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedRowPtr), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedRowPtr,
        "cusparseDbsric02_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedColInd), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedColInd,
        "cusparseDbsric02_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(blockSize), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &blockSize,
        "cusparseDbsric02_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cusparseDbsric02_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBufferSize), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &pBufferSize,
        "cusparseDbsric02_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseCbsric02_bufferSizeExt(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    dirA: cuda_types::cusparse::cusparseDirection_t,
    mb: ::core::ffi::c_int,
    nnzb: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    bsrSortedVal: *mut cuda_types::cusparse::cuComplex,
    bsrSortedRowPtr: *const ::core::ffi::c_int,
    bsrSortedColInd: *const ::core::ffi::c_int,
    blockSize: ::core::ffi::c_int,
    info: cuda_types::cusparse::bsric02Info_t,
    pBufferSize: *mut usize,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &handle,
        "cusparseCbsric02_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dirA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dirA, "cusparseCbsric02_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(mb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&mb, "cusparseCbsric02_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnzb, "cusparseCbsric02_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &descrA,
        "cusparseCbsric02_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedVal), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedVal,
        "cusparseCbsric02_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedRowPtr), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedRowPtr,
        "cusparseCbsric02_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedColInd), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedColInd,
        "cusparseCbsric02_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(blockSize), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &blockSize,
        "cusparseCbsric02_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cusparseCbsric02_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBufferSize), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &pBufferSize,
        "cusparseCbsric02_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseZbsric02_bufferSizeExt(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    dirA: cuda_types::cusparse::cusparseDirection_t,
    mb: ::core::ffi::c_int,
    nnzb: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    bsrSortedVal: *mut cuda_types::cusparse::cuDoubleComplex,
    bsrSortedRowPtr: *const ::core::ffi::c_int,
    bsrSortedColInd: *const ::core::ffi::c_int,
    blockSize: ::core::ffi::c_int,
    info: cuda_types::cusparse::bsric02Info_t,
    pBufferSize: *mut usize,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &handle,
        "cusparseZbsric02_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dirA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dirA, "cusparseZbsric02_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(mb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&mb, "cusparseZbsric02_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnzb, "cusparseZbsric02_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &descrA,
        "cusparseZbsric02_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedVal), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedVal,
        "cusparseZbsric02_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedRowPtr), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedRowPtr,
        "cusparseZbsric02_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedColInd), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedColInd,
        "cusparseZbsric02_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(blockSize), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &blockSize,
        "cusparseZbsric02_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cusparseZbsric02_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBufferSize), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &pBufferSize,
        "cusparseZbsric02_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseSbsric02_analysis(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    dirA: cuda_types::cusparse::cusparseDirection_t,
    mb: ::core::ffi::c_int,
    nnzb: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    bsrSortedVal: *const f32,
    bsrSortedRowPtr: *const ::core::ffi::c_int,
    bsrSortedColInd: *const ::core::ffi::c_int,
    blockDim: ::core::ffi::c_int,
    info: cuda_types::cusparse::bsric02Info_t,
    policy: cuda_types::cusparse::cusparseSolvePolicy_t,
    pInputBuffer: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseSbsric02_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dirA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dirA, "cusparseSbsric02_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(mb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&mb, "cusparseSbsric02_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnzb, "cusparseSbsric02_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseSbsric02_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedVal), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedVal,
        "cusparseSbsric02_analysis",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedRowPtr), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedRowPtr,
        "cusparseSbsric02_analysis",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedColInd), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedColInd,
        "cusparseSbsric02_analysis",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(blockDim), ": ").as_bytes())?;
    crate::CudaDisplay::write(&blockDim, "cusparseSbsric02_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cusparseSbsric02_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(policy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&policy, "cusparseSbsric02_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pInputBuffer), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &pInputBuffer,
        "cusparseSbsric02_analysis",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseDbsric02_analysis(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    dirA: cuda_types::cusparse::cusparseDirection_t,
    mb: ::core::ffi::c_int,
    nnzb: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    bsrSortedVal: *const f64,
    bsrSortedRowPtr: *const ::core::ffi::c_int,
    bsrSortedColInd: *const ::core::ffi::c_int,
    blockDim: ::core::ffi::c_int,
    info: cuda_types::cusparse::bsric02Info_t,
    policy: cuda_types::cusparse::cusparseSolvePolicy_t,
    pInputBuffer: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseDbsric02_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dirA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dirA, "cusparseDbsric02_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(mb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&mb, "cusparseDbsric02_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnzb, "cusparseDbsric02_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseDbsric02_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedVal), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedVal,
        "cusparseDbsric02_analysis",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedRowPtr), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedRowPtr,
        "cusparseDbsric02_analysis",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedColInd), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedColInd,
        "cusparseDbsric02_analysis",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(blockDim), ": ").as_bytes())?;
    crate::CudaDisplay::write(&blockDim, "cusparseDbsric02_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cusparseDbsric02_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(policy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&policy, "cusparseDbsric02_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pInputBuffer), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &pInputBuffer,
        "cusparseDbsric02_analysis",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseCbsric02_analysis(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    dirA: cuda_types::cusparse::cusparseDirection_t,
    mb: ::core::ffi::c_int,
    nnzb: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    bsrSortedVal: *const cuda_types::cusparse::cuComplex,
    bsrSortedRowPtr: *const ::core::ffi::c_int,
    bsrSortedColInd: *const ::core::ffi::c_int,
    blockDim: ::core::ffi::c_int,
    info: cuda_types::cusparse::bsric02Info_t,
    policy: cuda_types::cusparse::cusparseSolvePolicy_t,
    pInputBuffer: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseCbsric02_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dirA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dirA, "cusparseCbsric02_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(mb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&mb, "cusparseCbsric02_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnzb, "cusparseCbsric02_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseCbsric02_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedVal), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedVal,
        "cusparseCbsric02_analysis",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedRowPtr), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedRowPtr,
        "cusparseCbsric02_analysis",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedColInd), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedColInd,
        "cusparseCbsric02_analysis",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(blockDim), ": ").as_bytes())?;
    crate::CudaDisplay::write(&blockDim, "cusparseCbsric02_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cusparseCbsric02_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(policy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&policy, "cusparseCbsric02_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pInputBuffer), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &pInputBuffer,
        "cusparseCbsric02_analysis",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseZbsric02_analysis(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    dirA: cuda_types::cusparse::cusparseDirection_t,
    mb: ::core::ffi::c_int,
    nnzb: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    bsrSortedVal: *const cuda_types::cusparse::cuDoubleComplex,
    bsrSortedRowPtr: *const ::core::ffi::c_int,
    bsrSortedColInd: *const ::core::ffi::c_int,
    blockDim: ::core::ffi::c_int,
    info: cuda_types::cusparse::bsric02Info_t,
    policy: cuda_types::cusparse::cusparseSolvePolicy_t,
    pInputBuffer: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseZbsric02_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dirA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dirA, "cusparseZbsric02_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(mb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&mb, "cusparseZbsric02_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnzb, "cusparseZbsric02_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseZbsric02_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedVal), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedVal,
        "cusparseZbsric02_analysis",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedRowPtr), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedRowPtr,
        "cusparseZbsric02_analysis",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedColInd), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedColInd,
        "cusparseZbsric02_analysis",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(blockDim), ": ").as_bytes())?;
    crate::CudaDisplay::write(&blockDim, "cusparseZbsric02_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cusparseZbsric02_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(policy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&policy, "cusparseZbsric02_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pInputBuffer), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &pInputBuffer,
        "cusparseZbsric02_analysis",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseSbsric02(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    dirA: cuda_types::cusparse::cusparseDirection_t,
    mb: ::core::ffi::c_int,
    nnzb: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    bsrSortedVal: *mut f32,
    bsrSortedRowPtr: *const ::core::ffi::c_int,
    bsrSortedColInd: *const ::core::ffi::c_int,
    blockDim: ::core::ffi::c_int,
    info: cuda_types::cusparse::bsric02Info_t,
    policy: cuda_types::cusparse::cusparseSolvePolicy_t,
    pBuffer: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseSbsric02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dirA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dirA, "cusparseSbsric02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(mb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&mb, "cusparseSbsric02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnzb, "cusparseSbsric02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseSbsric02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedVal), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrSortedVal, "cusparseSbsric02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedRowPtr), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrSortedRowPtr, "cusparseSbsric02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedColInd), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrSortedColInd, "cusparseSbsric02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(blockDim), ": ").as_bytes())?;
    crate::CudaDisplay::write(&blockDim, "cusparseSbsric02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cusparseSbsric02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(policy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&policy, "cusparseSbsric02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBuffer), ": ").as_bytes())?;
    crate::CudaDisplay::write(&pBuffer, "cusparseSbsric02", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseDbsric02(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    dirA: cuda_types::cusparse::cusparseDirection_t,
    mb: ::core::ffi::c_int,
    nnzb: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    bsrSortedVal: *mut f64,
    bsrSortedRowPtr: *const ::core::ffi::c_int,
    bsrSortedColInd: *const ::core::ffi::c_int,
    blockDim: ::core::ffi::c_int,
    info: cuda_types::cusparse::bsric02Info_t,
    policy: cuda_types::cusparse::cusparseSolvePolicy_t,
    pBuffer: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseDbsric02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dirA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dirA, "cusparseDbsric02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(mb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&mb, "cusparseDbsric02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnzb, "cusparseDbsric02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseDbsric02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedVal), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrSortedVal, "cusparseDbsric02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedRowPtr), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrSortedRowPtr, "cusparseDbsric02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedColInd), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrSortedColInd, "cusparseDbsric02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(blockDim), ": ").as_bytes())?;
    crate::CudaDisplay::write(&blockDim, "cusparseDbsric02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cusparseDbsric02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(policy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&policy, "cusparseDbsric02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBuffer), ": ").as_bytes())?;
    crate::CudaDisplay::write(&pBuffer, "cusparseDbsric02", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseCbsric02(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    dirA: cuda_types::cusparse::cusparseDirection_t,
    mb: ::core::ffi::c_int,
    nnzb: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    bsrSortedVal: *mut cuda_types::cusparse::cuComplex,
    bsrSortedRowPtr: *const ::core::ffi::c_int,
    bsrSortedColInd: *const ::core::ffi::c_int,
    blockDim: ::core::ffi::c_int,
    info: cuda_types::cusparse::bsric02Info_t,
    policy: cuda_types::cusparse::cusparseSolvePolicy_t,
    pBuffer: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseCbsric02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dirA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dirA, "cusparseCbsric02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(mb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&mb, "cusparseCbsric02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnzb, "cusparseCbsric02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseCbsric02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedVal), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrSortedVal, "cusparseCbsric02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedRowPtr), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrSortedRowPtr, "cusparseCbsric02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedColInd), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrSortedColInd, "cusparseCbsric02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(blockDim), ": ").as_bytes())?;
    crate::CudaDisplay::write(&blockDim, "cusparseCbsric02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cusparseCbsric02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(policy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&policy, "cusparseCbsric02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBuffer), ": ").as_bytes())?;
    crate::CudaDisplay::write(&pBuffer, "cusparseCbsric02", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseZbsric02(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    dirA: cuda_types::cusparse::cusparseDirection_t,
    mb: ::core::ffi::c_int,
    nnzb: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    bsrSortedVal: *mut cuda_types::cusparse::cuDoubleComplex,
    bsrSortedRowPtr: *const ::core::ffi::c_int,
    bsrSortedColInd: *const ::core::ffi::c_int,
    blockDim: ::core::ffi::c_int,
    info: cuda_types::cusparse::bsric02Info_t,
    policy: cuda_types::cusparse::cusparseSolvePolicy_t,
    pBuffer: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseZbsric02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dirA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dirA, "cusparseZbsric02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(mb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&mb, "cusparseZbsric02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnzb, "cusparseZbsric02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseZbsric02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedVal), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrSortedVal, "cusparseZbsric02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedRowPtr), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrSortedRowPtr, "cusparseZbsric02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedColInd), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrSortedColInd, "cusparseZbsric02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(blockDim), ": ").as_bytes())?;
    crate::CudaDisplay::write(&blockDim, "cusparseZbsric02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cusparseZbsric02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(policy), ": ").as_bytes())?;
    crate::CudaDisplay::write(&policy, "cusparseZbsric02", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBuffer), ": ").as_bytes())?;
    crate::CudaDisplay::write(&pBuffer, "cusparseZbsric02", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseSgtsv2_bufferSizeExt(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    dl: *const f32,
    d: *const f32,
    du: *const f32,
    B: *const f32,
    ldb: ::core::ffi::c_int,
    bufferSizeInBytes: *mut usize,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseSgtsv2_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cusparseSgtsv2_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cusparseSgtsv2_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dl), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dl, "cusparseSgtsv2_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(d), ": ").as_bytes())?;
    crate::CudaDisplay::write(&d, "cusparseSgtsv2_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(du), ": ").as_bytes())?;
    crate::CudaDisplay::write(&du, "cusparseSgtsv2_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(B), ": ").as_bytes())?;
    crate::CudaDisplay::write(&B, "cusparseSgtsv2_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cusparseSgtsv2_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bufferSizeInBytes), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bufferSizeInBytes,
        "cusparseSgtsv2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseDgtsv2_bufferSizeExt(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    dl: *const f64,
    d: *const f64,
    du: *const f64,
    B: *const f64,
    ldb: ::core::ffi::c_int,
    bufferSizeInBytes: *mut usize,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseDgtsv2_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cusparseDgtsv2_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cusparseDgtsv2_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dl), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dl, "cusparseDgtsv2_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(d), ": ").as_bytes())?;
    crate::CudaDisplay::write(&d, "cusparseDgtsv2_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(du), ": ").as_bytes())?;
    crate::CudaDisplay::write(&du, "cusparseDgtsv2_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(B), ": ").as_bytes())?;
    crate::CudaDisplay::write(&B, "cusparseDgtsv2_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cusparseDgtsv2_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bufferSizeInBytes), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bufferSizeInBytes,
        "cusparseDgtsv2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseCgtsv2_bufferSizeExt(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    dl: *const cuda_types::cusparse::cuComplex,
    d: *const cuda_types::cusparse::cuComplex,
    du: *const cuda_types::cusparse::cuComplex,
    B: *const cuda_types::cusparse::cuComplex,
    ldb: ::core::ffi::c_int,
    bufferSizeInBytes: *mut usize,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseCgtsv2_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cusparseCgtsv2_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cusparseCgtsv2_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dl), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dl, "cusparseCgtsv2_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(d), ": ").as_bytes())?;
    crate::CudaDisplay::write(&d, "cusparseCgtsv2_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(du), ": ").as_bytes())?;
    crate::CudaDisplay::write(&du, "cusparseCgtsv2_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(B), ": ").as_bytes())?;
    crate::CudaDisplay::write(&B, "cusparseCgtsv2_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cusparseCgtsv2_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bufferSizeInBytes), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bufferSizeInBytes,
        "cusparseCgtsv2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseZgtsv2_bufferSizeExt(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    dl: *const cuda_types::cusparse::cuDoubleComplex,
    d: *const cuda_types::cusparse::cuDoubleComplex,
    du: *const cuda_types::cusparse::cuDoubleComplex,
    B: *const cuda_types::cusparse::cuDoubleComplex,
    ldb: ::core::ffi::c_int,
    bufferSizeInBytes: *mut usize,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseZgtsv2_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cusparseZgtsv2_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cusparseZgtsv2_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dl), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dl, "cusparseZgtsv2_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(d), ": ").as_bytes())?;
    crate::CudaDisplay::write(&d, "cusparseZgtsv2_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(du), ": ").as_bytes())?;
    crate::CudaDisplay::write(&du, "cusparseZgtsv2_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(B), ": ").as_bytes())?;
    crate::CudaDisplay::write(&B, "cusparseZgtsv2_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cusparseZgtsv2_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bufferSizeInBytes), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bufferSizeInBytes,
        "cusparseZgtsv2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseSgtsv2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    dl: *const f32,
    d: *const f32,
    du: *const f32,
    B: *mut f32,
    ldb: ::core::ffi::c_int,
    pBuffer: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseSgtsv2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cusparseSgtsv2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cusparseSgtsv2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dl), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dl, "cusparseSgtsv2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(d), ": ").as_bytes())?;
    crate::CudaDisplay::write(&d, "cusparseSgtsv2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(du), ": ").as_bytes())?;
    crate::CudaDisplay::write(&du, "cusparseSgtsv2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(B), ": ").as_bytes())?;
    crate::CudaDisplay::write(&B, "cusparseSgtsv2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cusparseSgtsv2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBuffer), ": ").as_bytes())?;
    crate::CudaDisplay::write(&pBuffer, "cusparseSgtsv2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseDgtsv2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    dl: *const f64,
    d: *const f64,
    du: *const f64,
    B: *mut f64,
    ldb: ::core::ffi::c_int,
    pBuffer: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseDgtsv2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cusparseDgtsv2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cusparseDgtsv2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dl), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dl, "cusparseDgtsv2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(d), ": ").as_bytes())?;
    crate::CudaDisplay::write(&d, "cusparseDgtsv2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(du), ": ").as_bytes())?;
    crate::CudaDisplay::write(&du, "cusparseDgtsv2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(B), ": ").as_bytes())?;
    crate::CudaDisplay::write(&B, "cusparseDgtsv2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cusparseDgtsv2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBuffer), ": ").as_bytes())?;
    crate::CudaDisplay::write(&pBuffer, "cusparseDgtsv2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseCgtsv2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    dl: *const cuda_types::cusparse::cuComplex,
    d: *const cuda_types::cusparse::cuComplex,
    du: *const cuda_types::cusparse::cuComplex,
    B: *mut cuda_types::cusparse::cuComplex,
    ldb: ::core::ffi::c_int,
    pBuffer: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseCgtsv2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cusparseCgtsv2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cusparseCgtsv2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dl), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dl, "cusparseCgtsv2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(d), ": ").as_bytes())?;
    crate::CudaDisplay::write(&d, "cusparseCgtsv2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(du), ": ").as_bytes())?;
    crate::CudaDisplay::write(&du, "cusparseCgtsv2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(B), ": ").as_bytes())?;
    crate::CudaDisplay::write(&B, "cusparseCgtsv2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cusparseCgtsv2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBuffer), ": ").as_bytes())?;
    crate::CudaDisplay::write(&pBuffer, "cusparseCgtsv2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseZgtsv2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    dl: *const cuda_types::cusparse::cuDoubleComplex,
    d: *const cuda_types::cusparse::cuDoubleComplex,
    du: *const cuda_types::cusparse::cuDoubleComplex,
    B: *mut cuda_types::cusparse::cuDoubleComplex,
    ldb: ::core::ffi::c_int,
    pBuffer: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseZgtsv2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cusparseZgtsv2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cusparseZgtsv2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dl), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dl, "cusparseZgtsv2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(d), ": ").as_bytes())?;
    crate::CudaDisplay::write(&d, "cusparseZgtsv2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(du), ": ").as_bytes())?;
    crate::CudaDisplay::write(&du, "cusparseZgtsv2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(B), ": ").as_bytes())?;
    crate::CudaDisplay::write(&B, "cusparseZgtsv2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cusparseZgtsv2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBuffer), ": ").as_bytes())?;
    crate::CudaDisplay::write(&pBuffer, "cusparseZgtsv2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseSgtsv2_nopivot_bufferSizeExt(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    dl: *const f32,
    d: *const f32,
    du: *const f32,
    B: *const f32,
    ldb: ::core::ffi::c_int,
    bufferSizeInBytes: *mut usize,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &handle,
        "cusparseSgtsv2_nopivot_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &m,
        "cusparseSgtsv2_nopivot_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &n,
        "cusparseSgtsv2_nopivot_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dl), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &dl,
        "cusparseSgtsv2_nopivot_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(d), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &d,
        "cusparseSgtsv2_nopivot_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(du), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &du,
        "cusparseSgtsv2_nopivot_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(B), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &B,
        "cusparseSgtsv2_nopivot_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &ldb,
        "cusparseSgtsv2_nopivot_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bufferSizeInBytes), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bufferSizeInBytes,
        "cusparseSgtsv2_nopivot_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseDgtsv2_nopivot_bufferSizeExt(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    dl: *const f64,
    d: *const f64,
    du: *const f64,
    B: *const f64,
    ldb: ::core::ffi::c_int,
    bufferSizeInBytes: *mut usize,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &handle,
        "cusparseDgtsv2_nopivot_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &m,
        "cusparseDgtsv2_nopivot_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &n,
        "cusparseDgtsv2_nopivot_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dl), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &dl,
        "cusparseDgtsv2_nopivot_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(d), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &d,
        "cusparseDgtsv2_nopivot_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(du), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &du,
        "cusparseDgtsv2_nopivot_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(B), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &B,
        "cusparseDgtsv2_nopivot_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &ldb,
        "cusparseDgtsv2_nopivot_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bufferSizeInBytes), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bufferSizeInBytes,
        "cusparseDgtsv2_nopivot_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseCgtsv2_nopivot_bufferSizeExt(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    dl: *const cuda_types::cusparse::cuComplex,
    d: *const cuda_types::cusparse::cuComplex,
    du: *const cuda_types::cusparse::cuComplex,
    B: *const cuda_types::cusparse::cuComplex,
    ldb: ::core::ffi::c_int,
    bufferSizeInBytes: *mut usize,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &handle,
        "cusparseCgtsv2_nopivot_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &m,
        "cusparseCgtsv2_nopivot_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &n,
        "cusparseCgtsv2_nopivot_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dl), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &dl,
        "cusparseCgtsv2_nopivot_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(d), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &d,
        "cusparseCgtsv2_nopivot_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(du), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &du,
        "cusparseCgtsv2_nopivot_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(B), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &B,
        "cusparseCgtsv2_nopivot_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &ldb,
        "cusparseCgtsv2_nopivot_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bufferSizeInBytes), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bufferSizeInBytes,
        "cusparseCgtsv2_nopivot_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseZgtsv2_nopivot_bufferSizeExt(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    dl: *const cuda_types::cusparse::cuDoubleComplex,
    d: *const cuda_types::cusparse::cuDoubleComplex,
    du: *const cuda_types::cusparse::cuDoubleComplex,
    B: *const cuda_types::cusparse::cuDoubleComplex,
    ldb: ::core::ffi::c_int,
    bufferSizeInBytes: *mut usize,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &handle,
        "cusparseZgtsv2_nopivot_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &m,
        "cusparseZgtsv2_nopivot_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &n,
        "cusparseZgtsv2_nopivot_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dl), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &dl,
        "cusparseZgtsv2_nopivot_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(d), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &d,
        "cusparseZgtsv2_nopivot_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(du), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &du,
        "cusparseZgtsv2_nopivot_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(B), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &B,
        "cusparseZgtsv2_nopivot_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &ldb,
        "cusparseZgtsv2_nopivot_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bufferSizeInBytes), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bufferSizeInBytes,
        "cusparseZgtsv2_nopivot_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseSgtsv2_nopivot(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    dl: *const f32,
    d: *const f32,
    du: *const f32,
    B: *mut f32,
    ldb: ::core::ffi::c_int,
    pBuffer: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseSgtsv2_nopivot", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cusparseSgtsv2_nopivot", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cusparseSgtsv2_nopivot", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dl), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dl, "cusparseSgtsv2_nopivot", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(d), ": ").as_bytes())?;
    crate::CudaDisplay::write(&d, "cusparseSgtsv2_nopivot", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(du), ": ").as_bytes())?;
    crate::CudaDisplay::write(&du, "cusparseSgtsv2_nopivot", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(B), ": ").as_bytes())?;
    crate::CudaDisplay::write(&B, "cusparseSgtsv2_nopivot", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cusparseSgtsv2_nopivot", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBuffer), ": ").as_bytes())?;
    crate::CudaDisplay::write(&pBuffer, "cusparseSgtsv2_nopivot", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseDgtsv2_nopivot(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    dl: *const f64,
    d: *const f64,
    du: *const f64,
    B: *mut f64,
    ldb: ::core::ffi::c_int,
    pBuffer: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseDgtsv2_nopivot", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cusparseDgtsv2_nopivot", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cusparseDgtsv2_nopivot", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dl), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dl, "cusparseDgtsv2_nopivot", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(d), ": ").as_bytes())?;
    crate::CudaDisplay::write(&d, "cusparseDgtsv2_nopivot", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(du), ": ").as_bytes())?;
    crate::CudaDisplay::write(&du, "cusparseDgtsv2_nopivot", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(B), ": ").as_bytes())?;
    crate::CudaDisplay::write(&B, "cusparseDgtsv2_nopivot", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cusparseDgtsv2_nopivot", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBuffer), ": ").as_bytes())?;
    crate::CudaDisplay::write(&pBuffer, "cusparseDgtsv2_nopivot", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseCgtsv2_nopivot(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    dl: *const cuda_types::cusparse::cuComplex,
    d: *const cuda_types::cusparse::cuComplex,
    du: *const cuda_types::cusparse::cuComplex,
    B: *mut cuda_types::cusparse::cuComplex,
    ldb: ::core::ffi::c_int,
    pBuffer: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseCgtsv2_nopivot", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cusparseCgtsv2_nopivot", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cusparseCgtsv2_nopivot", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dl), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dl, "cusparseCgtsv2_nopivot", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(d), ": ").as_bytes())?;
    crate::CudaDisplay::write(&d, "cusparseCgtsv2_nopivot", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(du), ": ").as_bytes())?;
    crate::CudaDisplay::write(&du, "cusparseCgtsv2_nopivot", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(B), ": ").as_bytes())?;
    crate::CudaDisplay::write(&B, "cusparseCgtsv2_nopivot", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cusparseCgtsv2_nopivot", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBuffer), ": ").as_bytes())?;
    crate::CudaDisplay::write(&pBuffer, "cusparseCgtsv2_nopivot", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseZgtsv2_nopivot(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    dl: *const cuda_types::cusparse::cuDoubleComplex,
    d: *const cuda_types::cusparse::cuDoubleComplex,
    du: *const cuda_types::cusparse::cuDoubleComplex,
    B: *mut cuda_types::cusparse::cuDoubleComplex,
    ldb: ::core::ffi::c_int,
    pBuffer: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseZgtsv2_nopivot", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cusparseZgtsv2_nopivot", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cusparseZgtsv2_nopivot", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dl), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dl, "cusparseZgtsv2_nopivot", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(d), ": ").as_bytes())?;
    crate::CudaDisplay::write(&d, "cusparseZgtsv2_nopivot", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(du), ": ").as_bytes())?;
    crate::CudaDisplay::write(&du, "cusparseZgtsv2_nopivot", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(B), ": ").as_bytes())?;
    crate::CudaDisplay::write(&B, "cusparseZgtsv2_nopivot", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ldb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ldb, "cusparseZgtsv2_nopivot", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBuffer), ": ").as_bytes())?;
    crate::CudaDisplay::write(&pBuffer, "cusparseZgtsv2_nopivot", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseSgtsv2StridedBatch_bufferSizeExt(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    m: ::core::ffi::c_int,
    dl: *const f32,
    d: *const f32,
    du: *const f32,
    x: *const f32,
    batchCount: ::core::ffi::c_int,
    batchStride: ::core::ffi::c_int,
    bufferSizeInBytes: *mut usize,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &handle,
        "cusparseSgtsv2StridedBatch_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &m,
        "cusparseSgtsv2StridedBatch_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dl), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &dl,
        "cusparseSgtsv2StridedBatch_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(d), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &d,
        "cusparseSgtsv2StridedBatch_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(du), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &du,
        "cusparseSgtsv2StridedBatch_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &x,
        "cusparseSgtsv2StridedBatch_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(batchCount), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &batchCount,
        "cusparseSgtsv2StridedBatch_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(batchStride), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &batchStride,
        "cusparseSgtsv2StridedBatch_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bufferSizeInBytes), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bufferSizeInBytes,
        "cusparseSgtsv2StridedBatch_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseDgtsv2StridedBatch_bufferSizeExt(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    m: ::core::ffi::c_int,
    dl: *const f64,
    d: *const f64,
    du: *const f64,
    x: *const f64,
    batchCount: ::core::ffi::c_int,
    batchStride: ::core::ffi::c_int,
    bufferSizeInBytes: *mut usize,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &handle,
        "cusparseDgtsv2StridedBatch_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &m,
        "cusparseDgtsv2StridedBatch_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dl), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &dl,
        "cusparseDgtsv2StridedBatch_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(d), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &d,
        "cusparseDgtsv2StridedBatch_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(du), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &du,
        "cusparseDgtsv2StridedBatch_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &x,
        "cusparseDgtsv2StridedBatch_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(batchCount), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &batchCount,
        "cusparseDgtsv2StridedBatch_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(batchStride), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &batchStride,
        "cusparseDgtsv2StridedBatch_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bufferSizeInBytes), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bufferSizeInBytes,
        "cusparseDgtsv2StridedBatch_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseCgtsv2StridedBatch_bufferSizeExt(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    m: ::core::ffi::c_int,
    dl: *const cuda_types::cusparse::cuComplex,
    d: *const cuda_types::cusparse::cuComplex,
    du: *const cuda_types::cusparse::cuComplex,
    x: *const cuda_types::cusparse::cuComplex,
    batchCount: ::core::ffi::c_int,
    batchStride: ::core::ffi::c_int,
    bufferSizeInBytes: *mut usize,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &handle,
        "cusparseCgtsv2StridedBatch_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &m,
        "cusparseCgtsv2StridedBatch_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dl), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &dl,
        "cusparseCgtsv2StridedBatch_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(d), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &d,
        "cusparseCgtsv2StridedBatch_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(du), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &du,
        "cusparseCgtsv2StridedBatch_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &x,
        "cusparseCgtsv2StridedBatch_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(batchCount), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &batchCount,
        "cusparseCgtsv2StridedBatch_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(batchStride), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &batchStride,
        "cusparseCgtsv2StridedBatch_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bufferSizeInBytes), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bufferSizeInBytes,
        "cusparseCgtsv2StridedBatch_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseZgtsv2StridedBatch_bufferSizeExt(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    m: ::core::ffi::c_int,
    dl: *const cuda_types::cusparse::cuDoubleComplex,
    d: *const cuda_types::cusparse::cuDoubleComplex,
    du: *const cuda_types::cusparse::cuDoubleComplex,
    x: *const cuda_types::cusparse::cuDoubleComplex,
    batchCount: ::core::ffi::c_int,
    batchStride: ::core::ffi::c_int,
    bufferSizeInBytes: *mut usize,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &handle,
        "cusparseZgtsv2StridedBatch_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &m,
        "cusparseZgtsv2StridedBatch_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dl), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &dl,
        "cusparseZgtsv2StridedBatch_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(d), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &d,
        "cusparseZgtsv2StridedBatch_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(du), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &du,
        "cusparseZgtsv2StridedBatch_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &x,
        "cusparseZgtsv2StridedBatch_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(batchCount), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &batchCount,
        "cusparseZgtsv2StridedBatch_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(batchStride), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &batchStride,
        "cusparseZgtsv2StridedBatch_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bufferSizeInBytes), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bufferSizeInBytes,
        "cusparseZgtsv2StridedBatch_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseSgtsv2StridedBatch(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    m: ::core::ffi::c_int,
    dl: *const f32,
    d: *const f32,
    du: *const f32,
    x: *mut f32,
    batchCount: ::core::ffi::c_int,
    batchStride: ::core::ffi::c_int,
    pBuffer: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseSgtsv2StridedBatch", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cusparseSgtsv2StridedBatch", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dl), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dl, "cusparseSgtsv2StridedBatch", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(d), ": ").as_bytes())?;
    crate::CudaDisplay::write(&d, "cusparseSgtsv2StridedBatch", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(du), ": ").as_bytes())?;
    crate::CudaDisplay::write(&du, "cusparseSgtsv2StridedBatch", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cusparseSgtsv2StridedBatch", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(batchCount), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &batchCount,
        "cusparseSgtsv2StridedBatch",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(batchStride), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &batchStride,
        "cusparseSgtsv2StridedBatch",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBuffer), ": ").as_bytes())?;
    crate::CudaDisplay::write(&pBuffer, "cusparseSgtsv2StridedBatch", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseDgtsv2StridedBatch(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    m: ::core::ffi::c_int,
    dl: *const f64,
    d: *const f64,
    du: *const f64,
    x: *mut f64,
    batchCount: ::core::ffi::c_int,
    batchStride: ::core::ffi::c_int,
    pBuffer: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseDgtsv2StridedBatch", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cusparseDgtsv2StridedBatch", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dl), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dl, "cusparseDgtsv2StridedBatch", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(d), ": ").as_bytes())?;
    crate::CudaDisplay::write(&d, "cusparseDgtsv2StridedBatch", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(du), ": ").as_bytes())?;
    crate::CudaDisplay::write(&du, "cusparseDgtsv2StridedBatch", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cusparseDgtsv2StridedBatch", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(batchCount), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &batchCount,
        "cusparseDgtsv2StridedBatch",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(batchStride), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &batchStride,
        "cusparseDgtsv2StridedBatch",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBuffer), ": ").as_bytes())?;
    crate::CudaDisplay::write(&pBuffer, "cusparseDgtsv2StridedBatch", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseCgtsv2StridedBatch(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    m: ::core::ffi::c_int,
    dl: *const cuda_types::cusparse::cuComplex,
    d: *const cuda_types::cusparse::cuComplex,
    du: *const cuda_types::cusparse::cuComplex,
    x: *mut cuda_types::cusparse::cuComplex,
    batchCount: ::core::ffi::c_int,
    batchStride: ::core::ffi::c_int,
    pBuffer: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseCgtsv2StridedBatch", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cusparseCgtsv2StridedBatch", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dl), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dl, "cusparseCgtsv2StridedBatch", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(d), ": ").as_bytes())?;
    crate::CudaDisplay::write(&d, "cusparseCgtsv2StridedBatch", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(du), ": ").as_bytes())?;
    crate::CudaDisplay::write(&du, "cusparseCgtsv2StridedBatch", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cusparseCgtsv2StridedBatch", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(batchCount), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &batchCount,
        "cusparseCgtsv2StridedBatch",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(batchStride), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &batchStride,
        "cusparseCgtsv2StridedBatch",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBuffer), ": ").as_bytes())?;
    crate::CudaDisplay::write(&pBuffer, "cusparseCgtsv2StridedBatch", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseZgtsv2StridedBatch(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    m: ::core::ffi::c_int,
    dl: *const cuda_types::cusparse::cuDoubleComplex,
    d: *const cuda_types::cusparse::cuDoubleComplex,
    du: *const cuda_types::cusparse::cuDoubleComplex,
    x: *mut cuda_types::cusparse::cuDoubleComplex,
    batchCount: ::core::ffi::c_int,
    batchStride: ::core::ffi::c_int,
    pBuffer: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseZgtsv2StridedBatch", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cusparseZgtsv2StridedBatch", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dl), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dl, "cusparseZgtsv2StridedBatch", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(d), ": ").as_bytes())?;
    crate::CudaDisplay::write(&d, "cusparseZgtsv2StridedBatch", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(du), ": ").as_bytes())?;
    crate::CudaDisplay::write(&du, "cusparseZgtsv2StridedBatch", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cusparseZgtsv2StridedBatch", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(batchCount), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &batchCount,
        "cusparseZgtsv2StridedBatch",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(batchStride), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &batchStride,
        "cusparseZgtsv2StridedBatch",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBuffer), ": ").as_bytes())?;
    crate::CudaDisplay::write(&pBuffer, "cusparseZgtsv2StridedBatch", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseSgtsvInterleavedBatch_bufferSizeExt(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    algo: ::core::ffi::c_int,
    m: ::core::ffi::c_int,
    dl: *const f32,
    d: *const f32,
    du: *const f32,
    x: *const f32,
    batchCount: ::core::ffi::c_int,
    pBufferSizeInBytes: *mut usize,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &handle,
        "cusparseSgtsvInterleavedBatch_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(algo), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &algo,
        "cusparseSgtsvInterleavedBatch_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &m,
        "cusparseSgtsvInterleavedBatch_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dl), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &dl,
        "cusparseSgtsvInterleavedBatch_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(d), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &d,
        "cusparseSgtsvInterleavedBatch_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(du), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &du,
        "cusparseSgtsvInterleavedBatch_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &x,
        "cusparseSgtsvInterleavedBatch_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(batchCount), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &batchCount,
        "cusparseSgtsvInterleavedBatch_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBufferSizeInBytes), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &pBufferSizeInBytes,
        "cusparseSgtsvInterleavedBatch_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseDgtsvInterleavedBatch_bufferSizeExt(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    algo: ::core::ffi::c_int,
    m: ::core::ffi::c_int,
    dl: *const f64,
    d: *const f64,
    du: *const f64,
    x: *const f64,
    batchCount: ::core::ffi::c_int,
    pBufferSizeInBytes: *mut usize,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &handle,
        "cusparseDgtsvInterleavedBatch_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(algo), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &algo,
        "cusparseDgtsvInterleavedBatch_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &m,
        "cusparseDgtsvInterleavedBatch_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dl), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &dl,
        "cusparseDgtsvInterleavedBatch_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(d), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &d,
        "cusparseDgtsvInterleavedBatch_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(du), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &du,
        "cusparseDgtsvInterleavedBatch_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &x,
        "cusparseDgtsvInterleavedBatch_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(batchCount), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &batchCount,
        "cusparseDgtsvInterleavedBatch_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBufferSizeInBytes), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &pBufferSizeInBytes,
        "cusparseDgtsvInterleavedBatch_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseCgtsvInterleavedBatch_bufferSizeExt(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    algo: ::core::ffi::c_int,
    m: ::core::ffi::c_int,
    dl: *const cuda_types::cusparse::cuComplex,
    d: *const cuda_types::cusparse::cuComplex,
    du: *const cuda_types::cusparse::cuComplex,
    x: *const cuda_types::cusparse::cuComplex,
    batchCount: ::core::ffi::c_int,
    pBufferSizeInBytes: *mut usize,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &handle,
        "cusparseCgtsvInterleavedBatch_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(algo), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &algo,
        "cusparseCgtsvInterleavedBatch_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &m,
        "cusparseCgtsvInterleavedBatch_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dl), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &dl,
        "cusparseCgtsvInterleavedBatch_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(d), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &d,
        "cusparseCgtsvInterleavedBatch_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(du), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &du,
        "cusparseCgtsvInterleavedBatch_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &x,
        "cusparseCgtsvInterleavedBatch_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(batchCount), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &batchCount,
        "cusparseCgtsvInterleavedBatch_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBufferSizeInBytes), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &pBufferSizeInBytes,
        "cusparseCgtsvInterleavedBatch_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseZgtsvInterleavedBatch_bufferSizeExt(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    algo: ::core::ffi::c_int,
    m: ::core::ffi::c_int,
    dl: *const cuda_types::cusparse::cuDoubleComplex,
    d: *const cuda_types::cusparse::cuDoubleComplex,
    du: *const cuda_types::cusparse::cuDoubleComplex,
    x: *const cuda_types::cusparse::cuDoubleComplex,
    batchCount: ::core::ffi::c_int,
    pBufferSizeInBytes: *mut usize,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &handle,
        "cusparseZgtsvInterleavedBatch_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(algo), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &algo,
        "cusparseZgtsvInterleavedBatch_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &m,
        "cusparseZgtsvInterleavedBatch_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dl), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &dl,
        "cusparseZgtsvInterleavedBatch_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(d), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &d,
        "cusparseZgtsvInterleavedBatch_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(du), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &du,
        "cusparseZgtsvInterleavedBatch_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &x,
        "cusparseZgtsvInterleavedBatch_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(batchCount), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &batchCount,
        "cusparseZgtsvInterleavedBatch_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBufferSizeInBytes), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &pBufferSizeInBytes,
        "cusparseZgtsvInterleavedBatch_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseSgtsvInterleavedBatch(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    algo: ::core::ffi::c_int,
    m: ::core::ffi::c_int,
    dl: *mut f32,
    d: *mut f32,
    du: *mut f32,
    x: *mut f32,
    batchCount: ::core::ffi::c_int,
    pBuffer: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &handle,
        "cusparseSgtsvInterleavedBatch",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(algo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&algo, "cusparseSgtsvInterleavedBatch", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cusparseSgtsvInterleavedBatch", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dl), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dl, "cusparseSgtsvInterleavedBatch", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(d), ": ").as_bytes())?;
    crate::CudaDisplay::write(&d, "cusparseSgtsvInterleavedBatch", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(du), ": ").as_bytes())?;
    crate::CudaDisplay::write(&du, "cusparseSgtsvInterleavedBatch", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cusparseSgtsvInterleavedBatch", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(batchCount), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &batchCount,
        "cusparseSgtsvInterleavedBatch",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBuffer), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &pBuffer,
        "cusparseSgtsvInterleavedBatch",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseDgtsvInterleavedBatch(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    algo: ::core::ffi::c_int,
    m: ::core::ffi::c_int,
    dl: *mut f64,
    d: *mut f64,
    du: *mut f64,
    x: *mut f64,
    batchCount: ::core::ffi::c_int,
    pBuffer: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &handle,
        "cusparseDgtsvInterleavedBatch",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(algo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&algo, "cusparseDgtsvInterleavedBatch", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cusparseDgtsvInterleavedBatch", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dl), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dl, "cusparseDgtsvInterleavedBatch", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(d), ": ").as_bytes())?;
    crate::CudaDisplay::write(&d, "cusparseDgtsvInterleavedBatch", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(du), ": ").as_bytes())?;
    crate::CudaDisplay::write(&du, "cusparseDgtsvInterleavedBatch", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cusparseDgtsvInterleavedBatch", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(batchCount), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &batchCount,
        "cusparseDgtsvInterleavedBatch",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBuffer), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &pBuffer,
        "cusparseDgtsvInterleavedBatch",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseCgtsvInterleavedBatch(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    algo: ::core::ffi::c_int,
    m: ::core::ffi::c_int,
    dl: *mut cuda_types::cusparse::cuComplex,
    d: *mut cuda_types::cusparse::cuComplex,
    du: *mut cuda_types::cusparse::cuComplex,
    x: *mut cuda_types::cusparse::cuComplex,
    batchCount: ::core::ffi::c_int,
    pBuffer: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &handle,
        "cusparseCgtsvInterleavedBatch",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(algo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&algo, "cusparseCgtsvInterleavedBatch", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cusparseCgtsvInterleavedBatch", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dl), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dl, "cusparseCgtsvInterleavedBatch", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(d), ": ").as_bytes())?;
    crate::CudaDisplay::write(&d, "cusparseCgtsvInterleavedBatch", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(du), ": ").as_bytes())?;
    crate::CudaDisplay::write(&du, "cusparseCgtsvInterleavedBatch", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cusparseCgtsvInterleavedBatch", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(batchCount), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &batchCount,
        "cusparseCgtsvInterleavedBatch",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBuffer), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &pBuffer,
        "cusparseCgtsvInterleavedBatch",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseZgtsvInterleavedBatch(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    algo: ::core::ffi::c_int,
    m: ::core::ffi::c_int,
    dl: *mut cuda_types::cusparse::cuDoubleComplex,
    d: *mut cuda_types::cusparse::cuDoubleComplex,
    du: *mut cuda_types::cusparse::cuDoubleComplex,
    x: *mut cuda_types::cusparse::cuDoubleComplex,
    batchCount: ::core::ffi::c_int,
    pBuffer: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &handle,
        "cusparseZgtsvInterleavedBatch",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(algo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&algo, "cusparseZgtsvInterleavedBatch", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cusparseZgtsvInterleavedBatch", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dl), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dl, "cusparseZgtsvInterleavedBatch", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(d), ": ").as_bytes())?;
    crate::CudaDisplay::write(&d, "cusparseZgtsvInterleavedBatch", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(du), ": ").as_bytes())?;
    crate::CudaDisplay::write(&du, "cusparseZgtsvInterleavedBatch", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cusparseZgtsvInterleavedBatch", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(batchCount), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &batchCount,
        "cusparseZgtsvInterleavedBatch",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBuffer), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &pBuffer,
        "cusparseZgtsvInterleavedBatch",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseSgpsvInterleavedBatch_bufferSizeExt(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    algo: ::core::ffi::c_int,
    m: ::core::ffi::c_int,
    ds: *const f32,
    dl: *const f32,
    d: *const f32,
    du: *const f32,
    dw: *const f32,
    x: *const f32,
    batchCount: ::core::ffi::c_int,
    pBufferSizeInBytes: *mut usize,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &handle,
        "cusparseSgpsvInterleavedBatch_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(algo), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &algo,
        "cusparseSgpsvInterleavedBatch_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &m,
        "cusparseSgpsvInterleavedBatch_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ds), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &ds,
        "cusparseSgpsvInterleavedBatch_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dl), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &dl,
        "cusparseSgpsvInterleavedBatch_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(d), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &d,
        "cusparseSgpsvInterleavedBatch_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(du), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &du,
        "cusparseSgpsvInterleavedBatch_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dw), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &dw,
        "cusparseSgpsvInterleavedBatch_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &x,
        "cusparseSgpsvInterleavedBatch_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(batchCount), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &batchCount,
        "cusparseSgpsvInterleavedBatch_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBufferSizeInBytes), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &pBufferSizeInBytes,
        "cusparseSgpsvInterleavedBatch_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseDgpsvInterleavedBatch_bufferSizeExt(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    algo: ::core::ffi::c_int,
    m: ::core::ffi::c_int,
    ds: *const f64,
    dl: *const f64,
    d: *const f64,
    du: *const f64,
    dw: *const f64,
    x: *const f64,
    batchCount: ::core::ffi::c_int,
    pBufferSizeInBytes: *mut usize,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &handle,
        "cusparseDgpsvInterleavedBatch_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(algo), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &algo,
        "cusparseDgpsvInterleavedBatch_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &m,
        "cusparseDgpsvInterleavedBatch_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ds), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &ds,
        "cusparseDgpsvInterleavedBatch_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dl), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &dl,
        "cusparseDgpsvInterleavedBatch_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(d), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &d,
        "cusparseDgpsvInterleavedBatch_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(du), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &du,
        "cusparseDgpsvInterleavedBatch_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dw), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &dw,
        "cusparseDgpsvInterleavedBatch_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &x,
        "cusparseDgpsvInterleavedBatch_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(batchCount), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &batchCount,
        "cusparseDgpsvInterleavedBatch_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBufferSizeInBytes), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &pBufferSizeInBytes,
        "cusparseDgpsvInterleavedBatch_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseCgpsvInterleavedBatch_bufferSizeExt(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    algo: ::core::ffi::c_int,
    m: ::core::ffi::c_int,
    ds: *const cuda_types::cusparse::cuComplex,
    dl: *const cuda_types::cusparse::cuComplex,
    d: *const cuda_types::cusparse::cuComplex,
    du: *const cuda_types::cusparse::cuComplex,
    dw: *const cuda_types::cusparse::cuComplex,
    x: *const cuda_types::cusparse::cuComplex,
    batchCount: ::core::ffi::c_int,
    pBufferSizeInBytes: *mut usize,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &handle,
        "cusparseCgpsvInterleavedBatch_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(algo), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &algo,
        "cusparseCgpsvInterleavedBatch_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &m,
        "cusparseCgpsvInterleavedBatch_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ds), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &ds,
        "cusparseCgpsvInterleavedBatch_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dl), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &dl,
        "cusparseCgpsvInterleavedBatch_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(d), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &d,
        "cusparseCgpsvInterleavedBatch_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(du), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &du,
        "cusparseCgpsvInterleavedBatch_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dw), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &dw,
        "cusparseCgpsvInterleavedBatch_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &x,
        "cusparseCgpsvInterleavedBatch_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(batchCount), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &batchCount,
        "cusparseCgpsvInterleavedBatch_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBufferSizeInBytes), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &pBufferSizeInBytes,
        "cusparseCgpsvInterleavedBatch_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseZgpsvInterleavedBatch_bufferSizeExt(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    algo: ::core::ffi::c_int,
    m: ::core::ffi::c_int,
    ds: *const cuda_types::cusparse::cuDoubleComplex,
    dl: *const cuda_types::cusparse::cuDoubleComplex,
    d: *const cuda_types::cusparse::cuDoubleComplex,
    du: *const cuda_types::cusparse::cuDoubleComplex,
    dw: *const cuda_types::cusparse::cuDoubleComplex,
    x: *const cuda_types::cusparse::cuDoubleComplex,
    batchCount: ::core::ffi::c_int,
    pBufferSizeInBytes: *mut usize,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &handle,
        "cusparseZgpsvInterleavedBatch_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(algo), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &algo,
        "cusparseZgpsvInterleavedBatch_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &m,
        "cusparseZgpsvInterleavedBatch_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ds), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &ds,
        "cusparseZgpsvInterleavedBatch_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dl), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &dl,
        "cusparseZgpsvInterleavedBatch_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(d), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &d,
        "cusparseZgpsvInterleavedBatch_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(du), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &du,
        "cusparseZgpsvInterleavedBatch_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dw), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &dw,
        "cusparseZgpsvInterleavedBatch_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &x,
        "cusparseZgpsvInterleavedBatch_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(batchCount), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &batchCount,
        "cusparseZgpsvInterleavedBatch_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBufferSizeInBytes), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &pBufferSizeInBytes,
        "cusparseZgpsvInterleavedBatch_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseSgpsvInterleavedBatch(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    algo: ::core::ffi::c_int,
    m: ::core::ffi::c_int,
    ds: *mut f32,
    dl: *mut f32,
    d: *mut f32,
    du: *mut f32,
    dw: *mut f32,
    x: *mut f32,
    batchCount: ::core::ffi::c_int,
    pBuffer: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &handle,
        "cusparseSgpsvInterleavedBatch",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(algo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&algo, "cusparseSgpsvInterleavedBatch", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cusparseSgpsvInterleavedBatch", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ds), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ds, "cusparseSgpsvInterleavedBatch", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dl), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dl, "cusparseSgpsvInterleavedBatch", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(d), ": ").as_bytes())?;
    crate::CudaDisplay::write(&d, "cusparseSgpsvInterleavedBatch", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(du), ": ").as_bytes())?;
    crate::CudaDisplay::write(&du, "cusparseSgpsvInterleavedBatch", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dw), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dw, "cusparseSgpsvInterleavedBatch", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cusparseSgpsvInterleavedBatch", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(batchCount), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &batchCount,
        "cusparseSgpsvInterleavedBatch",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBuffer), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &pBuffer,
        "cusparseSgpsvInterleavedBatch",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseDgpsvInterleavedBatch(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    algo: ::core::ffi::c_int,
    m: ::core::ffi::c_int,
    ds: *mut f64,
    dl: *mut f64,
    d: *mut f64,
    du: *mut f64,
    dw: *mut f64,
    x: *mut f64,
    batchCount: ::core::ffi::c_int,
    pBuffer: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &handle,
        "cusparseDgpsvInterleavedBatch",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(algo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&algo, "cusparseDgpsvInterleavedBatch", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cusparseDgpsvInterleavedBatch", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ds), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ds, "cusparseDgpsvInterleavedBatch", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dl), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dl, "cusparseDgpsvInterleavedBatch", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(d), ": ").as_bytes())?;
    crate::CudaDisplay::write(&d, "cusparseDgpsvInterleavedBatch", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(du), ": ").as_bytes())?;
    crate::CudaDisplay::write(&du, "cusparseDgpsvInterleavedBatch", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dw), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dw, "cusparseDgpsvInterleavedBatch", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cusparseDgpsvInterleavedBatch", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(batchCount), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &batchCount,
        "cusparseDgpsvInterleavedBatch",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBuffer), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &pBuffer,
        "cusparseDgpsvInterleavedBatch",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseCgpsvInterleavedBatch(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    algo: ::core::ffi::c_int,
    m: ::core::ffi::c_int,
    ds: *mut cuda_types::cusparse::cuComplex,
    dl: *mut cuda_types::cusparse::cuComplex,
    d: *mut cuda_types::cusparse::cuComplex,
    du: *mut cuda_types::cusparse::cuComplex,
    dw: *mut cuda_types::cusparse::cuComplex,
    x: *mut cuda_types::cusparse::cuComplex,
    batchCount: ::core::ffi::c_int,
    pBuffer: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &handle,
        "cusparseCgpsvInterleavedBatch",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(algo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&algo, "cusparseCgpsvInterleavedBatch", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cusparseCgpsvInterleavedBatch", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ds), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ds, "cusparseCgpsvInterleavedBatch", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dl), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dl, "cusparseCgpsvInterleavedBatch", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(d), ": ").as_bytes())?;
    crate::CudaDisplay::write(&d, "cusparseCgpsvInterleavedBatch", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(du), ": ").as_bytes())?;
    crate::CudaDisplay::write(&du, "cusparseCgpsvInterleavedBatch", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dw), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dw, "cusparseCgpsvInterleavedBatch", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cusparseCgpsvInterleavedBatch", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(batchCount), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &batchCount,
        "cusparseCgpsvInterleavedBatch",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBuffer), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &pBuffer,
        "cusparseCgpsvInterleavedBatch",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseZgpsvInterleavedBatch(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    algo: ::core::ffi::c_int,
    m: ::core::ffi::c_int,
    ds: *mut cuda_types::cusparse::cuDoubleComplex,
    dl: *mut cuda_types::cusparse::cuDoubleComplex,
    d: *mut cuda_types::cusparse::cuDoubleComplex,
    du: *mut cuda_types::cusparse::cuDoubleComplex,
    dw: *mut cuda_types::cusparse::cuDoubleComplex,
    x: *mut cuda_types::cusparse::cuDoubleComplex,
    batchCount: ::core::ffi::c_int,
    pBuffer: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &handle,
        "cusparseZgpsvInterleavedBatch",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(algo), ": ").as_bytes())?;
    crate::CudaDisplay::write(&algo, "cusparseZgpsvInterleavedBatch", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cusparseZgpsvInterleavedBatch", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ds), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ds, "cusparseZgpsvInterleavedBatch", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dl), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dl, "cusparseZgpsvInterleavedBatch", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(d), ": ").as_bytes())?;
    crate::CudaDisplay::write(&d, "cusparseZgpsvInterleavedBatch", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(du), ": ").as_bytes())?;
    crate::CudaDisplay::write(&du, "cusparseZgpsvInterleavedBatch", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dw), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dw, "cusparseZgpsvInterleavedBatch", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(x), ": ").as_bytes())?;
    crate::CudaDisplay::write(&x, "cusparseZgpsvInterleavedBatch", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(batchCount), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &batchCount,
        "cusparseZgpsvInterleavedBatch",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBuffer), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &pBuffer,
        "cusparseZgpsvInterleavedBatch",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseScsrgeam2_bufferSizeExt(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    alpha: *const f32,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    nnzA: ::core::ffi::c_int,
    csrSortedValA: *const f32,
    csrSortedRowPtrA: *const ::core::ffi::c_int,
    csrSortedColIndA: *const ::core::ffi::c_int,
    beta: *const f32,
    descrB: cuda_types::cusparse::cusparseMatDescr_t,
    nnzB: ::core::ffi::c_int,
    csrSortedValB: *const f32,
    csrSortedRowPtrB: *const ::core::ffi::c_int,
    csrSortedColIndB: *const ::core::ffi::c_int,
    descrC: cuda_types::cusparse::cusparseMatDescr_t,
    csrSortedValC: *const f32,
    csrSortedRowPtrC: *const ::core::ffi::c_int,
    csrSortedColIndC: *const ::core::ffi::c_int,
    pBufferSizeInBytes: *mut usize,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &handle,
        "cusparseScsrgeam2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cusparseScsrgeam2_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cusparseScsrgeam2_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &alpha,
        "cusparseScsrgeam2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &descrA,
        "cusparseScsrgeam2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &nnzA,
        "cusparseScsrgeam2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedValA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedValA,
        "cusparseScsrgeam2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedRowPtrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedRowPtrA,
        "cusparseScsrgeam2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedColIndA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedColIndA,
        "cusparseScsrgeam2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &beta,
        "cusparseScsrgeam2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrB), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &descrB,
        "cusparseScsrgeam2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzB), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &nnzB,
        "cusparseScsrgeam2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedValB), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedValB,
        "cusparseScsrgeam2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedRowPtrB), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedRowPtrB,
        "cusparseScsrgeam2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedColIndB), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedColIndB,
        "cusparseScsrgeam2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrC), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &descrC,
        "cusparseScsrgeam2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedValC), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedValC,
        "cusparseScsrgeam2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedRowPtrC), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedRowPtrC,
        "cusparseScsrgeam2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedColIndC), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedColIndC,
        "cusparseScsrgeam2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBufferSizeInBytes), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &pBufferSizeInBytes,
        "cusparseScsrgeam2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseDcsrgeam2_bufferSizeExt(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    alpha: *const f64,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    nnzA: ::core::ffi::c_int,
    csrSortedValA: *const f64,
    csrSortedRowPtrA: *const ::core::ffi::c_int,
    csrSortedColIndA: *const ::core::ffi::c_int,
    beta: *const f64,
    descrB: cuda_types::cusparse::cusparseMatDescr_t,
    nnzB: ::core::ffi::c_int,
    csrSortedValB: *const f64,
    csrSortedRowPtrB: *const ::core::ffi::c_int,
    csrSortedColIndB: *const ::core::ffi::c_int,
    descrC: cuda_types::cusparse::cusparseMatDescr_t,
    csrSortedValC: *const f64,
    csrSortedRowPtrC: *const ::core::ffi::c_int,
    csrSortedColIndC: *const ::core::ffi::c_int,
    pBufferSizeInBytes: *mut usize,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &handle,
        "cusparseDcsrgeam2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cusparseDcsrgeam2_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cusparseDcsrgeam2_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &alpha,
        "cusparseDcsrgeam2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &descrA,
        "cusparseDcsrgeam2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &nnzA,
        "cusparseDcsrgeam2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedValA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedValA,
        "cusparseDcsrgeam2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedRowPtrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedRowPtrA,
        "cusparseDcsrgeam2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedColIndA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedColIndA,
        "cusparseDcsrgeam2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &beta,
        "cusparseDcsrgeam2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrB), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &descrB,
        "cusparseDcsrgeam2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzB), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &nnzB,
        "cusparseDcsrgeam2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedValB), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedValB,
        "cusparseDcsrgeam2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedRowPtrB), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedRowPtrB,
        "cusparseDcsrgeam2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedColIndB), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedColIndB,
        "cusparseDcsrgeam2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrC), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &descrC,
        "cusparseDcsrgeam2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedValC), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedValC,
        "cusparseDcsrgeam2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedRowPtrC), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedRowPtrC,
        "cusparseDcsrgeam2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedColIndC), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedColIndC,
        "cusparseDcsrgeam2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBufferSizeInBytes), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &pBufferSizeInBytes,
        "cusparseDcsrgeam2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseCcsrgeam2_bufferSizeExt(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    alpha: *const cuda_types::cusparse::cuComplex,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    nnzA: ::core::ffi::c_int,
    csrSortedValA: *const cuda_types::cusparse::cuComplex,
    csrSortedRowPtrA: *const ::core::ffi::c_int,
    csrSortedColIndA: *const ::core::ffi::c_int,
    beta: *const cuda_types::cusparse::cuComplex,
    descrB: cuda_types::cusparse::cusparseMatDescr_t,
    nnzB: ::core::ffi::c_int,
    csrSortedValB: *const cuda_types::cusparse::cuComplex,
    csrSortedRowPtrB: *const ::core::ffi::c_int,
    csrSortedColIndB: *const ::core::ffi::c_int,
    descrC: cuda_types::cusparse::cusparseMatDescr_t,
    csrSortedValC: *const cuda_types::cusparse::cuComplex,
    csrSortedRowPtrC: *const ::core::ffi::c_int,
    csrSortedColIndC: *const ::core::ffi::c_int,
    pBufferSizeInBytes: *mut usize,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &handle,
        "cusparseCcsrgeam2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cusparseCcsrgeam2_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cusparseCcsrgeam2_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &alpha,
        "cusparseCcsrgeam2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &descrA,
        "cusparseCcsrgeam2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &nnzA,
        "cusparseCcsrgeam2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedValA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedValA,
        "cusparseCcsrgeam2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedRowPtrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedRowPtrA,
        "cusparseCcsrgeam2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedColIndA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedColIndA,
        "cusparseCcsrgeam2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &beta,
        "cusparseCcsrgeam2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrB), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &descrB,
        "cusparseCcsrgeam2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzB), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &nnzB,
        "cusparseCcsrgeam2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedValB), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedValB,
        "cusparseCcsrgeam2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedRowPtrB), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedRowPtrB,
        "cusparseCcsrgeam2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedColIndB), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedColIndB,
        "cusparseCcsrgeam2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrC), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &descrC,
        "cusparseCcsrgeam2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedValC), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedValC,
        "cusparseCcsrgeam2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedRowPtrC), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedRowPtrC,
        "cusparseCcsrgeam2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedColIndC), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedColIndC,
        "cusparseCcsrgeam2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBufferSizeInBytes), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &pBufferSizeInBytes,
        "cusparseCcsrgeam2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseZcsrgeam2_bufferSizeExt(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    alpha: *const cuda_types::cusparse::cuDoubleComplex,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    nnzA: ::core::ffi::c_int,
    csrSortedValA: *const cuda_types::cusparse::cuDoubleComplex,
    csrSortedRowPtrA: *const ::core::ffi::c_int,
    csrSortedColIndA: *const ::core::ffi::c_int,
    beta: *const cuda_types::cusparse::cuDoubleComplex,
    descrB: cuda_types::cusparse::cusparseMatDescr_t,
    nnzB: ::core::ffi::c_int,
    csrSortedValB: *const cuda_types::cusparse::cuDoubleComplex,
    csrSortedRowPtrB: *const ::core::ffi::c_int,
    csrSortedColIndB: *const ::core::ffi::c_int,
    descrC: cuda_types::cusparse::cusparseMatDescr_t,
    csrSortedValC: *const cuda_types::cusparse::cuDoubleComplex,
    csrSortedRowPtrC: *const ::core::ffi::c_int,
    csrSortedColIndC: *const ::core::ffi::c_int,
    pBufferSizeInBytes: *mut usize,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &handle,
        "cusparseZcsrgeam2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cusparseZcsrgeam2_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cusparseZcsrgeam2_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &alpha,
        "cusparseZcsrgeam2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &descrA,
        "cusparseZcsrgeam2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &nnzA,
        "cusparseZcsrgeam2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedValA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedValA,
        "cusparseZcsrgeam2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedRowPtrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedRowPtrA,
        "cusparseZcsrgeam2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedColIndA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedColIndA,
        "cusparseZcsrgeam2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &beta,
        "cusparseZcsrgeam2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrB), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &descrB,
        "cusparseZcsrgeam2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzB), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &nnzB,
        "cusparseZcsrgeam2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedValB), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedValB,
        "cusparseZcsrgeam2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedRowPtrB), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedRowPtrB,
        "cusparseZcsrgeam2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedColIndB), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedColIndB,
        "cusparseZcsrgeam2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrC), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &descrC,
        "cusparseZcsrgeam2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedValC), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedValC,
        "cusparseZcsrgeam2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedRowPtrC), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedRowPtrC,
        "cusparseZcsrgeam2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedColIndC), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedColIndC,
        "cusparseZcsrgeam2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBufferSizeInBytes), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &pBufferSizeInBytes,
        "cusparseZcsrgeam2_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseXcsrgeam2Nnz(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    nnzA: ::core::ffi::c_int,
    csrSortedRowPtrA: *const ::core::ffi::c_int,
    csrSortedColIndA: *const ::core::ffi::c_int,
    descrB: cuda_types::cusparse::cusparseMatDescr_t,
    nnzB: ::core::ffi::c_int,
    csrSortedRowPtrB: *const ::core::ffi::c_int,
    csrSortedColIndB: *const ::core::ffi::c_int,
    descrC: cuda_types::cusparse::cusparseMatDescr_t,
    csrSortedRowPtrC: *mut ::core::ffi::c_int,
    nnzTotalDevHostPtr: *mut ::core::ffi::c_int,
    workspace: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseXcsrgeam2Nnz", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cusparseXcsrgeam2Nnz", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cusparseXcsrgeam2Nnz", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseXcsrgeam2Nnz", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnzA, "cusparseXcsrgeam2Nnz", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedRowPtrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedRowPtrA,
        "cusparseXcsrgeam2Nnz",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedColIndA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedColIndA,
        "cusparseXcsrgeam2Nnz",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrB), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrB, "cusparseXcsrgeam2Nnz", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzB), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnzB, "cusparseXcsrgeam2Nnz", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedRowPtrB), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedRowPtrB,
        "cusparseXcsrgeam2Nnz",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedColIndB), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedColIndB,
        "cusparseXcsrgeam2Nnz",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrC), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrC, "cusparseXcsrgeam2Nnz", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedRowPtrC), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedRowPtrC,
        "cusparseXcsrgeam2Nnz",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzTotalDevHostPtr), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &nnzTotalDevHostPtr,
        "cusparseXcsrgeam2Nnz",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(workspace), ": ").as_bytes())?;
    crate::CudaDisplay::write(&workspace, "cusparseXcsrgeam2Nnz", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseScsrgeam2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    alpha: *const f32,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    nnzA: ::core::ffi::c_int,
    csrSortedValA: *const f32,
    csrSortedRowPtrA: *const ::core::ffi::c_int,
    csrSortedColIndA: *const ::core::ffi::c_int,
    beta: *const f32,
    descrB: cuda_types::cusparse::cusparseMatDescr_t,
    nnzB: ::core::ffi::c_int,
    csrSortedValB: *const f32,
    csrSortedRowPtrB: *const ::core::ffi::c_int,
    csrSortedColIndB: *const ::core::ffi::c_int,
    descrC: cuda_types::cusparse::cusparseMatDescr_t,
    csrSortedValC: *mut f32,
    csrSortedRowPtrC: *mut ::core::ffi::c_int,
    csrSortedColIndC: *mut ::core::ffi::c_int,
    pBuffer: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseScsrgeam2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cusparseScsrgeam2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cusparseScsrgeam2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cusparseScsrgeam2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseScsrgeam2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnzA, "cusparseScsrgeam2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedValA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrSortedValA, "cusparseScsrgeam2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedRowPtrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrSortedRowPtrA, "cusparseScsrgeam2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedColIndA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrSortedColIndA, "cusparseScsrgeam2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cusparseScsrgeam2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrB), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrB, "cusparseScsrgeam2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzB), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnzB, "cusparseScsrgeam2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedValB), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrSortedValB, "cusparseScsrgeam2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedRowPtrB), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrSortedRowPtrB, "cusparseScsrgeam2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedColIndB), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrSortedColIndB, "cusparseScsrgeam2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrC), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrC, "cusparseScsrgeam2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedValC), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrSortedValC, "cusparseScsrgeam2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedRowPtrC), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrSortedRowPtrC, "cusparseScsrgeam2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedColIndC), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrSortedColIndC, "cusparseScsrgeam2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBuffer), ": ").as_bytes())?;
    crate::CudaDisplay::write(&pBuffer, "cusparseScsrgeam2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseDcsrgeam2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    alpha: *const f64,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    nnzA: ::core::ffi::c_int,
    csrSortedValA: *const f64,
    csrSortedRowPtrA: *const ::core::ffi::c_int,
    csrSortedColIndA: *const ::core::ffi::c_int,
    beta: *const f64,
    descrB: cuda_types::cusparse::cusparseMatDescr_t,
    nnzB: ::core::ffi::c_int,
    csrSortedValB: *const f64,
    csrSortedRowPtrB: *const ::core::ffi::c_int,
    csrSortedColIndB: *const ::core::ffi::c_int,
    descrC: cuda_types::cusparse::cusparseMatDescr_t,
    csrSortedValC: *mut f64,
    csrSortedRowPtrC: *mut ::core::ffi::c_int,
    csrSortedColIndC: *mut ::core::ffi::c_int,
    pBuffer: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseDcsrgeam2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cusparseDcsrgeam2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cusparseDcsrgeam2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cusparseDcsrgeam2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseDcsrgeam2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnzA, "cusparseDcsrgeam2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedValA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrSortedValA, "cusparseDcsrgeam2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedRowPtrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrSortedRowPtrA, "cusparseDcsrgeam2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedColIndA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrSortedColIndA, "cusparseDcsrgeam2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cusparseDcsrgeam2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrB), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrB, "cusparseDcsrgeam2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzB), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnzB, "cusparseDcsrgeam2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedValB), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrSortedValB, "cusparseDcsrgeam2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedRowPtrB), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrSortedRowPtrB, "cusparseDcsrgeam2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedColIndB), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrSortedColIndB, "cusparseDcsrgeam2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrC), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrC, "cusparseDcsrgeam2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedValC), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrSortedValC, "cusparseDcsrgeam2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedRowPtrC), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrSortedRowPtrC, "cusparseDcsrgeam2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedColIndC), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrSortedColIndC, "cusparseDcsrgeam2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBuffer), ": ").as_bytes())?;
    crate::CudaDisplay::write(&pBuffer, "cusparseDcsrgeam2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseCcsrgeam2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    alpha: *const cuda_types::cusparse::cuComplex,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    nnzA: ::core::ffi::c_int,
    csrSortedValA: *const cuda_types::cusparse::cuComplex,
    csrSortedRowPtrA: *const ::core::ffi::c_int,
    csrSortedColIndA: *const ::core::ffi::c_int,
    beta: *const cuda_types::cusparse::cuComplex,
    descrB: cuda_types::cusparse::cusparseMatDescr_t,
    nnzB: ::core::ffi::c_int,
    csrSortedValB: *const cuda_types::cusparse::cuComplex,
    csrSortedRowPtrB: *const ::core::ffi::c_int,
    csrSortedColIndB: *const ::core::ffi::c_int,
    descrC: cuda_types::cusparse::cusparseMatDescr_t,
    csrSortedValC: *mut cuda_types::cusparse::cuComplex,
    csrSortedRowPtrC: *mut ::core::ffi::c_int,
    csrSortedColIndC: *mut ::core::ffi::c_int,
    pBuffer: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseCcsrgeam2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cusparseCcsrgeam2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cusparseCcsrgeam2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cusparseCcsrgeam2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseCcsrgeam2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnzA, "cusparseCcsrgeam2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedValA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrSortedValA, "cusparseCcsrgeam2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedRowPtrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrSortedRowPtrA, "cusparseCcsrgeam2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedColIndA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrSortedColIndA, "cusparseCcsrgeam2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cusparseCcsrgeam2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrB), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrB, "cusparseCcsrgeam2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzB), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnzB, "cusparseCcsrgeam2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedValB), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrSortedValB, "cusparseCcsrgeam2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedRowPtrB), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrSortedRowPtrB, "cusparseCcsrgeam2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedColIndB), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrSortedColIndB, "cusparseCcsrgeam2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrC), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrC, "cusparseCcsrgeam2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedValC), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrSortedValC, "cusparseCcsrgeam2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedRowPtrC), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrSortedRowPtrC, "cusparseCcsrgeam2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedColIndC), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrSortedColIndC, "cusparseCcsrgeam2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBuffer), ": ").as_bytes())?;
    crate::CudaDisplay::write(&pBuffer, "cusparseCcsrgeam2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseZcsrgeam2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    alpha: *const cuda_types::cusparse::cuDoubleComplex,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    nnzA: ::core::ffi::c_int,
    csrSortedValA: *const cuda_types::cusparse::cuDoubleComplex,
    csrSortedRowPtrA: *const ::core::ffi::c_int,
    csrSortedColIndA: *const ::core::ffi::c_int,
    beta: *const cuda_types::cusparse::cuDoubleComplex,
    descrB: cuda_types::cusparse::cusparseMatDescr_t,
    nnzB: ::core::ffi::c_int,
    csrSortedValB: *const cuda_types::cusparse::cuDoubleComplex,
    csrSortedRowPtrB: *const ::core::ffi::c_int,
    csrSortedColIndB: *const ::core::ffi::c_int,
    descrC: cuda_types::cusparse::cusparseMatDescr_t,
    csrSortedValC: *mut cuda_types::cusparse::cuDoubleComplex,
    csrSortedRowPtrC: *mut ::core::ffi::c_int,
    csrSortedColIndC: *mut ::core::ffi::c_int,
    pBuffer: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseZcsrgeam2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cusparseZcsrgeam2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cusparseZcsrgeam2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cusparseZcsrgeam2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseZcsrgeam2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnzA, "cusparseZcsrgeam2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedValA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrSortedValA, "cusparseZcsrgeam2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedRowPtrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrSortedRowPtrA, "cusparseZcsrgeam2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedColIndA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrSortedColIndA, "cusparseZcsrgeam2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cusparseZcsrgeam2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrB), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrB, "cusparseZcsrgeam2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzB), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnzB, "cusparseZcsrgeam2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedValB), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrSortedValB, "cusparseZcsrgeam2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedRowPtrB), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrSortedRowPtrB, "cusparseZcsrgeam2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedColIndB), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrSortedColIndB, "cusparseZcsrgeam2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrC), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrC, "cusparseZcsrgeam2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedValC), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrSortedValC, "cusparseZcsrgeam2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedRowPtrC), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrSortedRowPtrC, "cusparseZcsrgeam2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedColIndC), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrSortedColIndC, "cusparseZcsrgeam2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBuffer), ": ").as_bytes())?;
    crate::CudaDisplay::write(&pBuffer, "cusparseZcsrgeam2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseScsrcolor(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    m: ::core::ffi::c_int,
    nnz: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    csrSortedValA: *const f32,
    csrSortedRowPtrA: *const ::core::ffi::c_int,
    csrSortedColIndA: *const ::core::ffi::c_int,
    fractionToColor: *const f32,
    ncolors: *mut ::core::ffi::c_int,
    coloring: *mut ::core::ffi::c_int,
    reordering: *mut ::core::ffi::c_int,
    info: cuda_types::cusparse::cusparseColorInfo_t,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseScsrcolor", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cusparseScsrcolor", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnz), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnz, "cusparseScsrcolor", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseScsrcolor", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedValA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrSortedValA, "cusparseScsrcolor", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedRowPtrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrSortedRowPtrA, "cusparseScsrcolor", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedColIndA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrSortedColIndA, "cusparseScsrcolor", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(fractionToColor), ": ").as_bytes())?;
    crate::CudaDisplay::write(&fractionToColor, "cusparseScsrcolor", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ncolors), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ncolors, "cusparseScsrcolor", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(coloring), ": ").as_bytes())?;
    crate::CudaDisplay::write(&coloring, "cusparseScsrcolor", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(reordering), ": ").as_bytes())?;
    crate::CudaDisplay::write(&reordering, "cusparseScsrcolor", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cusparseScsrcolor", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseDcsrcolor(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    m: ::core::ffi::c_int,
    nnz: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    csrSortedValA: *const f64,
    csrSortedRowPtrA: *const ::core::ffi::c_int,
    csrSortedColIndA: *const ::core::ffi::c_int,
    fractionToColor: *const f64,
    ncolors: *mut ::core::ffi::c_int,
    coloring: *mut ::core::ffi::c_int,
    reordering: *mut ::core::ffi::c_int,
    info: cuda_types::cusparse::cusparseColorInfo_t,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseDcsrcolor", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cusparseDcsrcolor", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnz), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnz, "cusparseDcsrcolor", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseDcsrcolor", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedValA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrSortedValA, "cusparseDcsrcolor", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedRowPtrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrSortedRowPtrA, "cusparseDcsrcolor", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedColIndA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrSortedColIndA, "cusparseDcsrcolor", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(fractionToColor), ": ").as_bytes())?;
    crate::CudaDisplay::write(&fractionToColor, "cusparseDcsrcolor", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ncolors), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ncolors, "cusparseDcsrcolor", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(coloring), ": ").as_bytes())?;
    crate::CudaDisplay::write(&coloring, "cusparseDcsrcolor", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(reordering), ": ").as_bytes())?;
    crate::CudaDisplay::write(&reordering, "cusparseDcsrcolor", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cusparseDcsrcolor", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseCcsrcolor(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    m: ::core::ffi::c_int,
    nnz: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    csrSortedValA: *const cuda_types::cusparse::cuComplex,
    csrSortedRowPtrA: *const ::core::ffi::c_int,
    csrSortedColIndA: *const ::core::ffi::c_int,
    fractionToColor: *const f32,
    ncolors: *mut ::core::ffi::c_int,
    coloring: *mut ::core::ffi::c_int,
    reordering: *mut ::core::ffi::c_int,
    info: cuda_types::cusparse::cusparseColorInfo_t,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseCcsrcolor", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cusparseCcsrcolor", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnz), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnz, "cusparseCcsrcolor", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseCcsrcolor", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedValA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrSortedValA, "cusparseCcsrcolor", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedRowPtrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrSortedRowPtrA, "cusparseCcsrcolor", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedColIndA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrSortedColIndA, "cusparseCcsrcolor", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(fractionToColor), ": ").as_bytes())?;
    crate::CudaDisplay::write(&fractionToColor, "cusparseCcsrcolor", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ncolors), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ncolors, "cusparseCcsrcolor", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(coloring), ": ").as_bytes())?;
    crate::CudaDisplay::write(&coloring, "cusparseCcsrcolor", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(reordering), ": ").as_bytes())?;
    crate::CudaDisplay::write(&reordering, "cusparseCcsrcolor", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cusparseCcsrcolor", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseZcsrcolor(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    m: ::core::ffi::c_int,
    nnz: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    csrSortedValA: *const cuda_types::cusparse::cuDoubleComplex,
    csrSortedRowPtrA: *const ::core::ffi::c_int,
    csrSortedColIndA: *const ::core::ffi::c_int,
    fractionToColor: *const f64,
    ncolors: *mut ::core::ffi::c_int,
    coloring: *mut ::core::ffi::c_int,
    reordering: *mut ::core::ffi::c_int,
    info: cuda_types::cusparse::cusparseColorInfo_t,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseZcsrcolor", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cusparseZcsrcolor", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnz), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnz, "cusparseZcsrcolor", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseZcsrcolor", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedValA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrSortedValA, "cusparseZcsrcolor", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedRowPtrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrSortedRowPtrA, "cusparseZcsrcolor", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedColIndA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrSortedColIndA, "cusparseZcsrcolor", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(fractionToColor), ": ").as_bytes())?;
    crate::CudaDisplay::write(&fractionToColor, "cusparseZcsrcolor", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ncolors), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ncolors, "cusparseZcsrcolor", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(coloring), ": ").as_bytes())?;
    crate::CudaDisplay::write(&coloring, "cusparseZcsrcolor", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(reordering), ": ").as_bytes())?;
    crate::CudaDisplay::write(&reordering, "cusparseZcsrcolor", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cusparseZcsrcolor", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseSnnz(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    dirA: cuda_types::cusparse::cusparseDirection_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    A: *const f32,
    lda: ::core::ffi::c_int,
    nnzPerRowCol: *mut ::core::ffi::c_int,
    nnzTotalDevHostPtr: *mut ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseSnnz", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dirA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dirA, "cusparseSnnz", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cusparseSnnz", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cusparseSnnz", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseSnnz", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cusparseSnnz", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cusparseSnnz", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzPerRowCol), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnzPerRowCol, "cusparseSnnz", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzTotalDevHostPtr), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnzTotalDevHostPtr, "cusparseSnnz", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseDnnz(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    dirA: cuda_types::cusparse::cusparseDirection_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    A: *const f64,
    lda: ::core::ffi::c_int,
    nnzPerRowCol: *mut ::core::ffi::c_int,
    nnzTotalDevHostPtr: *mut ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseDnnz", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dirA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dirA, "cusparseDnnz", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cusparseDnnz", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cusparseDnnz", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseDnnz", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cusparseDnnz", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cusparseDnnz", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzPerRowCol), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnzPerRowCol, "cusparseDnnz", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzTotalDevHostPtr), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnzTotalDevHostPtr, "cusparseDnnz", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseCnnz(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    dirA: cuda_types::cusparse::cusparseDirection_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    A: *const cuda_types::cusparse::cuComplex,
    lda: ::core::ffi::c_int,
    nnzPerRowCol: *mut ::core::ffi::c_int,
    nnzTotalDevHostPtr: *mut ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseCnnz", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dirA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dirA, "cusparseCnnz", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cusparseCnnz", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cusparseCnnz", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseCnnz", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cusparseCnnz", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cusparseCnnz", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzPerRowCol), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnzPerRowCol, "cusparseCnnz", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzTotalDevHostPtr), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnzTotalDevHostPtr, "cusparseCnnz", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseZnnz(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    dirA: cuda_types::cusparse::cusparseDirection_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    A: *const cuda_types::cusparse::cuDoubleComplex,
    lda: ::core::ffi::c_int,
    nnzPerRowCol: *mut ::core::ffi::c_int,
    nnzTotalDevHostPtr: *mut ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseZnnz", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dirA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dirA, "cusparseZnnz", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cusparseZnnz", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cusparseZnnz", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseZnnz", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cusparseZnnz", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cusparseZnnz", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzPerRowCol), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnzPerRowCol, "cusparseZnnz", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzTotalDevHostPtr), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnzTotalDevHostPtr, "cusparseZnnz", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseSnnz_compress(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    m: ::core::ffi::c_int,
    descr: cuda_types::cusparse::cusparseMatDescr_t,
    csrSortedValA: *const f32,
    csrSortedRowPtrA: *const ::core::ffi::c_int,
    nnzPerRow: *mut ::core::ffi::c_int,
    nnzC: *mut ::core::ffi::c_int,
    tol: f32,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseSnnz_compress", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cusparseSnnz_compress", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descr), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descr, "cusparseSnnz_compress", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedValA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrSortedValA, "cusparseSnnz_compress", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedRowPtrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedRowPtrA,
        "cusparseSnnz_compress",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzPerRow), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnzPerRow, "cusparseSnnz_compress", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzC), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnzC, "cusparseSnnz_compress", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(tol), ": ").as_bytes())?;
    crate::CudaDisplay::write(&tol, "cusparseSnnz_compress", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseDnnz_compress(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    m: ::core::ffi::c_int,
    descr: cuda_types::cusparse::cusparseMatDescr_t,
    csrSortedValA: *const f64,
    csrSortedRowPtrA: *const ::core::ffi::c_int,
    nnzPerRow: *mut ::core::ffi::c_int,
    nnzC: *mut ::core::ffi::c_int,
    tol: f64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseDnnz_compress", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cusparseDnnz_compress", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descr), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descr, "cusparseDnnz_compress", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedValA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrSortedValA, "cusparseDnnz_compress", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedRowPtrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedRowPtrA,
        "cusparseDnnz_compress",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzPerRow), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnzPerRow, "cusparseDnnz_compress", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzC), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnzC, "cusparseDnnz_compress", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(tol), ": ").as_bytes())?;
    crate::CudaDisplay::write(&tol, "cusparseDnnz_compress", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseCnnz_compress(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    m: ::core::ffi::c_int,
    descr: cuda_types::cusparse::cusparseMatDescr_t,
    csrSortedValA: *const cuda_types::cusparse::cuComplex,
    csrSortedRowPtrA: *const ::core::ffi::c_int,
    nnzPerRow: *mut ::core::ffi::c_int,
    nnzC: *mut ::core::ffi::c_int,
    tol: cuda_types::cusparse::cuComplex,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseCnnz_compress", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cusparseCnnz_compress", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descr), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descr, "cusparseCnnz_compress", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedValA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrSortedValA, "cusparseCnnz_compress", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedRowPtrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedRowPtrA,
        "cusparseCnnz_compress",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzPerRow), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnzPerRow, "cusparseCnnz_compress", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzC), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnzC, "cusparseCnnz_compress", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(tol), ": ").as_bytes())?;
    crate::CudaDisplay::write(&tol, "cusparseCnnz_compress", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseZnnz_compress(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    m: ::core::ffi::c_int,
    descr: cuda_types::cusparse::cusparseMatDescr_t,
    csrSortedValA: *const cuda_types::cusparse::cuDoubleComplex,
    csrSortedRowPtrA: *const ::core::ffi::c_int,
    nnzPerRow: *mut ::core::ffi::c_int,
    nnzC: *mut ::core::ffi::c_int,
    tol: cuda_types::cusparse::cuDoubleComplex,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseZnnz_compress", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cusparseZnnz_compress", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descr), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descr, "cusparseZnnz_compress", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedValA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrSortedValA, "cusparseZnnz_compress", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedRowPtrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedRowPtrA,
        "cusparseZnnz_compress",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzPerRow), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnzPerRow, "cusparseZnnz_compress", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzC), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnzC, "cusparseZnnz_compress", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(tol), ": ").as_bytes())?;
    crate::CudaDisplay::write(&tol, "cusparseZnnz_compress", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseScsr2csr_compress(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    csrSortedValA: *const f32,
    csrSortedColIndA: *const ::core::ffi::c_int,
    csrSortedRowPtrA: *const ::core::ffi::c_int,
    nnzA: ::core::ffi::c_int,
    nnzPerRow: *const ::core::ffi::c_int,
    csrSortedValC: *mut f32,
    csrSortedColIndC: *mut ::core::ffi::c_int,
    csrSortedRowPtrC: *mut ::core::ffi::c_int,
    tol: f32,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseScsr2csr_compress", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cusparseScsr2csr_compress", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cusparseScsr2csr_compress", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseScsr2csr_compress", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedValA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedValA,
        "cusparseScsr2csr_compress",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedColIndA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedColIndA,
        "cusparseScsr2csr_compress",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedRowPtrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedRowPtrA,
        "cusparseScsr2csr_compress",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnzA, "cusparseScsr2csr_compress", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzPerRow), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnzPerRow, "cusparseScsr2csr_compress", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedValC), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedValC,
        "cusparseScsr2csr_compress",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedColIndC), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedColIndC,
        "cusparseScsr2csr_compress",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedRowPtrC), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedRowPtrC,
        "cusparseScsr2csr_compress",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(tol), ": ").as_bytes())?;
    crate::CudaDisplay::write(&tol, "cusparseScsr2csr_compress", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseDcsr2csr_compress(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    csrSortedValA: *const f64,
    csrSortedColIndA: *const ::core::ffi::c_int,
    csrSortedRowPtrA: *const ::core::ffi::c_int,
    nnzA: ::core::ffi::c_int,
    nnzPerRow: *const ::core::ffi::c_int,
    csrSortedValC: *mut f64,
    csrSortedColIndC: *mut ::core::ffi::c_int,
    csrSortedRowPtrC: *mut ::core::ffi::c_int,
    tol: f64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseDcsr2csr_compress", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cusparseDcsr2csr_compress", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cusparseDcsr2csr_compress", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseDcsr2csr_compress", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedValA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedValA,
        "cusparseDcsr2csr_compress",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedColIndA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedColIndA,
        "cusparseDcsr2csr_compress",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedRowPtrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedRowPtrA,
        "cusparseDcsr2csr_compress",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnzA, "cusparseDcsr2csr_compress", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzPerRow), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnzPerRow, "cusparseDcsr2csr_compress", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedValC), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedValC,
        "cusparseDcsr2csr_compress",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedColIndC), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedColIndC,
        "cusparseDcsr2csr_compress",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedRowPtrC), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedRowPtrC,
        "cusparseDcsr2csr_compress",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(tol), ": ").as_bytes())?;
    crate::CudaDisplay::write(&tol, "cusparseDcsr2csr_compress", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseCcsr2csr_compress(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    csrSortedValA: *const cuda_types::cusparse::cuComplex,
    csrSortedColIndA: *const ::core::ffi::c_int,
    csrSortedRowPtrA: *const ::core::ffi::c_int,
    nnzA: ::core::ffi::c_int,
    nnzPerRow: *const ::core::ffi::c_int,
    csrSortedValC: *mut cuda_types::cusparse::cuComplex,
    csrSortedColIndC: *mut ::core::ffi::c_int,
    csrSortedRowPtrC: *mut ::core::ffi::c_int,
    tol: cuda_types::cusparse::cuComplex,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseCcsr2csr_compress", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cusparseCcsr2csr_compress", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cusparseCcsr2csr_compress", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseCcsr2csr_compress", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedValA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedValA,
        "cusparseCcsr2csr_compress",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedColIndA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedColIndA,
        "cusparseCcsr2csr_compress",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedRowPtrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedRowPtrA,
        "cusparseCcsr2csr_compress",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnzA, "cusparseCcsr2csr_compress", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzPerRow), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnzPerRow, "cusparseCcsr2csr_compress", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedValC), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedValC,
        "cusparseCcsr2csr_compress",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedColIndC), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedColIndC,
        "cusparseCcsr2csr_compress",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedRowPtrC), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedRowPtrC,
        "cusparseCcsr2csr_compress",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(tol), ": ").as_bytes())?;
    crate::CudaDisplay::write(&tol, "cusparseCcsr2csr_compress", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseZcsr2csr_compress(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    csrSortedValA: *const cuda_types::cusparse::cuDoubleComplex,
    csrSortedColIndA: *const ::core::ffi::c_int,
    csrSortedRowPtrA: *const ::core::ffi::c_int,
    nnzA: ::core::ffi::c_int,
    nnzPerRow: *const ::core::ffi::c_int,
    csrSortedValC: *mut cuda_types::cusparse::cuDoubleComplex,
    csrSortedColIndC: *mut ::core::ffi::c_int,
    csrSortedRowPtrC: *mut ::core::ffi::c_int,
    tol: cuda_types::cusparse::cuDoubleComplex,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseZcsr2csr_compress", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cusparseZcsr2csr_compress", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cusparseZcsr2csr_compress", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseZcsr2csr_compress", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedValA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedValA,
        "cusparseZcsr2csr_compress",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedColIndA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedColIndA,
        "cusparseZcsr2csr_compress",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedRowPtrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedRowPtrA,
        "cusparseZcsr2csr_compress",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnzA, "cusparseZcsr2csr_compress", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzPerRow), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnzPerRow, "cusparseZcsr2csr_compress", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedValC), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedValC,
        "cusparseZcsr2csr_compress",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedColIndC), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedColIndC,
        "cusparseZcsr2csr_compress",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedRowPtrC), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedRowPtrC,
        "cusparseZcsr2csr_compress",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(tol), ": ").as_bytes())?;
    crate::CudaDisplay::write(&tol, "cusparseZcsr2csr_compress", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseXcoo2csr(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    cooRowInd: *const ::core::ffi::c_int,
    nnz: ::core::ffi::c_int,
    m: ::core::ffi::c_int,
    csrSortedRowPtr: *mut ::core::ffi::c_int,
    idxBase: cuda_types::cusparse::cusparseIndexBase_t,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseXcoo2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(cooRowInd), ": ").as_bytes())?;
    crate::CudaDisplay::write(&cooRowInd, "cusparseXcoo2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnz), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnz, "cusparseXcoo2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cusparseXcoo2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedRowPtr), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrSortedRowPtr, "cusparseXcoo2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(idxBase), ": ").as_bytes())?;
    crate::CudaDisplay::write(&idxBase, "cusparseXcoo2csr", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseXcsr2coo(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    csrSortedRowPtr: *const ::core::ffi::c_int,
    nnz: ::core::ffi::c_int,
    m: ::core::ffi::c_int,
    cooRowInd: *mut ::core::ffi::c_int,
    idxBase: cuda_types::cusparse::cusparseIndexBase_t,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseXcsr2coo", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedRowPtr), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrSortedRowPtr, "cusparseXcsr2coo", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnz), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnz, "cusparseXcsr2coo", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cusparseXcsr2coo", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(cooRowInd), ": ").as_bytes())?;
    crate::CudaDisplay::write(&cooRowInd, "cusparseXcsr2coo", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(idxBase), ": ").as_bytes())?;
    crate::CudaDisplay::write(&idxBase, "cusparseXcsr2coo", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseXcsr2bsrNnz(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    dirA: cuda_types::cusparse::cusparseDirection_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    csrSortedRowPtrA: *const ::core::ffi::c_int,
    csrSortedColIndA: *const ::core::ffi::c_int,
    blockDim: ::core::ffi::c_int,
    descrC: cuda_types::cusparse::cusparseMatDescr_t,
    bsrSortedRowPtrC: *mut ::core::ffi::c_int,
    nnzTotalDevHostPtr: *mut ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseXcsr2bsrNnz", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dirA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dirA, "cusparseXcsr2bsrNnz", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cusparseXcsr2bsrNnz", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cusparseXcsr2bsrNnz", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseXcsr2bsrNnz", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedRowPtrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedRowPtrA,
        "cusparseXcsr2bsrNnz",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedColIndA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedColIndA,
        "cusparseXcsr2bsrNnz",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(blockDim), ": ").as_bytes())?;
    crate::CudaDisplay::write(&blockDim, "cusparseXcsr2bsrNnz", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrC), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrC, "cusparseXcsr2bsrNnz", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedRowPtrC), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedRowPtrC,
        "cusparseXcsr2bsrNnz",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzTotalDevHostPtr), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &nnzTotalDevHostPtr,
        "cusparseXcsr2bsrNnz",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseScsr2bsr(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    dirA: cuda_types::cusparse::cusparseDirection_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    csrSortedValA: *const f32,
    csrSortedRowPtrA: *const ::core::ffi::c_int,
    csrSortedColIndA: *const ::core::ffi::c_int,
    blockDim: ::core::ffi::c_int,
    descrC: cuda_types::cusparse::cusparseMatDescr_t,
    bsrSortedValC: *mut f32,
    bsrSortedRowPtrC: *mut ::core::ffi::c_int,
    bsrSortedColIndC: *mut ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseScsr2bsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dirA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dirA, "cusparseScsr2bsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cusparseScsr2bsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cusparseScsr2bsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseScsr2bsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedValA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrSortedValA, "cusparseScsr2bsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedRowPtrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrSortedRowPtrA, "cusparseScsr2bsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedColIndA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrSortedColIndA, "cusparseScsr2bsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(blockDim), ": ").as_bytes())?;
    crate::CudaDisplay::write(&blockDim, "cusparseScsr2bsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrC), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrC, "cusparseScsr2bsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedValC), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrSortedValC, "cusparseScsr2bsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedRowPtrC), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrSortedRowPtrC, "cusparseScsr2bsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedColIndC), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrSortedColIndC, "cusparseScsr2bsr", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseDcsr2bsr(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    dirA: cuda_types::cusparse::cusparseDirection_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    csrSortedValA: *const f64,
    csrSortedRowPtrA: *const ::core::ffi::c_int,
    csrSortedColIndA: *const ::core::ffi::c_int,
    blockDim: ::core::ffi::c_int,
    descrC: cuda_types::cusparse::cusparseMatDescr_t,
    bsrSortedValC: *mut f64,
    bsrSortedRowPtrC: *mut ::core::ffi::c_int,
    bsrSortedColIndC: *mut ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseDcsr2bsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dirA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dirA, "cusparseDcsr2bsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cusparseDcsr2bsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cusparseDcsr2bsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseDcsr2bsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedValA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrSortedValA, "cusparseDcsr2bsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedRowPtrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrSortedRowPtrA, "cusparseDcsr2bsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedColIndA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrSortedColIndA, "cusparseDcsr2bsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(blockDim), ": ").as_bytes())?;
    crate::CudaDisplay::write(&blockDim, "cusparseDcsr2bsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrC), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrC, "cusparseDcsr2bsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedValC), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrSortedValC, "cusparseDcsr2bsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedRowPtrC), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrSortedRowPtrC, "cusparseDcsr2bsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedColIndC), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrSortedColIndC, "cusparseDcsr2bsr", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseCcsr2bsr(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    dirA: cuda_types::cusparse::cusparseDirection_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    csrSortedValA: *const cuda_types::cusparse::cuComplex,
    csrSortedRowPtrA: *const ::core::ffi::c_int,
    csrSortedColIndA: *const ::core::ffi::c_int,
    blockDim: ::core::ffi::c_int,
    descrC: cuda_types::cusparse::cusparseMatDescr_t,
    bsrSortedValC: *mut cuda_types::cusparse::cuComplex,
    bsrSortedRowPtrC: *mut ::core::ffi::c_int,
    bsrSortedColIndC: *mut ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseCcsr2bsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dirA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dirA, "cusparseCcsr2bsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cusparseCcsr2bsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cusparseCcsr2bsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseCcsr2bsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedValA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrSortedValA, "cusparseCcsr2bsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedRowPtrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrSortedRowPtrA, "cusparseCcsr2bsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedColIndA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrSortedColIndA, "cusparseCcsr2bsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(blockDim), ": ").as_bytes())?;
    crate::CudaDisplay::write(&blockDim, "cusparseCcsr2bsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrC), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrC, "cusparseCcsr2bsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedValC), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrSortedValC, "cusparseCcsr2bsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedRowPtrC), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrSortedRowPtrC, "cusparseCcsr2bsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedColIndC), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrSortedColIndC, "cusparseCcsr2bsr", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseZcsr2bsr(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    dirA: cuda_types::cusparse::cusparseDirection_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    csrSortedValA: *const cuda_types::cusparse::cuDoubleComplex,
    csrSortedRowPtrA: *const ::core::ffi::c_int,
    csrSortedColIndA: *const ::core::ffi::c_int,
    blockDim: ::core::ffi::c_int,
    descrC: cuda_types::cusparse::cusparseMatDescr_t,
    bsrSortedValC: *mut cuda_types::cusparse::cuDoubleComplex,
    bsrSortedRowPtrC: *mut ::core::ffi::c_int,
    bsrSortedColIndC: *mut ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseZcsr2bsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dirA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dirA, "cusparseZcsr2bsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cusparseZcsr2bsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cusparseZcsr2bsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseZcsr2bsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedValA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrSortedValA, "cusparseZcsr2bsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedRowPtrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrSortedRowPtrA, "cusparseZcsr2bsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedColIndA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrSortedColIndA, "cusparseZcsr2bsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(blockDim), ": ").as_bytes())?;
    crate::CudaDisplay::write(&blockDim, "cusparseZcsr2bsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrC), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrC, "cusparseZcsr2bsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedValC), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrSortedValC, "cusparseZcsr2bsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedRowPtrC), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrSortedRowPtrC, "cusparseZcsr2bsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedColIndC), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrSortedColIndC, "cusparseZcsr2bsr", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseSbsr2csr(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    dirA: cuda_types::cusparse::cusparseDirection_t,
    mb: ::core::ffi::c_int,
    nb: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    bsrSortedValA: *const f32,
    bsrSortedRowPtrA: *const ::core::ffi::c_int,
    bsrSortedColIndA: *const ::core::ffi::c_int,
    blockDim: ::core::ffi::c_int,
    descrC: cuda_types::cusparse::cusparseMatDescr_t,
    csrSortedValC: *mut f32,
    csrSortedRowPtrC: *mut ::core::ffi::c_int,
    csrSortedColIndC: *mut ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseSbsr2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dirA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dirA, "cusparseSbsr2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(mb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&mb, "cusparseSbsr2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nb, "cusparseSbsr2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseSbsr2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedValA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrSortedValA, "cusparseSbsr2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedRowPtrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrSortedRowPtrA, "cusparseSbsr2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedColIndA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrSortedColIndA, "cusparseSbsr2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(blockDim), ": ").as_bytes())?;
    crate::CudaDisplay::write(&blockDim, "cusparseSbsr2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrC), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrC, "cusparseSbsr2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedValC), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrSortedValC, "cusparseSbsr2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedRowPtrC), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrSortedRowPtrC, "cusparseSbsr2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedColIndC), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrSortedColIndC, "cusparseSbsr2csr", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseDbsr2csr(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    dirA: cuda_types::cusparse::cusparseDirection_t,
    mb: ::core::ffi::c_int,
    nb: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    bsrSortedValA: *const f64,
    bsrSortedRowPtrA: *const ::core::ffi::c_int,
    bsrSortedColIndA: *const ::core::ffi::c_int,
    blockDim: ::core::ffi::c_int,
    descrC: cuda_types::cusparse::cusparseMatDescr_t,
    csrSortedValC: *mut f64,
    csrSortedRowPtrC: *mut ::core::ffi::c_int,
    csrSortedColIndC: *mut ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseDbsr2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dirA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dirA, "cusparseDbsr2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(mb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&mb, "cusparseDbsr2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nb, "cusparseDbsr2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseDbsr2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedValA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrSortedValA, "cusparseDbsr2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedRowPtrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrSortedRowPtrA, "cusparseDbsr2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedColIndA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrSortedColIndA, "cusparseDbsr2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(blockDim), ": ").as_bytes())?;
    crate::CudaDisplay::write(&blockDim, "cusparseDbsr2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrC), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrC, "cusparseDbsr2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedValC), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrSortedValC, "cusparseDbsr2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedRowPtrC), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrSortedRowPtrC, "cusparseDbsr2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedColIndC), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrSortedColIndC, "cusparseDbsr2csr", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseCbsr2csr(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    dirA: cuda_types::cusparse::cusparseDirection_t,
    mb: ::core::ffi::c_int,
    nb: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    bsrSortedValA: *const cuda_types::cusparse::cuComplex,
    bsrSortedRowPtrA: *const ::core::ffi::c_int,
    bsrSortedColIndA: *const ::core::ffi::c_int,
    blockDim: ::core::ffi::c_int,
    descrC: cuda_types::cusparse::cusparseMatDescr_t,
    csrSortedValC: *mut cuda_types::cusparse::cuComplex,
    csrSortedRowPtrC: *mut ::core::ffi::c_int,
    csrSortedColIndC: *mut ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseCbsr2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dirA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dirA, "cusparseCbsr2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(mb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&mb, "cusparseCbsr2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nb, "cusparseCbsr2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseCbsr2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedValA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrSortedValA, "cusparseCbsr2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedRowPtrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrSortedRowPtrA, "cusparseCbsr2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedColIndA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrSortedColIndA, "cusparseCbsr2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(blockDim), ": ").as_bytes())?;
    crate::CudaDisplay::write(&blockDim, "cusparseCbsr2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrC), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrC, "cusparseCbsr2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedValC), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrSortedValC, "cusparseCbsr2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedRowPtrC), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrSortedRowPtrC, "cusparseCbsr2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedColIndC), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrSortedColIndC, "cusparseCbsr2csr", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseZbsr2csr(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    dirA: cuda_types::cusparse::cusparseDirection_t,
    mb: ::core::ffi::c_int,
    nb: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    bsrSortedValA: *const cuda_types::cusparse::cuDoubleComplex,
    bsrSortedRowPtrA: *const ::core::ffi::c_int,
    bsrSortedColIndA: *const ::core::ffi::c_int,
    blockDim: ::core::ffi::c_int,
    descrC: cuda_types::cusparse::cusparseMatDescr_t,
    csrSortedValC: *mut cuda_types::cusparse::cuDoubleComplex,
    csrSortedRowPtrC: *mut ::core::ffi::c_int,
    csrSortedColIndC: *mut ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseZbsr2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dirA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dirA, "cusparseZbsr2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(mb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&mb, "cusparseZbsr2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nb, "cusparseZbsr2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseZbsr2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedValA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrSortedValA, "cusparseZbsr2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedRowPtrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrSortedRowPtrA, "cusparseZbsr2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedColIndA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrSortedColIndA, "cusparseZbsr2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(blockDim), ": ").as_bytes())?;
    crate::CudaDisplay::write(&blockDim, "cusparseZbsr2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrC), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrC, "cusparseZbsr2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedValC), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrSortedValC, "cusparseZbsr2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedRowPtrC), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrSortedRowPtrC, "cusparseZbsr2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedColIndC), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrSortedColIndC, "cusparseZbsr2csr", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseSgebsr2gebsc_bufferSize(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    mb: ::core::ffi::c_int,
    nb: ::core::ffi::c_int,
    nnzb: ::core::ffi::c_int,
    bsrSortedVal: *const f32,
    bsrSortedRowPtr: *const ::core::ffi::c_int,
    bsrSortedColInd: *const ::core::ffi::c_int,
    rowBlockDim: ::core::ffi::c_int,
    colBlockDim: ::core::ffi::c_int,
    pBufferSizeInBytes: *mut ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &handle,
        "cusparseSgebsr2gebsc_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(mb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&mb, "cusparseSgebsr2gebsc_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nb, "cusparseSgebsr2gebsc_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzb), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &nnzb,
        "cusparseSgebsr2gebsc_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedVal), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedVal,
        "cusparseSgebsr2gebsc_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedRowPtr), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedRowPtr,
        "cusparseSgebsr2gebsc_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedColInd), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedColInd,
        "cusparseSgebsr2gebsc_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(rowBlockDim), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &rowBlockDim,
        "cusparseSgebsr2gebsc_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(colBlockDim), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &colBlockDim,
        "cusparseSgebsr2gebsc_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBufferSizeInBytes), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &pBufferSizeInBytes,
        "cusparseSgebsr2gebsc_bufferSize",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseDgebsr2gebsc_bufferSize(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    mb: ::core::ffi::c_int,
    nb: ::core::ffi::c_int,
    nnzb: ::core::ffi::c_int,
    bsrSortedVal: *const f64,
    bsrSortedRowPtr: *const ::core::ffi::c_int,
    bsrSortedColInd: *const ::core::ffi::c_int,
    rowBlockDim: ::core::ffi::c_int,
    colBlockDim: ::core::ffi::c_int,
    pBufferSizeInBytes: *mut ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &handle,
        "cusparseDgebsr2gebsc_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(mb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&mb, "cusparseDgebsr2gebsc_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nb, "cusparseDgebsr2gebsc_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzb), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &nnzb,
        "cusparseDgebsr2gebsc_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedVal), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedVal,
        "cusparseDgebsr2gebsc_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedRowPtr), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedRowPtr,
        "cusparseDgebsr2gebsc_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedColInd), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedColInd,
        "cusparseDgebsr2gebsc_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(rowBlockDim), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &rowBlockDim,
        "cusparseDgebsr2gebsc_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(colBlockDim), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &colBlockDim,
        "cusparseDgebsr2gebsc_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBufferSizeInBytes), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &pBufferSizeInBytes,
        "cusparseDgebsr2gebsc_bufferSize",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseCgebsr2gebsc_bufferSize(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    mb: ::core::ffi::c_int,
    nb: ::core::ffi::c_int,
    nnzb: ::core::ffi::c_int,
    bsrSortedVal: *const cuda_types::cusparse::cuComplex,
    bsrSortedRowPtr: *const ::core::ffi::c_int,
    bsrSortedColInd: *const ::core::ffi::c_int,
    rowBlockDim: ::core::ffi::c_int,
    colBlockDim: ::core::ffi::c_int,
    pBufferSizeInBytes: *mut ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &handle,
        "cusparseCgebsr2gebsc_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(mb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&mb, "cusparseCgebsr2gebsc_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nb, "cusparseCgebsr2gebsc_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzb), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &nnzb,
        "cusparseCgebsr2gebsc_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedVal), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedVal,
        "cusparseCgebsr2gebsc_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedRowPtr), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedRowPtr,
        "cusparseCgebsr2gebsc_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedColInd), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedColInd,
        "cusparseCgebsr2gebsc_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(rowBlockDim), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &rowBlockDim,
        "cusparseCgebsr2gebsc_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(colBlockDim), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &colBlockDim,
        "cusparseCgebsr2gebsc_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBufferSizeInBytes), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &pBufferSizeInBytes,
        "cusparseCgebsr2gebsc_bufferSize",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseZgebsr2gebsc_bufferSize(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    mb: ::core::ffi::c_int,
    nb: ::core::ffi::c_int,
    nnzb: ::core::ffi::c_int,
    bsrSortedVal: *const cuda_types::cusparse::cuDoubleComplex,
    bsrSortedRowPtr: *const ::core::ffi::c_int,
    bsrSortedColInd: *const ::core::ffi::c_int,
    rowBlockDim: ::core::ffi::c_int,
    colBlockDim: ::core::ffi::c_int,
    pBufferSizeInBytes: *mut ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &handle,
        "cusparseZgebsr2gebsc_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(mb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&mb, "cusparseZgebsr2gebsc_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nb, "cusparseZgebsr2gebsc_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzb), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &nnzb,
        "cusparseZgebsr2gebsc_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedVal), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedVal,
        "cusparseZgebsr2gebsc_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedRowPtr), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedRowPtr,
        "cusparseZgebsr2gebsc_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedColInd), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedColInd,
        "cusparseZgebsr2gebsc_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(rowBlockDim), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &rowBlockDim,
        "cusparseZgebsr2gebsc_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(colBlockDim), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &colBlockDim,
        "cusparseZgebsr2gebsc_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBufferSizeInBytes), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &pBufferSizeInBytes,
        "cusparseZgebsr2gebsc_bufferSize",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseSgebsr2gebsc_bufferSizeExt(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    mb: ::core::ffi::c_int,
    nb: ::core::ffi::c_int,
    nnzb: ::core::ffi::c_int,
    bsrSortedVal: *const f32,
    bsrSortedRowPtr: *const ::core::ffi::c_int,
    bsrSortedColInd: *const ::core::ffi::c_int,
    rowBlockDim: ::core::ffi::c_int,
    colBlockDim: ::core::ffi::c_int,
    pBufferSize: *mut usize,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &handle,
        "cusparseSgebsr2gebsc_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(mb), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &mb,
        "cusparseSgebsr2gebsc_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nb), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &nb,
        "cusparseSgebsr2gebsc_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzb), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &nnzb,
        "cusparseSgebsr2gebsc_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedVal), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedVal,
        "cusparseSgebsr2gebsc_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedRowPtr), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedRowPtr,
        "cusparseSgebsr2gebsc_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedColInd), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedColInd,
        "cusparseSgebsr2gebsc_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(rowBlockDim), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &rowBlockDim,
        "cusparseSgebsr2gebsc_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(colBlockDim), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &colBlockDim,
        "cusparseSgebsr2gebsc_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBufferSize), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &pBufferSize,
        "cusparseSgebsr2gebsc_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseDgebsr2gebsc_bufferSizeExt(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    mb: ::core::ffi::c_int,
    nb: ::core::ffi::c_int,
    nnzb: ::core::ffi::c_int,
    bsrSortedVal: *const f64,
    bsrSortedRowPtr: *const ::core::ffi::c_int,
    bsrSortedColInd: *const ::core::ffi::c_int,
    rowBlockDim: ::core::ffi::c_int,
    colBlockDim: ::core::ffi::c_int,
    pBufferSize: *mut usize,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &handle,
        "cusparseDgebsr2gebsc_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(mb), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &mb,
        "cusparseDgebsr2gebsc_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nb), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &nb,
        "cusparseDgebsr2gebsc_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzb), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &nnzb,
        "cusparseDgebsr2gebsc_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedVal), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedVal,
        "cusparseDgebsr2gebsc_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedRowPtr), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedRowPtr,
        "cusparseDgebsr2gebsc_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedColInd), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedColInd,
        "cusparseDgebsr2gebsc_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(rowBlockDim), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &rowBlockDim,
        "cusparseDgebsr2gebsc_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(colBlockDim), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &colBlockDim,
        "cusparseDgebsr2gebsc_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBufferSize), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &pBufferSize,
        "cusparseDgebsr2gebsc_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseCgebsr2gebsc_bufferSizeExt(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    mb: ::core::ffi::c_int,
    nb: ::core::ffi::c_int,
    nnzb: ::core::ffi::c_int,
    bsrSortedVal: *const cuda_types::cusparse::cuComplex,
    bsrSortedRowPtr: *const ::core::ffi::c_int,
    bsrSortedColInd: *const ::core::ffi::c_int,
    rowBlockDim: ::core::ffi::c_int,
    colBlockDim: ::core::ffi::c_int,
    pBufferSize: *mut usize,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &handle,
        "cusparseCgebsr2gebsc_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(mb), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &mb,
        "cusparseCgebsr2gebsc_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nb), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &nb,
        "cusparseCgebsr2gebsc_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzb), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &nnzb,
        "cusparseCgebsr2gebsc_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedVal), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedVal,
        "cusparseCgebsr2gebsc_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedRowPtr), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedRowPtr,
        "cusparseCgebsr2gebsc_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedColInd), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedColInd,
        "cusparseCgebsr2gebsc_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(rowBlockDim), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &rowBlockDim,
        "cusparseCgebsr2gebsc_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(colBlockDim), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &colBlockDim,
        "cusparseCgebsr2gebsc_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBufferSize), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &pBufferSize,
        "cusparseCgebsr2gebsc_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseZgebsr2gebsc_bufferSizeExt(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    mb: ::core::ffi::c_int,
    nb: ::core::ffi::c_int,
    nnzb: ::core::ffi::c_int,
    bsrSortedVal: *const cuda_types::cusparse::cuDoubleComplex,
    bsrSortedRowPtr: *const ::core::ffi::c_int,
    bsrSortedColInd: *const ::core::ffi::c_int,
    rowBlockDim: ::core::ffi::c_int,
    colBlockDim: ::core::ffi::c_int,
    pBufferSize: *mut usize,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &handle,
        "cusparseZgebsr2gebsc_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(mb), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &mb,
        "cusparseZgebsr2gebsc_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nb), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &nb,
        "cusparseZgebsr2gebsc_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzb), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &nnzb,
        "cusparseZgebsr2gebsc_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedVal), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedVal,
        "cusparseZgebsr2gebsc_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedRowPtr), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedRowPtr,
        "cusparseZgebsr2gebsc_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedColInd), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedColInd,
        "cusparseZgebsr2gebsc_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(rowBlockDim), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &rowBlockDim,
        "cusparseZgebsr2gebsc_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(colBlockDim), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &colBlockDim,
        "cusparseZgebsr2gebsc_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBufferSize), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &pBufferSize,
        "cusparseZgebsr2gebsc_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseSgebsr2gebsc(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    mb: ::core::ffi::c_int,
    nb: ::core::ffi::c_int,
    nnzb: ::core::ffi::c_int,
    bsrSortedVal: *const f32,
    bsrSortedRowPtr: *const ::core::ffi::c_int,
    bsrSortedColInd: *const ::core::ffi::c_int,
    rowBlockDim: ::core::ffi::c_int,
    colBlockDim: ::core::ffi::c_int,
    bscVal: *mut f32,
    bscRowInd: *mut ::core::ffi::c_int,
    bscColPtr: *mut ::core::ffi::c_int,
    copyValues: cuda_types::cusparse::cusparseAction_t,
    idxBase: cuda_types::cusparse::cusparseIndexBase_t,
    pBuffer: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseSgebsr2gebsc", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(mb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&mb, "cusparseSgebsr2gebsc", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nb, "cusparseSgebsr2gebsc", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnzb, "cusparseSgebsr2gebsc", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedVal), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrSortedVal, "cusparseSgebsr2gebsc", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedRowPtr), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedRowPtr,
        "cusparseSgebsr2gebsc",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedColInd), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedColInd,
        "cusparseSgebsr2gebsc",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(rowBlockDim), ": ").as_bytes())?;
    crate::CudaDisplay::write(&rowBlockDim, "cusparseSgebsr2gebsc", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(colBlockDim), ": ").as_bytes())?;
    crate::CudaDisplay::write(&colBlockDim, "cusparseSgebsr2gebsc", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bscVal), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bscVal, "cusparseSgebsr2gebsc", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bscRowInd), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bscRowInd, "cusparseSgebsr2gebsc", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bscColPtr), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bscColPtr, "cusparseSgebsr2gebsc", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(copyValues), ": ").as_bytes())?;
    crate::CudaDisplay::write(&copyValues, "cusparseSgebsr2gebsc", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(idxBase), ": ").as_bytes())?;
    crate::CudaDisplay::write(&idxBase, "cusparseSgebsr2gebsc", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBuffer), ": ").as_bytes())?;
    crate::CudaDisplay::write(&pBuffer, "cusparseSgebsr2gebsc", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseDgebsr2gebsc(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    mb: ::core::ffi::c_int,
    nb: ::core::ffi::c_int,
    nnzb: ::core::ffi::c_int,
    bsrSortedVal: *const f64,
    bsrSortedRowPtr: *const ::core::ffi::c_int,
    bsrSortedColInd: *const ::core::ffi::c_int,
    rowBlockDim: ::core::ffi::c_int,
    colBlockDim: ::core::ffi::c_int,
    bscVal: *mut f64,
    bscRowInd: *mut ::core::ffi::c_int,
    bscColPtr: *mut ::core::ffi::c_int,
    copyValues: cuda_types::cusparse::cusparseAction_t,
    idxBase: cuda_types::cusparse::cusparseIndexBase_t,
    pBuffer: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseDgebsr2gebsc", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(mb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&mb, "cusparseDgebsr2gebsc", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nb, "cusparseDgebsr2gebsc", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnzb, "cusparseDgebsr2gebsc", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedVal), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrSortedVal, "cusparseDgebsr2gebsc", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedRowPtr), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedRowPtr,
        "cusparseDgebsr2gebsc",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedColInd), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedColInd,
        "cusparseDgebsr2gebsc",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(rowBlockDim), ": ").as_bytes())?;
    crate::CudaDisplay::write(&rowBlockDim, "cusparseDgebsr2gebsc", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(colBlockDim), ": ").as_bytes())?;
    crate::CudaDisplay::write(&colBlockDim, "cusparseDgebsr2gebsc", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bscVal), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bscVal, "cusparseDgebsr2gebsc", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bscRowInd), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bscRowInd, "cusparseDgebsr2gebsc", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bscColPtr), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bscColPtr, "cusparseDgebsr2gebsc", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(copyValues), ": ").as_bytes())?;
    crate::CudaDisplay::write(&copyValues, "cusparseDgebsr2gebsc", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(idxBase), ": ").as_bytes())?;
    crate::CudaDisplay::write(&idxBase, "cusparseDgebsr2gebsc", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBuffer), ": ").as_bytes())?;
    crate::CudaDisplay::write(&pBuffer, "cusparseDgebsr2gebsc", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseCgebsr2gebsc(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    mb: ::core::ffi::c_int,
    nb: ::core::ffi::c_int,
    nnzb: ::core::ffi::c_int,
    bsrSortedVal: *const cuda_types::cusparse::cuComplex,
    bsrSortedRowPtr: *const ::core::ffi::c_int,
    bsrSortedColInd: *const ::core::ffi::c_int,
    rowBlockDim: ::core::ffi::c_int,
    colBlockDim: ::core::ffi::c_int,
    bscVal: *mut cuda_types::cusparse::cuComplex,
    bscRowInd: *mut ::core::ffi::c_int,
    bscColPtr: *mut ::core::ffi::c_int,
    copyValues: cuda_types::cusparse::cusparseAction_t,
    idxBase: cuda_types::cusparse::cusparseIndexBase_t,
    pBuffer: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseCgebsr2gebsc", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(mb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&mb, "cusparseCgebsr2gebsc", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nb, "cusparseCgebsr2gebsc", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnzb, "cusparseCgebsr2gebsc", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedVal), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrSortedVal, "cusparseCgebsr2gebsc", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedRowPtr), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedRowPtr,
        "cusparseCgebsr2gebsc",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedColInd), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedColInd,
        "cusparseCgebsr2gebsc",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(rowBlockDim), ": ").as_bytes())?;
    crate::CudaDisplay::write(&rowBlockDim, "cusparseCgebsr2gebsc", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(colBlockDim), ": ").as_bytes())?;
    crate::CudaDisplay::write(&colBlockDim, "cusparseCgebsr2gebsc", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bscVal), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bscVal, "cusparseCgebsr2gebsc", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bscRowInd), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bscRowInd, "cusparseCgebsr2gebsc", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bscColPtr), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bscColPtr, "cusparseCgebsr2gebsc", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(copyValues), ": ").as_bytes())?;
    crate::CudaDisplay::write(&copyValues, "cusparseCgebsr2gebsc", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(idxBase), ": ").as_bytes())?;
    crate::CudaDisplay::write(&idxBase, "cusparseCgebsr2gebsc", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBuffer), ": ").as_bytes())?;
    crate::CudaDisplay::write(&pBuffer, "cusparseCgebsr2gebsc", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseZgebsr2gebsc(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    mb: ::core::ffi::c_int,
    nb: ::core::ffi::c_int,
    nnzb: ::core::ffi::c_int,
    bsrSortedVal: *const cuda_types::cusparse::cuDoubleComplex,
    bsrSortedRowPtr: *const ::core::ffi::c_int,
    bsrSortedColInd: *const ::core::ffi::c_int,
    rowBlockDim: ::core::ffi::c_int,
    colBlockDim: ::core::ffi::c_int,
    bscVal: *mut cuda_types::cusparse::cuDoubleComplex,
    bscRowInd: *mut ::core::ffi::c_int,
    bscColPtr: *mut ::core::ffi::c_int,
    copyValues: cuda_types::cusparse::cusparseAction_t,
    idxBase: cuda_types::cusparse::cusparseIndexBase_t,
    pBuffer: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseZgebsr2gebsc", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(mb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&mb, "cusparseZgebsr2gebsc", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nb, "cusparseZgebsr2gebsc", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnzb, "cusparseZgebsr2gebsc", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedVal), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrSortedVal, "cusparseZgebsr2gebsc", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedRowPtr), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedRowPtr,
        "cusparseZgebsr2gebsc",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedColInd), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedColInd,
        "cusparseZgebsr2gebsc",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(rowBlockDim), ": ").as_bytes())?;
    crate::CudaDisplay::write(&rowBlockDim, "cusparseZgebsr2gebsc", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(colBlockDim), ": ").as_bytes())?;
    crate::CudaDisplay::write(&colBlockDim, "cusparseZgebsr2gebsc", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bscVal), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bscVal, "cusparseZgebsr2gebsc", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bscRowInd), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bscRowInd, "cusparseZgebsr2gebsc", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bscColPtr), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bscColPtr, "cusparseZgebsr2gebsc", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(copyValues), ": ").as_bytes())?;
    crate::CudaDisplay::write(&copyValues, "cusparseZgebsr2gebsc", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(idxBase), ": ").as_bytes())?;
    crate::CudaDisplay::write(&idxBase, "cusparseZgebsr2gebsc", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBuffer), ": ").as_bytes())?;
    crate::CudaDisplay::write(&pBuffer, "cusparseZgebsr2gebsc", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseXgebsr2csr(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    dirA: cuda_types::cusparse::cusparseDirection_t,
    mb: ::core::ffi::c_int,
    nb: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    bsrSortedRowPtrA: *const ::core::ffi::c_int,
    bsrSortedColIndA: *const ::core::ffi::c_int,
    rowBlockDim: ::core::ffi::c_int,
    colBlockDim: ::core::ffi::c_int,
    descrC: cuda_types::cusparse::cusparseMatDescr_t,
    csrSortedRowPtrC: *mut ::core::ffi::c_int,
    csrSortedColIndC: *mut ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseXgebsr2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dirA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dirA, "cusparseXgebsr2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(mb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&mb, "cusparseXgebsr2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nb, "cusparseXgebsr2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseXgebsr2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedRowPtrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrSortedRowPtrA, "cusparseXgebsr2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedColIndA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrSortedColIndA, "cusparseXgebsr2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(rowBlockDim), ": ").as_bytes())?;
    crate::CudaDisplay::write(&rowBlockDim, "cusparseXgebsr2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(colBlockDim), ": ").as_bytes())?;
    crate::CudaDisplay::write(&colBlockDim, "cusparseXgebsr2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrC), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrC, "cusparseXgebsr2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedRowPtrC), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrSortedRowPtrC, "cusparseXgebsr2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedColIndC), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrSortedColIndC, "cusparseXgebsr2csr", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseSgebsr2csr(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    dirA: cuda_types::cusparse::cusparseDirection_t,
    mb: ::core::ffi::c_int,
    nb: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    bsrSortedValA: *const f32,
    bsrSortedRowPtrA: *const ::core::ffi::c_int,
    bsrSortedColIndA: *const ::core::ffi::c_int,
    rowBlockDim: ::core::ffi::c_int,
    colBlockDim: ::core::ffi::c_int,
    descrC: cuda_types::cusparse::cusparseMatDescr_t,
    csrSortedValC: *mut f32,
    csrSortedRowPtrC: *mut ::core::ffi::c_int,
    csrSortedColIndC: *mut ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseSgebsr2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dirA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dirA, "cusparseSgebsr2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(mb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&mb, "cusparseSgebsr2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nb, "cusparseSgebsr2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseSgebsr2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedValA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrSortedValA, "cusparseSgebsr2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedRowPtrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrSortedRowPtrA, "cusparseSgebsr2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedColIndA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrSortedColIndA, "cusparseSgebsr2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(rowBlockDim), ": ").as_bytes())?;
    crate::CudaDisplay::write(&rowBlockDim, "cusparseSgebsr2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(colBlockDim), ": ").as_bytes())?;
    crate::CudaDisplay::write(&colBlockDim, "cusparseSgebsr2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrC), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrC, "cusparseSgebsr2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedValC), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrSortedValC, "cusparseSgebsr2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedRowPtrC), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrSortedRowPtrC, "cusparseSgebsr2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedColIndC), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrSortedColIndC, "cusparseSgebsr2csr", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseDgebsr2csr(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    dirA: cuda_types::cusparse::cusparseDirection_t,
    mb: ::core::ffi::c_int,
    nb: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    bsrSortedValA: *const f64,
    bsrSortedRowPtrA: *const ::core::ffi::c_int,
    bsrSortedColIndA: *const ::core::ffi::c_int,
    rowBlockDim: ::core::ffi::c_int,
    colBlockDim: ::core::ffi::c_int,
    descrC: cuda_types::cusparse::cusparseMatDescr_t,
    csrSortedValC: *mut f64,
    csrSortedRowPtrC: *mut ::core::ffi::c_int,
    csrSortedColIndC: *mut ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseDgebsr2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dirA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dirA, "cusparseDgebsr2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(mb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&mb, "cusparseDgebsr2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nb, "cusparseDgebsr2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseDgebsr2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedValA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrSortedValA, "cusparseDgebsr2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedRowPtrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrSortedRowPtrA, "cusparseDgebsr2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedColIndA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrSortedColIndA, "cusparseDgebsr2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(rowBlockDim), ": ").as_bytes())?;
    crate::CudaDisplay::write(&rowBlockDim, "cusparseDgebsr2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(colBlockDim), ": ").as_bytes())?;
    crate::CudaDisplay::write(&colBlockDim, "cusparseDgebsr2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrC), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrC, "cusparseDgebsr2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedValC), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrSortedValC, "cusparseDgebsr2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedRowPtrC), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrSortedRowPtrC, "cusparseDgebsr2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedColIndC), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrSortedColIndC, "cusparseDgebsr2csr", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseCgebsr2csr(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    dirA: cuda_types::cusparse::cusparseDirection_t,
    mb: ::core::ffi::c_int,
    nb: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    bsrSortedValA: *const cuda_types::cusparse::cuComplex,
    bsrSortedRowPtrA: *const ::core::ffi::c_int,
    bsrSortedColIndA: *const ::core::ffi::c_int,
    rowBlockDim: ::core::ffi::c_int,
    colBlockDim: ::core::ffi::c_int,
    descrC: cuda_types::cusparse::cusparseMatDescr_t,
    csrSortedValC: *mut cuda_types::cusparse::cuComplex,
    csrSortedRowPtrC: *mut ::core::ffi::c_int,
    csrSortedColIndC: *mut ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseCgebsr2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dirA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dirA, "cusparseCgebsr2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(mb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&mb, "cusparseCgebsr2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nb, "cusparseCgebsr2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseCgebsr2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedValA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrSortedValA, "cusparseCgebsr2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedRowPtrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrSortedRowPtrA, "cusparseCgebsr2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedColIndA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrSortedColIndA, "cusparseCgebsr2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(rowBlockDim), ": ").as_bytes())?;
    crate::CudaDisplay::write(&rowBlockDim, "cusparseCgebsr2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(colBlockDim), ": ").as_bytes())?;
    crate::CudaDisplay::write(&colBlockDim, "cusparseCgebsr2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrC), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrC, "cusparseCgebsr2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedValC), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrSortedValC, "cusparseCgebsr2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedRowPtrC), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrSortedRowPtrC, "cusparseCgebsr2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedColIndC), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrSortedColIndC, "cusparseCgebsr2csr", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseZgebsr2csr(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    dirA: cuda_types::cusparse::cusparseDirection_t,
    mb: ::core::ffi::c_int,
    nb: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    bsrSortedValA: *const cuda_types::cusparse::cuDoubleComplex,
    bsrSortedRowPtrA: *const ::core::ffi::c_int,
    bsrSortedColIndA: *const ::core::ffi::c_int,
    rowBlockDim: ::core::ffi::c_int,
    colBlockDim: ::core::ffi::c_int,
    descrC: cuda_types::cusparse::cusparseMatDescr_t,
    csrSortedValC: *mut cuda_types::cusparse::cuDoubleComplex,
    csrSortedRowPtrC: *mut ::core::ffi::c_int,
    csrSortedColIndC: *mut ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseZgebsr2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dirA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dirA, "cusparseZgebsr2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(mb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&mb, "cusparseZgebsr2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nb, "cusparseZgebsr2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseZgebsr2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedValA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrSortedValA, "cusparseZgebsr2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedRowPtrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrSortedRowPtrA, "cusparseZgebsr2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedColIndA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrSortedColIndA, "cusparseZgebsr2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(rowBlockDim), ": ").as_bytes())?;
    crate::CudaDisplay::write(&rowBlockDim, "cusparseZgebsr2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(colBlockDim), ": ").as_bytes())?;
    crate::CudaDisplay::write(&colBlockDim, "cusparseZgebsr2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrC), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrC, "cusparseZgebsr2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedValC), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrSortedValC, "cusparseZgebsr2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedRowPtrC), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrSortedRowPtrC, "cusparseZgebsr2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedColIndC), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrSortedColIndC, "cusparseZgebsr2csr", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseScsr2gebsr_bufferSize(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    dirA: cuda_types::cusparse::cusparseDirection_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    csrSortedValA: *const f32,
    csrSortedRowPtrA: *const ::core::ffi::c_int,
    csrSortedColIndA: *const ::core::ffi::c_int,
    rowBlockDim: ::core::ffi::c_int,
    colBlockDim: ::core::ffi::c_int,
    pBufferSizeInBytes: *mut ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &handle,
        "cusparseScsr2gebsr_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dirA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dirA, "cusparseScsr2gebsr_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cusparseScsr2gebsr_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cusparseScsr2gebsr_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &descrA,
        "cusparseScsr2gebsr_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedValA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedValA,
        "cusparseScsr2gebsr_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedRowPtrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedRowPtrA,
        "cusparseScsr2gebsr_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedColIndA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedColIndA,
        "cusparseScsr2gebsr_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(rowBlockDim), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &rowBlockDim,
        "cusparseScsr2gebsr_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(colBlockDim), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &colBlockDim,
        "cusparseScsr2gebsr_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBufferSizeInBytes), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &pBufferSizeInBytes,
        "cusparseScsr2gebsr_bufferSize",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseDcsr2gebsr_bufferSize(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    dirA: cuda_types::cusparse::cusparseDirection_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    csrSortedValA: *const f64,
    csrSortedRowPtrA: *const ::core::ffi::c_int,
    csrSortedColIndA: *const ::core::ffi::c_int,
    rowBlockDim: ::core::ffi::c_int,
    colBlockDim: ::core::ffi::c_int,
    pBufferSizeInBytes: *mut ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &handle,
        "cusparseDcsr2gebsr_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dirA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dirA, "cusparseDcsr2gebsr_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cusparseDcsr2gebsr_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cusparseDcsr2gebsr_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &descrA,
        "cusparseDcsr2gebsr_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedValA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedValA,
        "cusparseDcsr2gebsr_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedRowPtrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedRowPtrA,
        "cusparseDcsr2gebsr_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedColIndA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedColIndA,
        "cusparseDcsr2gebsr_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(rowBlockDim), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &rowBlockDim,
        "cusparseDcsr2gebsr_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(colBlockDim), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &colBlockDim,
        "cusparseDcsr2gebsr_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBufferSizeInBytes), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &pBufferSizeInBytes,
        "cusparseDcsr2gebsr_bufferSize",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseCcsr2gebsr_bufferSize(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    dirA: cuda_types::cusparse::cusparseDirection_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    csrSortedValA: *const cuda_types::cusparse::cuComplex,
    csrSortedRowPtrA: *const ::core::ffi::c_int,
    csrSortedColIndA: *const ::core::ffi::c_int,
    rowBlockDim: ::core::ffi::c_int,
    colBlockDim: ::core::ffi::c_int,
    pBufferSizeInBytes: *mut ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &handle,
        "cusparseCcsr2gebsr_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dirA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dirA, "cusparseCcsr2gebsr_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cusparseCcsr2gebsr_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cusparseCcsr2gebsr_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &descrA,
        "cusparseCcsr2gebsr_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedValA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedValA,
        "cusparseCcsr2gebsr_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedRowPtrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedRowPtrA,
        "cusparseCcsr2gebsr_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedColIndA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedColIndA,
        "cusparseCcsr2gebsr_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(rowBlockDim), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &rowBlockDim,
        "cusparseCcsr2gebsr_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(colBlockDim), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &colBlockDim,
        "cusparseCcsr2gebsr_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBufferSizeInBytes), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &pBufferSizeInBytes,
        "cusparseCcsr2gebsr_bufferSize",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseZcsr2gebsr_bufferSize(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    dirA: cuda_types::cusparse::cusparseDirection_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    csrSortedValA: *const cuda_types::cusparse::cuDoubleComplex,
    csrSortedRowPtrA: *const ::core::ffi::c_int,
    csrSortedColIndA: *const ::core::ffi::c_int,
    rowBlockDim: ::core::ffi::c_int,
    colBlockDim: ::core::ffi::c_int,
    pBufferSizeInBytes: *mut ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &handle,
        "cusparseZcsr2gebsr_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dirA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dirA, "cusparseZcsr2gebsr_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cusparseZcsr2gebsr_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cusparseZcsr2gebsr_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &descrA,
        "cusparseZcsr2gebsr_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedValA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedValA,
        "cusparseZcsr2gebsr_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedRowPtrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedRowPtrA,
        "cusparseZcsr2gebsr_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedColIndA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedColIndA,
        "cusparseZcsr2gebsr_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(rowBlockDim), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &rowBlockDim,
        "cusparseZcsr2gebsr_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(colBlockDim), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &colBlockDim,
        "cusparseZcsr2gebsr_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBufferSizeInBytes), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &pBufferSizeInBytes,
        "cusparseZcsr2gebsr_bufferSize",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseScsr2gebsr_bufferSizeExt(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    dirA: cuda_types::cusparse::cusparseDirection_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    csrSortedValA: *const f32,
    csrSortedRowPtrA: *const ::core::ffi::c_int,
    csrSortedColIndA: *const ::core::ffi::c_int,
    rowBlockDim: ::core::ffi::c_int,
    colBlockDim: ::core::ffi::c_int,
    pBufferSize: *mut usize,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &handle,
        "cusparseScsr2gebsr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dirA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &dirA,
        "cusparseScsr2gebsr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cusparseScsr2gebsr_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cusparseScsr2gebsr_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &descrA,
        "cusparseScsr2gebsr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedValA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedValA,
        "cusparseScsr2gebsr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedRowPtrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedRowPtrA,
        "cusparseScsr2gebsr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedColIndA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedColIndA,
        "cusparseScsr2gebsr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(rowBlockDim), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &rowBlockDim,
        "cusparseScsr2gebsr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(colBlockDim), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &colBlockDim,
        "cusparseScsr2gebsr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBufferSize), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &pBufferSize,
        "cusparseScsr2gebsr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseDcsr2gebsr_bufferSizeExt(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    dirA: cuda_types::cusparse::cusparseDirection_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    csrSortedValA: *const f64,
    csrSortedRowPtrA: *const ::core::ffi::c_int,
    csrSortedColIndA: *const ::core::ffi::c_int,
    rowBlockDim: ::core::ffi::c_int,
    colBlockDim: ::core::ffi::c_int,
    pBufferSize: *mut usize,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &handle,
        "cusparseDcsr2gebsr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dirA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &dirA,
        "cusparseDcsr2gebsr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cusparseDcsr2gebsr_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cusparseDcsr2gebsr_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &descrA,
        "cusparseDcsr2gebsr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedValA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedValA,
        "cusparseDcsr2gebsr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedRowPtrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedRowPtrA,
        "cusparseDcsr2gebsr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedColIndA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedColIndA,
        "cusparseDcsr2gebsr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(rowBlockDim), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &rowBlockDim,
        "cusparseDcsr2gebsr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(colBlockDim), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &colBlockDim,
        "cusparseDcsr2gebsr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBufferSize), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &pBufferSize,
        "cusparseDcsr2gebsr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseCcsr2gebsr_bufferSizeExt(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    dirA: cuda_types::cusparse::cusparseDirection_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    csrSortedValA: *const cuda_types::cusparse::cuComplex,
    csrSortedRowPtrA: *const ::core::ffi::c_int,
    csrSortedColIndA: *const ::core::ffi::c_int,
    rowBlockDim: ::core::ffi::c_int,
    colBlockDim: ::core::ffi::c_int,
    pBufferSize: *mut usize,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &handle,
        "cusparseCcsr2gebsr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dirA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &dirA,
        "cusparseCcsr2gebsr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cusparseCcsr2gebsr_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cusparseCcsr2gebsr_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &descrA,
        "cusparseCcsr2gebsr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedValA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedValA,
        "cusparseCcsr2gebsr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedRowPtrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedRowPtrA,
        "cusparseCcsr2gebsr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedColIndA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedColIndA,
        "cusparseCcsr2gebsr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(rowBlockDim), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &rowBlockDim,
        "cusparseCcsr2gebsr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(colBlockDim), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &colBlockDim,
        "cusparseCcsr2gebsr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBufferSize), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &pBufferSize,
        "cusparseCcsr2gebsr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseZcsr2gebsr_bufferSizeExt(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    dirA: cuda_types::cusparse::cusparseDirection_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    csrSortedValA: *const cuda_types::cusparse::cuDoubleComplex,
    csrSortedRowPtrA: *const ::core::ffi::c_int,
    csrSortedColIndA: *const ::core::ffi::c_int,
    rowBlockDim: ::core::ffi::c_int,
    colBlockDim: ::core::ffi::c_int,
    pBufferSize: *mut usize,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &handle,
        "cusparseZcsr2gebsr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dirA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &dirA,
        "cusparseZcsr2gebsr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cusparseZcsr2gebsr_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cusparseZcsr2gebsr_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &descrA,
        "cusparseZcsr2gebsr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedValA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedValA,
        "cusparseZcsr2gebsr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedRowPtrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedRowPtrA,
        "cusparseZcsr2gebsr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedColIndA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedColIndA,
        "cusparseZcsr2gebsr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(rowBlockDim), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &rowBlockDim,
        "cusparseZcsr2gebsr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(colBlockDim), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &colBlockDim,
        "cusparseZcsr2gebsr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBufferSize), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &pBufferSize,
        "cusparseZcsr2gebsr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseXcsr2gebsrNnz(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    dirA: cuda_types::cusparse::cusparseDirection_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    csrSortedRowPtrA: *const ::core::ffi::c_int,
    csrSortedColIndA: *const ::core::ffi::c_int,
    descrC: cuda_types::cusparse::cusparseMatDescr_t,
    bsrSortedRowPtrC: *mut ::core::ffi::c_int,
    rowBlockDim: ::core::ffi::c_int,
    colBlockDim: ::core::ffi::c_int,
    nnzTotalDevHostPtr: *mut ::core::ffi::c_int,
    pBuffer: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseXcsr2gebsrNnz", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dirA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dirA, "cusparseXcsr2gebsrNnz", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cusparseXcsr2gebsrNnz", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cusparseXcsr2gebsrNnz", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseXcsr2gebsrNnz", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedRowPtrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedRowPtrA,
        "cusparseXcsr2gebsrNnz",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedColIndA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedColIndA,
        "cusparseXcsr2gebsrNnz",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrC), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrC, "cusparseXcsr2gebsrNnz", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedRowPtrC), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedRowPtrC,
        "cusparseXcsr2gebsrNnz",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(rowBlockDim), ": ").as_bytes())?;
    crate::CudaDisplay::write(&rowBlockDim, "cusparseXcsr2gebsrNnz", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(colBlockDim), ": ").as_bytes())?;
    crate::CudaDisplay::write(&colBlockDim, "cusparseXcsr2gebsrNnz", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzTotalDevHostPtr), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &nnzTotalDevHostPtr,
        "cusparseXcsr2gebsrNnz",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBuffer), ": ").as_bytes())?;
    crate::CudaDisplay::write(&pBuffer, "cusparseXcsr2gebsrNnz", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseScsr2gebsr(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    dirA: cuda_types::cusparse::cusparseDirection_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    csrSortedValA: *const f32,
    csrSortedRowPtrA: *const ::core::ffi::c_int,
    csrSortedColIndA: *const ::core::ffi::c_int,
    descrC: cuda_types::cusparse::cusparseMatDescr_t,
    bsrSortedValC: *mut f32,
    bsrSortedRowPtrC: *mut ::core::ffi::c_int,
    bsrSortedColIndC: *mut ::core::ffi::c_int,
    rowBlockDim: ::core::ffi::c_int,
    colBlockDim: ::core::ffi::c_int,
    pBuffer: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseScsr2gebsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dirA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dirA, "cusparseScsr2gebsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cusparseScsr2gebsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cusparseScsr2gebsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseScsr2gebsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedValA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrSortedValA, "cusparseScsr2gebsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedRowPtrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrSortedRowPtrA, "cusparseScsr2gebsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedColIndA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrSortedColIndA, "cusparseScsr2gebsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrC), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrC, "cusparseScsr2gebsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedValC), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrSortedValC, "cusparseScsr2gebsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedRowPtrC), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrSortedRowPtrC, "cusparseScsr2gebsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedColIndC), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrSortedColIndC, "cusparseScsr2gebsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(rowBlockDim), ": ").as_bytes())?;
    crate::CudaDisplay::write(&rowBlockDim, "cusparseScsr2gebsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(colBlockDim), ": ").as_bytes())?;
    crate::CudaDisplay::write(&colBlockDim, "cusparseScsr2gebsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBuffer), ": ").as_bytes())?;
    crate::CudaDisplay::write(&pBuffer, "cusparseScsr2gebsr", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseDcsr2gebsr(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    dirA: cuda_types::cusparse::cusparseDirection_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    csrSortedValA: *const f64,
    csrSortedRowPtrA: *const ::core::ffi::c_int,
    csrSortedColIndA: *const ::core::ffi::c_int,
    descrC: cuda_types::cusparse::cusparseMatDescr_t,
    bsrSortedValC: *mut f64,
    bsrSortedRowPtrC: *mut ::core::ffi::c_int,
    bsrSortedColIndC: *mut ::core::ffi::c_int,
    rowBlockDim: ::core::ffi::c_int,
    colBlockDim: ::core::ffi::c_int,
    pBuffer: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseDcsr2gebsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dirA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dirA, "cusparseDcsr2gebsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cusparseDcsr2gebsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cusparseDcsr2gebsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseDcsr2gebsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedValA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrSortedValA, "cusparseDcsr2gebsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedRowPtrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrSortedRowPtrA, "cusparseDcsr2gebsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedColIndA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrSortedColIndA, "cusparseDcsr2gebsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrC), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrC, "cusparseDcsr2gebsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedValC), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrSortedValC, "cusparseDcsr2gebsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedRowPtrC), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrSortedRowPtrC, "cusparseDcsr2gebsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedColIndC), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrSortedColIndC, "cusparseDcsr2gebsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(rowBlockDim), ": ").as_bytes())?;
    crate::CudaDisplay::write(&rowBlockDim, "cusparseDcsr2gebsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(colBlockDim), ": ").as_bytes())?;
    crate::CudaDisplay::write(&colBlockDim, "cusparseDcsr2gebsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBuffer), ": ").as_bytes())?;
    crate::CudaDisplay::write(&pBuffer, "cusparseDcsr2gebsr", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseCcsr2gebsr(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    dirA: cuda_types::cusparse::cusparseDirection_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    csrSortedValA: *const cuda_types::cusparse::cuComplex,
    csrSortedRowPtrA: *const ::core::ffi::c_int,
    csrSortedColIndA: *const ::core::ffi::c_int,
    descrC: cuda_types::cusparse::cusparseMatDescr_t,
    bsrSortedValC: *mut cuda_types::cusparse::cuComplex,
    bsrSortedRowPtrC: *mut ::core::ffi::c_int,
    bsrSortedColIndC: *mut ::core::ffi::c_int,
    rowBlockDim: ::core::ffi::c_int,
    colBlockDim: ::core::ffi::c_int,
    pBuffer: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseCcsr2gebsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dirA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dirA, "cusparseCcsr2gebsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cusparseCcsr2gebsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cusparseCcsr2gebsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseCcsr2gebsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedValA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrSortedValA, "cusparseCcsr2gebsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedRowPtrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrSortedRowPtrA, "cusparseCcsr2gebsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedColIndA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrSortedColIndA, "cusparseCcsr2gebsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrC), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrC, "cusparseCcsr2gebsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedValC), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrSortedValC, "cusparseCcsr2gebsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedRowPtrC), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrSortedRowPtrC, "cusparseCcsr2gebsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedColIndC), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrSortedColIndC, "cusparseCcsr2gebsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(rowBlockDim), ": ").as_bytes())?;
    crate::CudaDisplay::write(&rowBlockDim, "cusparseCcsr2gebsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(colBlockDim), ": ").as_bytes())?;
    crate::CudaDisplay::write(&colBlockDim, "cusparseCcsr2gebsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBuffer), ": ").as_bytes())?;
    crate::CudaDisplay::write(&pBuffer, "cusparseCcsr2gebsr", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseZcsr2gebsr(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    dirA: cuda_types::cusparse::cusparseDirection_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    csrSortedValA: *const cuda_types::cusparse::cuDoubleComplex,
    csrSortedRowPtrA: *const ::core::ffi::c_int,
    csrSortedColIndA: *const ::core::ffi::c_int,
    descrC: cuda_types::cusparse::cusparseMatDescr_t,
    bsrSortedValC: *mut cuda_types::cusparse::cuDoubleComplex,
    bsrSortedRowPtrC: *mut ::core::ffi::c_int,
    bsrSortedColIndC: *mut ::core::ffi::c_int,
    rowBlockDim: ::core::ffi::c_int,
    colBlockDim: ::core::ffi::c_int,
    pBuffer: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseZcsr2gebsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dirA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dirA, "cusparseZcsr2gebsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cusparseZcsr2gebsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cusparseZcsr2gebsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseZcsr2gebsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedValA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrSortedValA, "cusparseZcsr2gebsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedRowPtrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrSortedRowPtrA, "cusparseZcsr2gebsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedColIndA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrSortedColIndA, "cusparseZcsr2gebsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrC), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrC, "cusparseZcsr2gebsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedValC), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrSortedValC, "cusparseZcsr2gebsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedRowPtrC), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrSortedRowPtrC, "cusparseZcsr2gebsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedColIndC), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrSortedColIndC, "cusparseZcsr2gebsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(rowBlockDim), ": ").as_bytes())?;
    crate::CudaDisplay::write(&rowBlockDim, "cusparseZcsr2gebsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(colBlockDim), ": ").as_bytes())?;
    crate::CudaDisplay::write(&colBlockDim, "cusparseZcsr2gebsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBuffer), ": ").as_bytes())?;
    crate::CudaDisplay::write(&pBuffer, "cusparseZcsr2gebsr", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseSgebsr2gebsr_bufferSize(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    dirA: cuda_types::cusparse::cusparseDirection_t,
    mb: ::core::ffi::c_int,
    nb: ::core::ffi::c_int,
    nnzb: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    bsrSortedValA: *const f32,
    bsrSortedRowPtrA: *const ::core::ffi::c_int,
    bsrSortedColIndA: *const ::core::ffi::c_int,
    rowBlockDimA: ::core::ffi::c_int,
    colBlockDimA: ::core::ffi::c_int,
    rowBlockDimC: ::core::ffi::c_int,
    colBlockDimC: ::core::ffi::c_int,
    pBufferSizeInBytes: *mut ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &handle,
        "cusparseSgebsr2gebsr_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dirA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &dirA,
        "cusparseSgebsr2gebsr_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(mb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&mb, "cusparseSgebsr2gebsr_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nb, "cusparseSgebsr2gebsr_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzb), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &nnzb,
        "cusparseSgebsr2gebsr_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &descrA,
        "cusparseSgebsr2gebsr_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedValA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedValA,
        "cusparseSgebsr2gebsr_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedRowPtrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedRowPtrA,
        "cusparseSgebsr2gebsr_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedColIndA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedColIndA,
        "cusparseSgebsr2gebsr_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(rowBlockDimA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &rowBlockDimA,
        "cusparseSgebsr2gebsr_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(colBlockDimA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &colBlockDimA,
        "cusparseSgebsr2gebsr_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(rowBlockDimC), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &rowBlockDimC,
        "cusparseSgebsr2gebsr_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(colBlockDimC), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &colBlockDimC,
        "cusparseSgebsr2gebsr_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBufferSizeInBytes), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &pBufferSizeInBytes,
        "cusparseSgebsr2gebsr_bufferSize",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseDgebsr2gebsr_bufferSize(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    dirA: cuda_types::cusparse::cusparseDirection_t,
    mb: ::core::ffi::c_int,
    nb: ::core::ffi::c_int,
    nnzb: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    bsrSortedValA: *const f64,
    bsrSortedRowPtrA: *const ::core::ffi::c_int,
    bsrSortedColIndA: *const ::core::ffi::c_int,
    rowBlockDimA: ::core::ffi::c_int,
    colBlockDimA: ::core::ffi::c_int,
    rowBlockDimC: ::core::ffi::c_int,
    colBlockDimC: ::core::ffi::c_int,
    pBufferSizeInBytes: *mut ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &handle,
        "cusparseDgebsr2gebsr_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dirA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &dirA,
        "cusparseDgebsr2gebsr_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(mb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&mb, "cusparseDgebsr2gebsr_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nb, "cusparseDgebsr2gebsr_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzb), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &nnzb,
        "cusparseDgebsr2gebsr_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &descrA,
        "cusparseDgebsr2gebsr_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedValA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedValA,
        "cusparseDgebsr2gebsr_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedRowPtrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedRowPtrA,
        "cusparseDgebsr2gebsr_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedColIndA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedColIndA,
        "cusparseDgebsr2gebsr_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(rowBlockDimA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &rowBlockDimA,
        "cusparseDgebsr2gebsr_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(colBlockDimA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &colBlockDimA,
        "cusparseDgebsr2gebsr_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(rowBlockDimC), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &rowBlockDimC,
        "cusparseDgebsr2gebsr_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(colBlockDimC), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &colBlockDimC,
        "cusparseDgebsr2gebsr_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBufferSizeInBytes), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &pBufferSizeInBytes,
        "cusparseDgebsr2gebsr_bufferSize",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseCgebsr2gebsr_bufferSize(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    dirA: cuda_types::cusparse::cusparseDirection_t,
    mb: ::core::ffi::c_int,
    nb: ::core::ffi::c_int,
    nnzb: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    bsrSortedValA: *const cuda_types::cusparse::cuComplex,
    bsrSortedRowPtrA: *const ::core::ffi::c_int,
    bsrSortedColIndA: *const ::core::ffi::c_int,
    rowBlockDimA: ::core::ffi::c_int,
    colBlockDimA: ::core::ffi::c_int,
    rowBlockDimC: ::core::ffi::c_int,
    colBlockDimC: ::core::ffi::c_int,
    pBufferSizeInBytes: *mut ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &handle,
        "cusparseCgebsr2gebsr_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dirA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &dirA,
        "cusparseCgebsr2gebsr_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(mb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&mb, "cusparseCgebsr2gebsr_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nb, "cusparseCgebsr2gebsr_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzb), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &nnzb,
        "cusparseCgebsr2gebsr_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &descrA,
        "cusparseCgebsr2gebsr_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedValA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedValA,
        "cusparseCgebsr2gebsr_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedRowPtrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedRowPtrA,
        "cusparseCgebsr2gebsr_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedColIndA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedColIndA,
        "cusparseCgebsr2gebsr_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(rowBlockDimA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &rowBlockDimA,
        "cusparseCgebsr2gebsr_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(colBlockDimA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &colBlockDimA,
        "cusparseCgebsr2gebsr_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(rowBlockDimC), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &rowBlockDimC,
        "cusparseCgebsr2gebsr_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(colBlockDimC), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &colBlockDimC,
        "cusparseCgebsr2gebsr_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBufferSizeInBytes), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &pBufferSizeInBytes,
        "cusparseCgebsr2gebsr_bufferSize",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseZgebsr2gebsr_bufferSize(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    dirA: cuda_types::cusparse::cusparseDirection_t,
    mb: ::core::ffi::c_int,
    nb: ::core::ffi::c_int,
    nnzb: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    bsrSortedValA: *const cuda_types::cusparse::cuDoubleComplex,
    bsrSortedRowPtrA: *const ::core::ffi::c_int,
    bsrSortedColIndA: *const ::core::ffi::c_int,
    rowBlockDimA: ::core::ffi::c_int,
    colBlockDimA: ::core::ffi::c_int,
    rowBlockDimC: ::core::ffi::c_int,
    colBlockDimC: ::core::ffi::c_int,
    pBufferSizeInBytes: *mut ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &handle,
        "cusparseZgebsr2gebsr_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dirA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &dirA,
        "cusparseZgebsr2gebsr_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(mb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&mb, "cusparseZgebsr2gebsr_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nb, "cusparseZgebsr2gebsr_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzb), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &nnzb,
        "cusparseZgebsr2gebsr_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &descrA,
        "cusparseZgebsr2gebsr_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedValA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedValA,
        "cusparseZgebsr2gebsr_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedRowPtrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedRowPtrA,
        "cusparseZgebsr2gebsr_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedColIndA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedColIndA,
        "cusparseZgebsr2gebsr_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(rowBlockDimA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &rowBlockDimA,
        "cusparseZgebsr2gebsr_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(colBlockDimA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &colBlockDimA,
        "cusparseZgebsr2gebsr_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(rowBlockDimC), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &rowBlockDimC,
        "cusparseZgebsr2gebsr_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(colBlockDimC), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &colBlockDimC,
        "cusparseZgebsr2gebsr_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBufferSizeInBytes), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &pBufferSizeInBytes,
        "cusparseZgebsr2gebsr_bufferSize",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseSgebsr2gebsr_bufferSizeExt(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    dirA: cuda_types::cusparse::cusparseDirection_t,
    mb: ::core::ffi::c_int,
    nb: ::core::ffi::c_int,
    nnzb: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    bsrSortedValA: *const f32,
    bsrSortedRowPtrA: *const ::core::ffi::c_int,
    bsrSortedColIndA: *const ::core::ffi::c_int,
    rowBlockDimA: ::core::ffi::c_int,
    colBlockDimA: ::core::ffi::c_int,
    rowBlockDimC: ::core::ffi::c_int,
    colBlockDimC: ::core::ffi::c_int,
    pBufferSize: *mut usize,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &handle,
        "cusparseSgebsr2gebsr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dirA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &dirA,
        "cusparseSgebsr2gebsr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(mb), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &mb,
        "cusparseSgebsr2gebsr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nb), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &nb,
        "cusparseSgebsr2gebsr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzb), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &nnzb,
        "cusparseSgebsr2gebsr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &descrA,
        "cusparseSgebsr2gebsr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedValA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedValA,
        "cusparseSgebsr2gebsr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedRowPtrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedRowPtrA,
        "cusparseSgebsr2gebsr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedColIndA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedColIndA,
        "cusparseSgebsr2gebsr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(rowBlockDimA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &rowBlockDimA,
        "cusparseSgebsr2gebsr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(colBlockDimA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &colBlockDimA,
        "cusparseSgebsr2gebsr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(rowBlockDimC), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &rowBlockDimC,
        "cusparseSgebsr2gebsr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(colBlockDimC), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &colBlockDimC,
        "cusparseSgebsr2gebsr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBufferSize), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &pBufferSize,
        "cusparseSgebsr2gebsr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseDgebsr2gebsr_bufferSizeExt(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    dirA: cuda_types::cusparse::cusparseDirection_t,
    mb: ::core::ffi::c_int,
    nb: ::core::ffi::c_int,
    nnzb: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    bsrSortedValA: *const f64,
    bsrSortedRowPtrA: *const ::core::ffi::c_int,
    bsrSortedColIndA: *const ::core::ffi::c_int,
    rowBlockDimA: ::core::ffi::c_int,
    colBlockDimA: ::core::ffi::c_int,
    rowBlockDimC: ::core::ffi::c_int,
    colBlockDimC: ::core::ffi::c_int,
    pBufferSize: *mut usize,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &handle,
        "cusparseDgebsr2gebsr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dirA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &dirA,
        "cusparseDgebsr2gebsr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(mb), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &mb,
        "cusparseDgebsr2gebsr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nb), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &nb,
        "cusparseDgebsr2gebsr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzb), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &nnzb,
        "cusparseDgebsr2gebsr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &descrA,
        "cusparseDgebsr2gebsr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedValA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedValA,
        "cusparseDgebsr2gebsr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedRowPtrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedRowPtrA,
        "cusparseDgebsr2gebsr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedColIndA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedColIndA,
        "cusparseDgebsr2gebsr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(rowBlockDimA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &rowBlockDimA,
        "cusparseDgebsr2gebsr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(colBlockDimA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &colBlockDimA,
        "cusparseDgebsr2gebsr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(rowBlockDimC), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &rowBlockDimC,
        "cusparseDgebsr2gebsr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(colBlockDimC), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &colBlockDimC,
        "cusparseDgebsr2gebsr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBufferSize), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &pBufferSize,
        "cusparseDgebsr2gebsr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseCgebsr2gebsr_bufferSizeExt(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    dirA: cuda_types::cusparse::cusparseDirection_t,
    mb: ::core::ffi::c_int,
    nb: ::core::ffi::c_int,
    nnzb: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    bsrSortedValA: *const cuda_types::cusparse::cuComplex,
    bsrSortedRowPtrA: *const ::core::ffi::c_int,
    bsrSortedColIndA: *const ::core::ffi::c_int,
    rowBlockDimA: ::core::ffi::c_int,
    colBlockDimA: ::core::ffi::c_int,
    rowBlockDimC: ::core::ffi::c_int,
    colBlockDimC: ::core::ffi::c_int,
    pBufferSize: *mut usize,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &handle,
        "cusparseCgebsr2gebsr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dirA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &dirA,
        "cusparseCgebsr2gebsr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(mb), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &mb,
        "cusparseCgebsr2gebsr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nb), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &nb,
        "cusparseCgebsr2gebsr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzb), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &nnzb,
        "cusparseCgebsr2gebsr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &descrA,
        "cusparseCgebsr2gebsr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedValA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedValA,
        "cusparseCgebsr2gebsr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedRowPtrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedRowPtrA,
        "cusparseCgebsr2gebsr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedColIndA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedColIndA,
        "cusparseCgebsr2gebsr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(rowBlockDimA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &rowBlockDimA,
        "cusparseCgebsr2gebsr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(colBlockDimA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &colBlockDimA,
        "cusparseCgebsr2gebsr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(rowBlockDimC), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &rowBlockDimC,
        "cusparseCgebsr2gebsr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(colBlockDimC), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &colBlockDimC,
        "cusparseCgebsr2gebsr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBufferSize), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &pBufferSize,
        "cusparseCgebsr2gebsr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseZgebsr2gebsr_bufferSizeExt(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    dirA: cuda_types::cusparse::cusparseDirection_t,
    mb: ::core::ffi::c_int,
    nb: ::core::ffi::c_int,
    nnzb: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    bsrSortedValA: *const cuda_types::cusparse::cuDoubleComplex,
    bsrSortedRowPtrA: *const ::core::ffi::c_int,
    bsrSortedColIndA: *const ::core::ffi::c_int,
    rowBlockDimA: ::core::ffi::c_int,
    colBlockDimA: ::core::ffi::c_int,
    rowBlockDimC: ::core::ffi::c_int,
    colBlockDimC: ::core::ffi::c_int,
    pBufferSize: *mut usize,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &handle,
        "cusparseZgebsr2gebsr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dirA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &dirA,
        "cusparseZgebsr2gebsr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(mb), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &mb,
        "cusparseZgebsr2gebsr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nb), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &nb,
        "cusparseZgebsr2gebsr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzb), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &nnzb,
        "cusparseZgebsr2gebsr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &descrA,
        "cusparseZgebsr2gebsr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedValA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedValA,
        "cusparseZgebsr2gebsr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedRowPtrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedRowPtrA,
        "cusparseZgebsr2gebsr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedColIndA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedColIndA,
        "cusparseZgebsr2gebsr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(rowBlockDimA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &rowBlockDimA,
        "cusparseZgebsr2gebsr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(colBlockDimA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &colBlockDimA,
        "cusparseZgebsr2gebsr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(rowBlockDimC), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &rowBlockDimC,
        "cusparseZgebsr2gebsr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(colBlockDimC), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &colBlockDimC,
        "cusparseZgebsr2gebsr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBufferSize), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &pBufferSize,
        "cusparseZgebsr2gebsr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseXgebsr2gebsrNnz(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    dirA: cuda_types::cusparse::cusparseDirection_t,
    mb: ::core::ffi::c_int,
    nb: ::core::ffi::c_int,
    nnzb: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    bsrSortedRowPtrA: *const ::core::ffi::c_int,
    bsrSortedColIndA: *const ::core::ffi::c_int,
    rowBlockDimA: ::core::ffi::c_int,
    colBlockDimA: ::core::ffi::c_int,
    descrC: cuda_types::cusparse::cusparseMatDescr_t,
    bsrSortedRowPtrC: *mut ::core::ffi::c_int,
    rowBlockDimC: ::core::ffi::c_int,
    colBlockDimC: ::core::ffi::c_int,
    nnzTotalDevHostPtr: *mut ::core::ffi::c_int,
    pBuffer: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseXgebsr2gebsrNnz", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dirA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dirA, "cusparseXgebsr2gebsrNnz", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(mb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&mb, "cusparseXgebsr2gebsrNnz", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nb, "cusparseXgebsr2gebsrNnz", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnzb, "cusparseXgebsr2gebsrNnz", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseXgebsr2gebsrNnz", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedRowPtrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedRowPtrA,
        "cusparseXgebsr2gebsrNnz",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedColIndA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedColIndA,
        "cusparseXgebsr2gebsrNnz",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(rowBlockDimA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &rowBlockDimA,
        "cusparseXgebsr2gebsrNnz",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(colBlockDimA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &colBlockDimA,
        "cusparseXgebsr2gebsrNnz",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrC), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrC, "cusparseXgebsr2gebsrNnz", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedRowPtrC), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedRowPtrC,
        "cusparseXgebsr2gebsrNnz",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(rowBlockDimC), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &rowBlockDimC,
        "cusparseXgebsr2gebsrNnz",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(colBlockDimC), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &colBlockDimC,
        "cusparseXgebsr2gebsrNnz",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzTotalDevHostPtr), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &nnzTotalDevHostPtr,
        "cusparseXgebsr2gebsrNnz",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBuffer), ": ").as_bytes())?;
    crate::CudaDisplay::write(&pBuffer, "cusparseXgebsr2gebsrNnz", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseSgebsr2gebsr(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    dirA: cuda_types::cusparse::cusparseDirection_t,
    mb: ::core::ffi::c_int,
    nb: ::core::ffi::c_int,
    nnzb: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    bsrSortedValA: *const f32,
    bsrSortedRowPtrA: *const ::core::ffi::c_int,
    bsrSortedColIndA: *const ::core::ffi::c_int,
    rowBlockDimA: ::core::ffi::c_int,
    colBlockDimA: ::core::ffi::c_int,
    descrC: cuda_types::cusparse::cusparseMatDescr_t,
    bsrSortedValC: *mut f32,
    bsrSortedRowPtrC: *mut ::core::ffi::c_int,
    bsrSortedColIndC: *mut ::core::ffi::c_int,
    rowBlockDimC: ::core::ffi::c_int,
    colBlockDimC: ::core::ffi::c_int,
    pBuffer: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseSgebsr2gebsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dirA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dirA, "cusparseSgebsr2gebsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(mb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&mb, "cusparseSgebsr2gebsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nb, "cusparseSgebsr2gebsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnzb, "cusparseSgebsr2gebsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseSgebsr2gebsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedValA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrSortedValA, "cusparseSgebsr2gebsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedRowPtrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedRowPtrA,
        "cusparseSgebsr2gebsr",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedColIndA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedColIndA,
        "cusparseSgebsr2gebsr",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(rowBlockDimA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&rowBlockDimA, "cusparseSgebsr2gebsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(colBlockDimA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&colBlockDimA, "cusparseSgebsr2gebsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrC), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrC, "cusparseSgebsr2gebsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedValC), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrSortedValC, "cusparseSgebsr2gebsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedRowPtrC), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedRowPtrC,
        "cusparseSgebsr2gebsr",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedColIndC), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedColIndC,
        "cusparseSgebsr2gebsr",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(rowBlockDimC), ": ").as_bytes())?;
    crate::CudaDisplay::write(&rowBlockDimC, "cusparseSgebsr2gebsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(colBlockDimC), ": ").as_bytes())?;
    crate::CudaDisplay::write(&colBlockDimC, "cusparseSgebsr2gebsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBuffer), ": ").as_bytes())?;
    crate::CudaDisplay::write(&pBuffer, "cusparseSgebsr2gebsr", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseDgebsr2gebsr(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    dirA: cuda_types::cusparse::cusparseDirection_t,
    mb: ::core::ffi::c_int,
    nb: ::core::ffi::c_int,
    nnzb: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    bsrSortedValA: *const f64,
    bsrSortedRowPtrA: *const ::core::ffi::c_int,
    bsrSortedColIndA: *const ::core::ffi::c_int,
    rowBlockDimA: ::core::ffi::c_int,
    colBlockDimA: ::core::ffi::c_int,
    descrC: cuda_types::cusparse::cusparseMatDescr_t,
    bsrSortedValC: *mut f64,
    bsrSortedRowPtrC: *mut ::core::ffi::c_int,
    bsrSortedColIndC: *mut ::core::ffi::c_int,
    rowBlockDimC: ::core::ffi::c_int,
    colBlockDimC: ::core::ffi::c_int,
    pBuffer: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseDgebsr2gebsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dirA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dirA, "cusparseDgebsr2gebsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(mb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&mb, "cusparseDgebsr2gebsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nb, "cusparseDgebsr2gebsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnzb, "cusparseDgebsr2gebsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseDgebsr2gebsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedValA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrSortedValA, "cusparseDgebsr2gebsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedRowPtrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedRowPtrA,
        "cusparseDgebsr2gebsr",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedColIndA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedColIndA,
        "cusparseDgebsr2gebsr",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(rowBlockDimA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&rowBlockDimA, "cusparseDgebsr2gebsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(colBlockDimA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&colBlockDimA, "cusparseDgebsr2gebsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrC), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrC, "cusparseDgebsr2gebsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedValC), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrSortedValC, "cusparseDgebsr2gebsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedRowPtrC), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedRowPtrC,
        "cusparseDgebsr2gebsr",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedColIndC), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedColIndC,
        "cusparseDgebsr2gebsr",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(rowBlockDimC), ": ").as_bytes())?;
    crate::CudaDisplay::write(&rowBlockDimC, "cusparseDgebsr2gebsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(colBlockDimC), ": ").as_bytes())?;
    crate::CudaDisplay::write(&colBlockDimC, "cusparseDgebsr2gebsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBuffer), ": ").as_bytes())?;
    crate::CudaDisplay::write(&pBuffer, "cusparseDgebsr2gebsr", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseCgebsr2gebsr(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    dirA: cuda_types::cusparse::cusparseDirection_t,
    mb: ::core::ffi::c_int,
    nb: ::core::ffi::c_int,
    nnzb: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    bsrSortedValA: *const cuda_types::cusparse::cuComplex,
    bsrSortedRowPtrA: *const ::core::ffi::c_int,
    bsrSortedColIndA: *const ::core::ffi::c_int,
    rowBlockDimA: ::core::ffi::c_int,
    colBlockDimA: ::core::ffi::c_int,
    descrC: cuda_types::cusparse::cusparseMatDescr_t,
    bsrSortedValC: *mut cuda_types::cusparse::cuComplex,
    bsrSortedRowPtrC: *mut ::core::ffi::c_int,
    bsrSortedColIndC: *mut ::core::ffi::c_int,
    rowBlockDimC: ::core::ffi::c_int,
    colBlockDimC: ::core::ffi::c_int,
    pBuffer: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseCgebsr2gebsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dirA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dirA, "cusparseCgebsr2gebsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(mb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&mb, "cusparseCgebsr2gebsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nb, "cusparseCgebsr2gebsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnzb, "cusparseCgebsr2gebsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseCgebsr2gebsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedValA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrSortedValA, "cusparseCgebsr2gebsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedRowPtrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedRowPtrA,
        "cusparseCgebsr2gebsr",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedColIndA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedColIndA,
        "cusparseCgebsr2gebsr",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(rowBlockDimA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&rowBlockDimA, "cusparseCgebsr2gebsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(colBlockDimA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&colBlockDimA, "cusparseCgebsr2gebsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrC), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrC, "cusparseCgebsr2gebsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedValC), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrSortedValC, "cusparseCgebsr2gebsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedRowPtrC), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedRowPtrC,
        "cusparseCgebsr2gebsr",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedColIndC), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedColIndC,
        "cusparseCgebsr2gebsr",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(rowBlockDimC), ": ").as_bytes())?;
    crate::CudaDisplay::write(&rowBlockDimC, "cusparseCgebsr2gebsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(colBlockDimC), ": ").as_bytes())?;
    crate::CudaDisplay::write(&colBlockDimC, "cusparseCgebsr2gebsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBuffer), ": ").as_bytes())?;
    crate::CudaDisplay::write(&pBuffer, "cusparseCgebsr2gebsr", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseZgebsr2gebsr(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    dirA: cuda_types::cusparse::cusparseDirection_t,
    mb: ::core::ffi::c_int,
    nb: ::core::ffi::c_int,
    nnzb: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    bsrSortedValA: *const cuda_types::cusparse::cuDoubleComplex,
    bsrSortedRowPtrA: *const ::core::ffi::c_int,
    bsrSortedColIndA: *const ::core::ffi::c_int,
    rowBlockDimA: ::core::ffi::c_int,
    colBlockDimA: ::core::ffi::c_int,
    descrC: cuda_types::cusparse::cusparseMatDescr_t,
    bsrSortedValC: *mut cuda_types::cusparse::cuDoubleComplex,
    bsrSortedRowPtrC: *mut ::core::ffi::c_int,
    bsrSortedColIndC: *mut ::core::ffi::c_int,
    rowBlockDimC: ::core::ffi::c_int,
    colBlockDimC: ::core::ffi::c_int,
    pBuffer: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseZgebsr2gebsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dirA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dirA, "cusparseZgebsr2gebsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(mb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&mb, "cusparseZgebsr2gebsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nb, "cusparseZgebsr2gebsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzb), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnzb, "cusparseZgebsr2gebsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseZgebsr2gebsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedValA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrSortedValA, "cusparseZgebsr2gebsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedRowPtrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedRowPtrA,
        "cusparseZgebsr2gebsr",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedColIndA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedColIndA,
        "cusparseZgebsr2gebsr",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(rowBlockDimA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&rowBlockDimA, "cusparseZgebsr2gebsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(colBlockDimA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&colBlockDimA, "cusparseZgebsr2gebsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrC), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrC, "cusparseZgebsr2gebsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedValC), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrSortedValC, "cusparseZgebsr2gebsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedRowPtrC), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedRowPtrC,
        "cusparseZgebsr2gebsr",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrSortedColIndC), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrSortedColIndC,
        "cusparseZgebsr2gebsr",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(rowBlockDimC), ": ").as_bytes())?;
    crate::CudaDisplay::write(&rowBlockDimC, "cusparseZgebsr2gebsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(colBlockDimC), ": ").as_bytes())?;
    crate::CudaDisplay::write(&colBlockDimC, "cusparseZgebsr2gebsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBuffer), ": ").as_bytes())?;
    crate::CudaDisplay::write(&pBuffer, "cusparseZgebsr2gebsr", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseCreateIdentityPermutation(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    n: ::core::ffi::c_int,
    p: *mut ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &handle,
        "cusparseCreateIdentityPermutation",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cusparseCreateIdentityPermutation", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(p), ": ").as_bytes())?;
    crate::CudaDisplay::write(&p, "cusparseCreateIdentityPermutation", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseXcoosort_bufferSizeExt(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    nnz: ::core::ffi::c_int,
    cooRowsA: *const ::core::ffi::c_int,
    cooColsA: *const ::core::ffi::c_int,
    pBufferSizeInBytes: *mut usize,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &handle,
        "cusparseXcoosort_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cusparseXcoosort_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cusparseXcoosort_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnz), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnz, "cusparseXcoosort_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(cooRowsA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &cooRowsA,
        "cusparseXcoosort_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(cooColsA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &cooColsA,
        "cusparseXcoosort_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBufferSizeInBytes), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &pBufferSizeInBytes,
        "cusparseXcoosort_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseXcoosortByRow(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    nnz: ::core::ffi::c_int,
    cooRowsA: *mut ::core::ffi::c_int,
    cooColsA: *mut ::core::ffi::c_int,
    P: *mut ::core::ffi::c_int,
    pBuffer: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseXcoosortByRow", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cusparseXcoosortByRow", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cusparseXcoosortByRow", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnz), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnz, "cusparseXcoosortByRow", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(cooRowsA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&cooRowsA, "cusparseXcoosortByRow", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(cooColsA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&cooColsA, "cusparseXcoosortByRow", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(P), ": ").as_bytes())?;
    crate::CudaDisplay::write(&P, "cusparseXcoosortByRow", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBuffer), ": ").as_bytes())?;
    crate::CudaDisplay::write(&pBuffer, "cusparseXcoosortByRow", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseXcoosortByColumn(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    nnz: ::core::ffi::c_int,
    cooRowsA: *mut ::core::ffi::c_int,
    cooColsA: *mut ::core::ffi::c_int,
    P: *mut ::core::ffi::c_int,
    pBuffer: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseXcoosortByColumn", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cusparseXcoosortByColumn", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cusparseXcoosortByColumn", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnz), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnz, "cusparseXcoosortByColumn", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(cooRowsA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&cooRowsA, "cusparseXcoosortByColumn", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(cooColsA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&cooColsA, "cusparseXcoosortByColumn", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(P), ": ").as_bytes())?;
    crate::CudaDisplay::write(&P, "cusparseXcoosortByColumn", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBuffer), ": ").as_bytes())?;
    crate::CudaDisplay::write(&pBuffer, "cusparseXcoosortByColumn", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseXcsrsort_bufferSizeExt(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    nnz: ::core::ffi::c_int,
    csrRowPtrA: *const ::core::ffi::c_int,
    csrColIndA: *const ::core::ffi::c_int,
    pBufferSizeInBytes: *mut usize,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &handle,
        "cusparseXcsrsort_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cusparseXcsrsort_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cusparseXcsrsort_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnz), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnz, "cusparseXcsrsort_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrRowPtrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrRowPtrA,
        "cusparseXcsrsort_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrColIndA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrColIndA,
        "cusparseXcsrsort_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBufferSizeInBytes), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &pBufferSizeInBytes,
        "cusparseXcsrsort_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseXcsrsort(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    nnz: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    csrRowPtrA: *const ::core::ffi::c_int,
    csrColIndA: *mut ::core::ffi::c_int,
    P: *mut ::core::ffi::c_int,
    pBuffer: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseXcsrsort", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cusparseXcsrsort", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cusparseXcsrsort", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnz), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnz, "cusparseXcsrsort", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseXcsrsort", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrRowPtrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrRowPtrA, "cusparseXcsrsort", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrColIndA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrColIndA, "cusparseXcsrsort", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(P), ": ").as_bytes())?;
    crate::CudaDisplay::write(&P, "cusparseXcsrsort", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBuffer), ": ").as_bytes())?;
    crate::CudaDisplay::write(&pBuffer, "cusparseXcsrsort", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseXcscsort_bufferSizeExt(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    nnz: ::core::ffi::c_int,
    cscColPtrA: *const ::core::ffi::c_int,
    cscRowIndA: *const ::core::ffi::c_int,
    pBufferSizeInBytes: *mut usize,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &handle,
        "cusparseXcscsort_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cusparseXcscsort_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cusparseXcscsort_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnz), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnz, "cusparseXcscsort_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(cscColPtrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &cscColPtrA,
        "cusparseXcscsort_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(cscRowIndA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &cscRowIndA,
        "cusparseXcscsort_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBufferSizeInBytes), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &pBufferSizeInBytes,
        "cusparseXcscsort_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseXcscsort(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    nnz: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    cscColPtrA: *const ::core::ffi::c_int,
    cscRowIndA: *mut ::core::ffi::c_int,
    P: *mut ::core::ffi::c_int,
    pBuffer: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseXcscsort", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cusparseXcscsort", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cusparseXcscsort", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnz), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnz, "cusparseXcscsort", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseXcscsort", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(cscColPtrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&cscColPtrA, "cusparseXcscsort", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(cscRowIndA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&cscRowIndA, "cusparseXcscsort", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(P), ": ").as_bytes())?;
    crate::CudaDisplay::write(&P, "cusparseXcscsort", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBuffer), ": ").as_bytes())?;
    crate::CudaDisplay::write(&pBuffer, "cusparseXcscsort", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseScsru2csr_bufferSizeExt(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    nnz: ::core::ffi::c_int,
    csrVal: *mut f32,
    csrRowPtr: *const ::core::ffi::c_int,
    csrColInd: *mut ::core::ffi::c_int,
    info: cuda_types::cusparse::csru2csrInfo_t,
    pBufferSizeInBytes: *mut usize,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &handle,
        "cusparseScsru2csr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cusparseScsru2csr_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cusparseScsru2csr_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnz), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnz, "cusparseScsru2csr_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrVal), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrVal,
        "cusparseScsru2csr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrRowPtr), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrRowPtr,
        "cusparseScsru2csr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrColInd), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrColInd,
        "cusparseScsru2csr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &info,
        "cusparseScsru2csr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBufferSizeInBytes), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &pBufferSizeInBytes,
        "cusparseScsru2csr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseDcsru2csr_bufferSizeExt(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    nnz: ::core::ffi::c_int,
    csrVal: *mut f64,
    csrRowPtr: *const ::core::ffi::c_int,
    csrColInd: *mut ::core::ffi::c_int,
    info: cuda_types::cusparse::csru2csrInfo_t,
    pBufferSizeInBytes: *mut usize,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &handle,
        "cusparseDcsru2csr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cusparseDcsru2csr_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cusparseDcsru2csr_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnz), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnz, "cusparseDcsru2csr_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrVal), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrVal,
        "cusparseDcsru2csr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrRowPtr), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrRowPtr,
        "cusparseDcsru2csr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrColInd), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrColInd,
        "cusparseDcsru2csr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &info,
        "cusparseDcsru2csr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBufferSizeInBytes), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &pBufferSizeInBytes,
        "cusparseDcsru2csr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseCcsru2csr_bufferSizeExt(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    nnz: ::core::ffi::c_int,
    csrVal: *mut cuda_types::cusparse::cuComplex,
    csrRowPtr: *const ::core::ffi::c_int,
    csrColInd: *mut ::core::ffi::c_int,
    info: cuda_types::cusparse::csru2csrInfo_t,
    pBufferSizeInBytes: *mut usize,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &handle,
        "cusparseCcsru2csr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cusparseCcsru2csr_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cusparseCcsru2csr_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnz), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnz, "cusparseCcsru2csr_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrVal), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrVal,
        "cusparseCcsru2csr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrRowPtr), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrRowPtr,
        "cusparseCcsru2csr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrColInd), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrColInd,
        "cusparseCcsru2csr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &info,
        "cusparseCcsru2csr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBufferSizeInBytes), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &pBufferSizeInBytes,
        "cusparseCcsru2csr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseZcsru2csr_bufferSizeExt(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    nnz: ::core::ffi::c_int,
    csrVal: *mut cuda_types::cusparse::cuDoubleComplex,
    csrRowPtr: *const ::core::ffi::c_int,
    csrColInd: *mut ::core::ffi::c_int,
    info: cuda_types::cusparse::csru2csrInfo_t,
    pBufferSizeInBytes: *mut usize,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &handle,
        "cusparseZcsru2csr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cusparseZcsru2csr_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cusparseZcsru2csr_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnz), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnz, "cusparseZcsru2csr_bufferSizeExt", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrVal), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrVal,
        "cusparseZcsru2csr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrRowPtr), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrRowPtr,
        "cusparseZcsru2csr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrColInd), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrColInd,
        "cusparseZcsru2csr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &info,
        "cusparseZcsru2csr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBufferSizeInBytes), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &pBufferSizeInBytes,
        "cusparseZcsru2csr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseScsru2csr(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    nnz: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    csrVal: *mut f32,
    csrRowPtr: *const ::core::ffi::c_int,
    csrColInd: *mut ::core::ffi::c_int,
    info: cuda_types::cusparse::csru2csrInfo_t,
    pBuffer: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseScsru2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cusparseScsru2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cusparseScsru2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnz), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnz, "cusparseScsru2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseScsru2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrVal), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrVal, "cusparseScsru2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrRowPtr), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrRowPtr, "cusparseScsru2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrColInd), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrColInd, "cusparseScsru2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cusparseScsru2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBuffer), ": ").as_bytes())?;
    crate::CudaDisplay::write(&pBuffer, "cusparseScsru2csr", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseDcsru2csr(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    nnz: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    csrVal: *mut f64,
    csrRowPtr: *const ::core::ffi::c_int,
    csrColInd: *mut ::core::ffi::c_int,
    info: cuda_types::cusparse::csru2csrInfo_t,
    pBuffer: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseDcsru2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cusparseDcsru2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cusparseDcsru2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnz), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnz, "cusparseDcsru2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseDcsru2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrVal), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrVal, "cusparseDcsru2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrRowPtr), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrRowPtr, "cusparseDcsru2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrColInd), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrColInd, "cusparseDcsru2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cusparseDcsru2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBuffer), ": ").as_bytes())?;
    crate::CudaDisplay::write(&pBuffer, "cusparseDcsru2csr", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseCcsru2csr(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    nnz: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    csrVal: *mut cuda_types::cusparse::cuComplex,
    csrRowPtr: *const ::core::ffi::c_int,
    csrColInd: *mut ::core::ffi::c_int,
    info: cuda_types::cusparse::csru2csrInfo_t,
    pBuffer: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseCcsru2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cusparseCcsru2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cusparseCcsru2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnz), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnz, "cusparseCcsru2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseCcsru2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrVal), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrVal, "cusparseCcsru2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrRowPtr), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrRowPtr, "cusparseCcsru2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrColInd), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrColInd, "cusparseCcsru2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cusparseCcsru2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBuffer), ": ").as_bytes())?;
    crate::CudaDisplay::write(&pBuffer, "cusparseCcsru2csr", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseZcsru2csr(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    nnz: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    csrVal: *mut cuda_types::cusparse::cuDoubleComplex,
    csrRowPtr: *const ::core::ffi::c_int,
    csrColInd: *mut ::core::ffi::c_int,
    info: cuda_types::cusparse::csru2csrInfo_t,
    pBuffer: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseZcsru2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cusparseZcsru2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cusparseZcsru2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnz), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnz, "cusparseZcsru2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseZcsru2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrVal), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrVal, "cusparseZcsru2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrRowPtr), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrRowPtr, "cusparseZcsru2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrColInd), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrColInd, "cusparseZcsru2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cusparseZcsru2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBuffer), ": ").as_bytes())?;
    crate::CudaDisplay::write(&pBuffer, "cusparseZcsru2csr", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseScsr2csru(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    nnz: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    csrVal: *mut f32,
    csrRowPtr: *const ::core::ffi::c_int,
    csrColInd: *mut ::core::ffi::c_int,
    info: cuda_types::cusparse::csru2csrInfo_t,
    pBuffer: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseScsr2csru", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cusparseScsr2csru", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cusparseScsr2csru", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnz), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnz, "cusparseScsr2csru", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseScsr2csru", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrVal), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrVal, "cusparseScsr2csru", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrRowPtr), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrRowPtr, "cusparseScsr2csru", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrColInd), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrColInd, "cusparseScsr2csru", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cusparseScsr2csru", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBuffer), ": ").as_bytes())?;
    crate::CudaDisplay::write(&pBuffer, "cusparseScsr2csru", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseDcsr2csru(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    nnz: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    csrVal: *mut f64,
    csrRowPtr: *const ::core::ffi::c_int,
    csrColInd: *mut ::core::ffi::c_int,
    info: cuda_types::cusparse::csru2csrInfo_t,
    pBuffer: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseDcsr2csru", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cusparseDcsr2csru", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cusparseDcsr2csru", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnz), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnz, "cusparseDcsr2csru", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseDcsr2csru", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrVal), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrVal, "cusparseDcsr2csru", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrRowPtr), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrRowPtr, "cusparseDcsr2csru", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrColInd), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrColInd, "cusparseDcsr2csru", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cusparseDcsr2csru", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBuffer), ": ").as_bytes())?;
    crate::CudaDisplay::write(&pBuffer, "cusparseDcsr2csru", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseCcsr2csru(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    nnz: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    csrVal: *mut cuda_types::cusparse::cuComplex,
    csrRowPtr: *const ::core::ffi::c_int,
    csrColInd: *mut ::core::ffi::c_int,
    info: cuda_types::cusparse::csru2csrInfo_t,
    pBuffer: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseCcsr2csru", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cusparseCcsr2csru", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cusparseCcsr2csru", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnz), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnz, "cusparseCcsr2csru", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseCcsr2csru", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrVal), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrVal, "cusparseCcsr2csru", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrRowPtr), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrRowPtr, "cusparseCcsr2csru", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrColInd), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrColInd, "cusparseCcsr2csru", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cusparseCcsr2csru", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBuffer), ": ").as_bytes())?;
    crate::CudaDisplay::write(&pBuffer, "cusparseCcsr2csru", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseZcsr2csru(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    nnz: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    csrVal: *mut cuda_types::cusparse::cuDoubleComplex,
    csrRowPtr: *const ::core::ffi::c_int,
    csrColInd: *mut ::core::ffi::c_int,
    info: cuda_types::cusparse::csru2csrInfo_t,
    pBuffer: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseZcsr2csru", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cusparseZcsr2csru", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cusparseZcsr2csru", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnz), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnz, "cusparseZcsr2csru", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseZcsr2csru", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrVal), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrVal, "cusparseZcsr2csru", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrRowPtr), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrRowPtr, "cusparseZcsr2csru", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrColInd), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrColInd, "cusparseZcsr2csru", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(&info, "cusparseZcsr2csru", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBuffer), ": ").as_bytes())?;
    crate::CudaDisplay::write(&pBuffer, "cusparseZcsr2csru", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseSpruneDense2csr_bufferSizeExt(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    A: *const f32,
    lda: ::core::ffi::c_int,
    threshold: *const f32,
    descrC: cuda_types::cusparse::cusparseMatDescr_t,
    csrSortedValC: *const f32,
    csrSortedRowPtrC: *const ::core::ffi::c_int,
    csrSortedColIndC: *const ::core::ffi::c_int,
    pBufferSizeInBytes: *mut usize,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &handle,
        "cusparseSpruneDense2csr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &m,
        "cusparseSpruneDense2csr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &n,
        "cusparseSpruneDense2csr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &A,
        "cusparseSpruneDense2csr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &lda,
        "cusparseSpruneDense2csr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(threshold), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &threshold,
        "cusparseSpruneDense2csr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrC), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &descrC,
        "cusparseSpruneDense2csr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedValC), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedValC,
        "cusparseSpruneDense2csr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedRowPtrC), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedRowPtrC,
        "cusparseSpruneDense2csr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedColIndC), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedColIndC,
        "cusparseSpruneDense2csr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBufferSizeInBytes), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &pBufferSizeInBytes,
        "cusparseSpruneDense2csr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseDpruneDense2csr_bufferSizeExt(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    A: *const f64,
    lda: ::core::ffi::c_int,
    threshold: *const f64,
    descrC: cuda_types::cusparse::cusparseMatDescr_t,
    csrSortedValC: *const f64,
    csrSortedRowPtrC: *const ::core::ffi::c_int,
    csrSortedColIndC: *const ::core::ffi::c_int,
    pBufferSizeInBytes: *mut usize,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &handle,
        "cusparseDpruneDense2csr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &m,
        "cusparseDpruneDense2csr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &n,
        "cusparseDpruneDense2csr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &A,
        "cusparseDpruneDense2csr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &lda,
        "cusparseDpruneDense2csr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(threshold), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &threshold,
        "cusparseDpruneDense2csr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrC), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &descrC,
        "cusparseDpruneDense2csr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedValC), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedValC,
        "cusparseDpruneDense2csr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedRowPtrC), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedRowPtrC,
        "cusparseDpruneDense2csr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedColIndC), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedColIndC,
        "cusparseDpruneDense2csr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBufferSizeInBytes), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &pBufferSizeInBytes,
        "cusparseDpruneDense2csr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseSpruneDense2csrNnz(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    A: *const f32,
    lda: ::core::ffi::c_int,
    threshold: *const f32,
    descrC: cuda_types::cusparse::cusparseMatDescr_t,
    csrRowPtrC: *mut ::core::ffi::c_int,
    nnzTotalDevHostPtr: *mut ::core::ffi::c_int,
    pBuffer: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseSpruneDense2csrNnz", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cusparseSpruneDense2csrNnz", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cusparseSpruneDense2csrNnz", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cusparseSpruneDense2csrNnz", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cusparseSpruneDense2csrNnz", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(threshold), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &threshold,
        "cusparseSpruneDense2csrNnz",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrC), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrC, "cusparseSpruneDense2csrNnz", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrRowPtrC), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrRowPtrC,
        "cusparseSpruneDense2csrNnz",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzTotalDevHostPtr), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &nnzTotalDevHostPtr,
        "cusparseSpruneDense2csrNnz",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBuffer), ": ").as_bytes())?;
    crate::CudaDisplay::write(&pBuffer, "cusparseSpruneDense2csrNnz", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseDpruneDense2csrNnz(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    A: *const f64,
    lda: ::core::ffi::c_int,
    threshold: *const f64,
    descrC: cuda_types::cusparse::cusparseMatDescr_t,
    csrSortedRowPtrC: *mut ::core::ffi::c_int,
    nnzTotalDevHostPtr: *mut ::core::ffi::c_int,
    pBuffer: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseDpruneDense2csrNnz", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cusparseDpruneDense2csrNnz", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cusparseDpruneDense2csrNnz", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cusparseDpruneDense2csrNnz", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cusparseDpruneDense2csrNnz", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(threshold), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &threshold,
        "cusparseDpruneDense2csrNnz",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrC), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrC, "cusparseDpruneDense2csrNnz", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedRowPtrC), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedRowPtrC,
        "cusparseDpruneDense2csrNnz",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzTotalDevHostPtr), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &nnzTotalDevHostPtr,
        "cusparseDpruneDense2csrNnz",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBuffer), ": ").as_bytes())?;
    crate::CudaDisplay::write(&pBuffer, "cusparseDpruneDense2csrNnz", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseSpruneDense2csr(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    A: *const f32,
    lda: ::core::ffi::c_int,
    threshold: *const f32,
    descrC: cuda_types::cusparse::cusparseMatDescr_t,
    csrSortedValC: *mut f32,
    csrSortedRowPtrC: *const ::core::ffi::c_int,
    csrSortedColIndC: *mut ::core::ffi::c_int,
    pBuffer: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseSpruneDense2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cusparseSpruneDense2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cusparseSpruneDense2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cusparseSpruneDense2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cusparseSpruneDense2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(threshold), ": ").as_bytes())?;
    crate::CudaDisplay::write(&threshold, "cusparseSpruneDense2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrC), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrC, "cusparseSpruneDense2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedValC), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedValC,
        "cusparseSpruneDense2csr",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedRowPtrC), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedRowPtrC,
        "cusparseSpruneDense2csr",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedColIndC), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedColIndC,
        "cusparseSpruneDense2csr",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBuffer), ": ").as_bytes())?;
    crate::CudaDisplay::write(&pBuffer, "cusparseSpruneDense2csr", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseDpruneDense2csr(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    A: *const f64,
    lda: ::core::ffi::c_int,
    threshold: *const f64,
    descrC: cuda_types::cusparse::cusparseMatDescr_t,
    csrSortedValC: *mut f64,
    csrSortedRowPtrC: *const ::core::ffi::c_int,
    csrSortedColIndC: *mut ::core::ffi::c_int,
    pBuffer: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseDpruneDense2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cusparseDpruneDense2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cusparseDpruneDense2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(&A, "cusparseDpruneDense2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(&lda, "cusparseDpruneDense2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(threshold), ": ").as_bytes())?;
    crate::CudaDisplay::write(&threshold, "cusparseDpruneDense2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrC), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrC, "cusparseDpruneDense2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedValC), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedValC,
        "cusparseDpruneDense2csr",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedRowPtrC), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedRowPtrC,
        "cusparseDpruneDense2csr",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedColIndC), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedColIndC,
        "cusparseDpruneDense2csr",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBuffer), ": ").as_bytes())?;
    crate::CudaDisplay::write(&pBuffer, "cusparseDpruneDense2csr", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseSpruneCsr2csr_bufferSizeExt(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    nnzA: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    csrSortedValA: *const f32,
    csrSortedRowPtrA: *const ::core::ffi::c_int,
    csrSortedColIndA: *const ::core::ffi::c_int,
    threshold: *const f32,
    descrC: cuda_types::cusparse::cusparseMatDescr_t,
    csrSortedValC: *const f32,
    csrSortedRowPtrC: *const ::core::ffi::c_int,
    csrSortedColIndC: *const ::core::ffi::c_int,
    pBufferSizeInBytes: *mut usize,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &handle,
        "cusparseSpruneCsr2csr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &m,
        "cusparseSpruneCsr2csr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &n,
        "cusparseSpruneCsr2csr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &nnzA,
        "cusparseSpruneCsr2csr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &descrA,
        "cusparseSpruneCsr2csr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedValA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedValA,
        "cusparseSpruneCsr2csr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedRowPtrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedRowPtrA,
        "cusparseSpruneCsr2csr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedColIndA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedColIndA,
        "cusparseSpruneCsr2csr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(threshold), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &threshold,
        "cusparseSpruneCsr2csr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrC), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &descrC,
        "cusparseSpruneCsr2csr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedValC), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedValC,
        "cusparseSpruneCsr2csr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedRowPtrC), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedRowPtrC,
        "cusparseSpruneCsr2csr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedColIndC), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedColIndC,
        "cusparseSpruneCsr2csr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBufferSizeInBytes), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &pBufferSizeInBytes,
        "cusparseSpruneCsr2csr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseDpruneCsr2csr_bufferSizeExt(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    nnzA: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    csrSortedValA: *const f64,
    csrSortedRowPtrA: *const ::core::ffi::c_int,
    csrSortedColIndA: *const ::core::ffi::c_int,
    threshold: *const f64,
    descrC: cuda_types::cusparse::cusparseMatDescr_t,
    csrSortedValC: *const f64,
    csrSortedRowPtrC: *const ::core::ffi::c_int,
    csrSortedColIndC: *const ::core::ffi::c_int,
    pBufferSizeInBytes: *mut usize,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &handle,
        "cusparseDpruneCsr2csr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &m,
        "cusparseDpruneCsr2csr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &n,
        "cusparseDpruneCsr2csr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &nnzA,
        "cusparseDpruneCsr2csr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &descrA,
        "cusparseDpruneCsr2csr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedValA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedValA,
        "cusparseDpruneCsr2csr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedRowPtrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedRowPtrA,
        "cusparseDpruneCsr2csr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedColIndA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedColIndA,
        "cusparseDpruneCsr2csr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(threshold), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &threshold,
        "cusparseDpruneCsr2csr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrC), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &descrC,
        "cusparseDpruneCsr2csr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedValC), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedValC,
        "cusparseDpruneCsr2csr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedRowPtrC), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedRowPtrC,
        "cusparseDpruneCsr2csr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedColIndC), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedColIndC,
        "cusparseDpruneCsr2csr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBufferSizeInBytes), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &pBufferSizeInBytes,
        "cusparseDpruneCsr2csr_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseSpruneCsr2csrNnz(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    nnzA: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    csrSortedValA: *const f32,
    csrSortedRowPtrA: *const ::core::ffi::c_int,
    csrSortedColIndA: *const ::core::ffi::c_int,
    threshold: *const f32,
    descrC: cuda_types::cusparse::cusparseMatDescr_t,
    csrSortedRowPtrC: *mut ::core::ffi::c_int,
    nnzTotalDevHostPtr: *mut ::core::ffi::c_int,
    pBuffer: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseSpruneCsr2csrNnz", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cusparseSpruneCsr2csrNnz", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cusparseSpruneCsr2csrNnz", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnzA, "cusparseSpruneCsr2csrNnz", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseSpruneCsr2csrNnz", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedValA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedValA,
        "cusparseSpruneCsr2csrNnz",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedRowPtrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedRowPtrA,
        "cusparseSpruneCsr2csrNnz",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedColIndA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedColIndA,
        "cusparseSpruneCsr2csrNnz",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(threshold), ": ").as_bytes())?;
    crate::CudaDisplay::write(&threshold, "cusparseSpruneCsr2csrNnz", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrC), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrC, "cusparseSpruneCsr2csrNnz", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedRowPtrC), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedRowPtrC,
        "cusparseSpruneCsr2csrNnz",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzTotalDevHostPtr), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &nnzTotalDevHostPtr,
        "cusparseSpruneCsr2csrNnz",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBuffer), ": ").as_bytes())?;
    crate::CudaDisplay::write(&pBuffer, "cusparseSpruneCsr2csrNnz", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseDpruneCsr2csrNnz(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    nnzA: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    csrSortedValA: *const f64,
    csrSortedRowPtrA: *const ::core::ffi::c_int,
    csrSortedColIndA: *const ::core::ffi::c_int,
    threshold: *const f64,
    descrC: cuda_types::cusparse::cusparseMatDescr_t,
    csrSortedRowPtrC: *mut ::core::ffi::c_int,
    nnzTotalDevHostPtr: *mut ::core::ffi::c_int,
    pBuffer: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseDpruneCsr2csrNnz", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cusparseDpruneCsr2csrNnz", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cusparseDpruneCsr2csrNnz", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnzA, "cusparseDpruneCsr2csrNnz", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseDpruneCsr2csrNnz", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedValA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedValA,
        "cusparseDpruneCsr2csrNnz",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedRowPtrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedRowPtrA,
        "cusparseDpruneCsr2csrNnz",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedColIndA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedColIndA,
        "cusparseDpruneCsr2csrNnz",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(threshold), ": ").as_bytes())?;
    crate::CudaDisplay::write(&threshold, "cusparseDpruneCsr2csrNnz", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrC), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrC, "cusparseDpruneCsr2csrNnz", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedRowPtrC), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedRowPtrC,
        "cusparseDpruneCsr2csrNnz",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzTotalDevHostPtr), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &nnzTotalDevHostPtr,
        "cusparseDpruneCsr2csrNnz",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBuffer), ": ").as_bytes())?;
    crate::CudaDisplay::write(&pBuffer, "cusparseDpruneCsr2csrNnz", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseSpruneCsr2csr(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    nnzA: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    csrSortedValA: *const f32,
    csrSortedRowPtrA: *const ::core::ffi::c_int,
    csrSortedColIndA: *const ::core::ffi::c_int,
    threshold: *const f32,
    descrC: cuda_types::cusparse::cusparseMatDescr_t,
    csrSortedValC: *mut f32,
    csrSortedRowPtrC: *const ::core::ffi::c_int,
    csrSortedColIndC: *mut ::core::ffi::c_int,
    pBuffer: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseSpruneCsr2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cusparseSpruneCsr2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cusparseSpruneCsr2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnzA, "cusparseSpruneCsr2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseSpruneCsr2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedValA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrSortedValA, "cusparseSpruneCsr2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedRowPtrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedRowPtrA,
        "cusparseSpruneCsr2csr",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedColIndA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedColIndA,
        "cusparseSpruneCsr2csr",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(threshold), ": ").as_bytes())?;
    crate::CudaDisplay::write(&threshold, "cusparseSpruneCsr2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrC), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrC, "cusparseSpruneCsr2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedValC), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrSortedValC, "cusparseSpruneCsr2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedRowPtrC), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedRowPtrC,
        "cusparseSpruneCsr2csr",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedColIndC), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedColIndC,
        "cusparseSpruneCsr2csr",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBuffer), ": ").as_bytes())?;
    crate::CudaDisplay::write(&pBuffer, "cusparseSpruneCsr2csr", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseDpruneCsr2csr(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    nnzA: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    csrSortedValA: *const f64,
    csrSortedRowPtrA: *const ::core::ffi::c_int,
    csrSortedColIndA: *const ::core::ffi::c_int,
    threshold: *const f64,
    descrC: cuda_types::cusparse::cusparseMatDescr_t,
    csrSortedValC: *mut f64,
    csrSortedRowPtrC: *const ::core::ffi::c_int,
    csrSortedColIndC: *mut ::core::ffi::c_int,
    pBuffer: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseDpruneCsr2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cusparseDpruneCsr2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cusparseDpruneCsr2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnzA, "cusparseDpruneCsr2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrA, "cusparseDpruneCsr2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedValA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrSortedValA, "cusparseDpruneCsr2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedRowPtrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedRowPtrA,
        "cusparseDpruneCsr2csr",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedColIndA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedColIndA,
        "cusparseDpruneCsr2csr",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(threshold), ": ").as_bytes())?;
    crate::CudaDisplay::write(&threshold, "cusparseDpruneCsr2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrC), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descrC, "cusparseDpruneCsr2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedValC), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrSortedValC, "cusparseDpruneCsr2csr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedRowPtrC), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedRowPtrC,
        "cusparseDpruneCsr2csr",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedColIndC), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedColIndC,
        "cusparseDpruneCsr2csr",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBuffer), ": ").as_bytes())?;
    crate::CudaDisplay::write(&pBuffer, "cusparseDpruneCsr2csr", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseSpruneDense2csrByPercentage_bufferSizeExt(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    A: *const f32,
    lda: ::core::ffi::c_int,
    percentage: f32,
    descrC: cuda_types::cusparse::cusparseMatDescr_t,
    csrSortedValC: *const f32,
    csrSortedRowPtrC: *const ::core::ffi::c_int,
    csrSortedColIndC: *const ::core::ffi::c_int,
    info: cuda_types::cusparse::pruneInfo_t,
    pBufferSizeInBytes: *mut usize,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &handle,
        "cusparseSpruneDense2csrByPercentage_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &m,
        "cusparseSpruneDense2csrByPercentage_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &n,
        "cusparseSpruneDense2csrByPercentage_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &A,
        "cusparseSpruneDense2csrByPercentage_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &lda,
        "cusparseSpruneDense2csrByPercentage_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(percentage), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &percentage,
        "cusparseSpruneDense2csrByPercentage_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrC), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &descrC,
        "cusparseSpruneDense2csrByPercentage_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedValC), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedValC,
        "cusparseSpruneDense2csrByPercentage_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedRowPtrC), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedRowPtrC,
        "cusparseSpruneDense2csrByPercentage_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedColIndC), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedColIndC,
        "cusparseSpruneDense2csrByPercentage_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &info,
        "cusparseSpruneDense2csrByPercentage_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBufferSizeInBytes), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &pBufferSizeInBytes,
        "cusparseSpruneDense2csrByPercentage_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseDpruneDense2csrByPercentage_bufferSizeExt(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    A: *const f64,
    lda: ::core::ffi::c_int,
    percentage: f32,
    descrC: cuda_types::cusparse::cusparseMatDescr_t,
    csrSortedValC: *const f64,
    csrSortedRowPtrC: *const ::core::ffi::c_int,
    csrSortedColIndC: *const ::core::ffi::c_int,
    info: cuda_types::cusparse::pruneInfo_t,
    pBufferSizeInBytes: *mut usize,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &handle,
        "cusparseDpruneDense2csrByPercentage_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &m,
        "cusparseDpruneDense2csrByPercentage_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &n,
        "cusparseDpruneDense2csrByPercentage_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &A,
        "cusparseDpruneDense2csrByPercentage_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &lda,
        "cusparseDpruneDense2csrByPercentage_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(percentage), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &percentage,
        "cusparseDpruneDense2csrByPercentage_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrC), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &descrC,
        "cusparseDpruneDense2csrByPercentage_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedValC), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedValC,
        "cusparseDpruneDense2csrByPercentage_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedRowPtrC), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedRowPtrC,
        "cusparseDpruneDense2csrByPercentage_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedColIndC), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedColIndC,
        "cusparseDpruneDense2csrByPercentage_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &info,
        "cusparseDpruneDense2csrByPercentage_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBufferSizeInBytes), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &pBufferSizeInBytes,
        "cusparseDpruneDense2csrByPercentage_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseSpruneDense2csrNnzByPercentage(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    A: *const f32,
    lda: ::core::ffi::c_int,
    percentage: f32,
    descrC: cuda_types::cusparse::cusparseMatDescr_t,
    csrRowPtrC: *mut ::core::ffi::c_int,
    nnzTotalDevHostPtr: *mut ::core::ffi::c_int,
    info: cuda_types::cusparse::pruneInfo_t,
    pBuffer: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &handle,
        "cusparseSpruneDense2csrNnzByPercentage",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &m,
        "cusparseSpruneDense2csrNnzByPercentage",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &n,
        "cusparseSpruneDense2csrNnzByPercentage",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &A,
        "cusparseSpruneDense2csrNnzByPercentage",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &lda,
        "cusparseSpruneDense2csrNnzByPercentage",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(percentage), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &percentage,
        "cusparseSpruneDense2csrNnzByPercentage",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrC), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &descrC,
        "cusparseSpruneDense2csrNnzByPercentage",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrRowPtrC), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrRowPtrC,
        "cusparseSpruneDense2csrNnzByPercentage",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzTotalDevHostPtr), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &nnzTotalDevHostPtr,
        "cusparseSpruneDense2csrNnzByPercentage",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &info,
        "cusparseSpruneDense2csrNnzByPercentage",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBuffer), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &pBuffer,
        "cusparseSpruneDense2csrNnzByPercentage",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseDpruneDense2csrNnzByPercentage(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    A: *const f64,
    lda: ::core::ffi::c_int,
    percentage: f32,
    descrC: cuda_types::cusparse::cusparseMatDescr_t,
    csrRowPtrC: *mut ::core::ffi::c_int,
    nnzTotalDevHostPtr: *mut ::core::ffi::c_int,
    info: cuda_types::cusparse::pruneInfo_t,
    pBuffer: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &handle,
        "cusparseDpruneDense2csrNnzByPercentage",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &m,
        "cusparseDpruneDense2csrNnzByPercentage",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &n,
        "cusparseDpruneDense2csrNnzByPercentage",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &A,
        "cusparseDpruneDense2csrNnzByPercentage",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &lda,
        "cusparseDpruneDense2csrNnzByPercentage",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(percentage), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &percentage,
        "cusparseDpruneDense2csrNnzByPercentage",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrC), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &descrC,
        "cusparseDpruneDense2csrNnzByPercentage",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrRowPtrC), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrRowPtrC,
        "cusparseDpruneDense2csrNnzByPercentage",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzTotalDevHostPtr), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &nnzTotalDevHostPtr,
        "cusparseDpruneDense2csrNnzByPercentage",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &info,
        "cusparseDpruneDense2csrNnzByPercentage",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBuffer), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &pBuffer,
        "cusparseDpruneDense2csrNnzByPercentage",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseSpruneDense2csrByPercentage(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    A: *const f32,
    lda: ::core::ffi::c_int,
    percentage: f32,
    descrC: cuda_types::cusparse::cusparseMatDescr_t,
    csrSortedValC: *mut f32,
    csrSortedRowPtrC: *const ::core::ffi::c_int,
    csrSortedColIndC: *mut ::core::ffi::c_int,
    info: cuda_types::cusparse::pruneInfo_t,
    pBuffer: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &handle,
        "cusparseSpruneDense2csrByPercentage",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &m,
        "cusparseSpruneDense2csrByPercentage",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &n,
        "cusparseSpruneDense2csrByPercentage",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &A,
        "cusparseSpruneDense2csrByPercentage",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &lda,
        "cusparseSpruneDense2csrByPercentage",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(percentage), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &percentage,
        "cusparseSpruneDense2csrByPercentage",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrC), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &descrC,
        "cusparseSpruneDense2csrByPercentage",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedValC), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedValC,
        "cusparseSpruneDense2csrByPercentage",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedRowPtrC), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedRowPtrC,
        "cusparseSpruneDense2csrByPercentage",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedColIndC), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedColIndC,
        "cusparseSpruneDense2csrByPercentage",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &info,
        "cusparseSpruneDense2csrByPercentage",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBuffer), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &pBuffer,
        "cusparseSpruneDense2csrByPercentage",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseDpruneDense2csrByPercentage(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    A: *const f64,
    lda: ::core::ffi::c_int,
    percentage: f32,
    descrC: cuda_types::cusparse::cusparseMatDescr_t,
    csrSortedValC: *mut f64,
    csrSortedRowPtrC: *const ::core::ffi::c_int,
    csrSortedColIndC: *mut ::core::ffi::c_int,
    info: cuda_types::cusparse::pruneInfo_t,
    pBuffer: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &handle,
        "cusparseDpruneDense2csrByPercentage",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &m,
        "cusparseDpruneDense2csrByPercentage",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &n,
        "cusparseDpruneDense2csrByPercentage",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(A), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &A,
        "cusparseDpruneDense2csrByPercentage",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(lda), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &lda,
        "cusparseDpruneDense2csrByPercentage",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(percentage), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &percentage,
        "cusparseDpruneDense2csrByPercentage",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrC), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &descrC,
        "cusparseDpruneDense2csrByPercentage",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedValC), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedValC,
        "cusparseDpruneDense2csrByPercentage",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedRowPtrC), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedRowPtrC,
        "cusparseDpruneDense2csrByPercentage",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedColIndC), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedColIndC,
        "cusparseDpruneDense2csrByPercentage",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &info,
        "cusparseDpruneDense2csrByPercentage",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBuffer), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &pBuffer,
        "cusparseDpruneDense2csrByPercentage",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseSpruneCsr2csrByPercentage_bufferSizeExt(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    nnzA: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    csrSortedValA: *const f32,
    csrSortedRowPtrA: *const ::core::ffi::c_int,
    csrSortedColIndA: *const ::core::ffi::c_int,
    percentage: f32,
    descrC: cuda_types::cusparse::cusparseMatDescr_t,
    csrSortedValC: *const f32,
    csrSortedRowPtrC: *const ::core::ffi::c_int,
    csrSortedColIndC: *const ::core::ffi::c_int,
    info: cuda_types::cusparse::pruneInfo_t,
    pBufferSizeInBytes: *mut usize,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &handle,
        "cusparseSpruneCsr2csrByPercentage_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &m,
        "cusparseSpruneCsr2csrByPercentage_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &n,
        "cusparseSpruneCsr2csrByPercentage_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &nnzA,
        "cusparseSpruneCsr2csrByPercentage_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &descrA,
        "cusparseSpruneCsr2csrByPercentage_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedValA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedValA,
        "cusparseSpruneCsr2csrByPercentage_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedRowPtrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedRowPtrA,
        "cusparseSpruneCsr2csrByPercentage_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedColIndA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedColIndA,
        "cusparseSpruneCsr2csrByPercentage_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(percentage), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &percentage,
        "cusparseSpruneCsr2csrByPercentage_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrC), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &descrC,
        "cusparseSpruneCsr2csrByPercentage_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedValC), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedValC,
        "cusparseSpruneCsr2csrByPercentage_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedRowPtrC), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedRowPtrC,
        "cusparseSpruneCsr2csrByPercentage_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedColIndC), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedColIndC,
        "cusparseSpruneCsr2csrByPercentage_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &info,
        "cusparseSpruneCsr2csrByPercentage_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBufferSizeInBytes), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &pBufferSizeInBytes,
        "cusparseSpruneCsr2csrByPercentage_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseDpruneCsr2csrByPercentage_bufferSizeExt(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    nnzA: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    csrSortedValA: *const f64,
    csrSortedRowPtrA: *const ::core::ffi::c_int,
    csrSortedColIndA: *const ::core::ffi::c_int,
    percentage: f32,
    descrC: cuda_types::cusparse::cusparseMatDescr_t,
    csrSortedValC: *const f64,
    csrSortedRowPtrC: *const ::core::ffi::c_int,
    csrSortedColIndC: *const ::core::ffi::c_int,
    info: cuda_types::cusparse::pruneInfo_t,
    pBufferSizeInBytes: *mut usize,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &handle,
        "cusparseDpruneCsr2csrByPercentage_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &m,
        "cusparseDpruneCsr2csrByPercentage_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &n,
        "cusparseDpruneCsr2csrByPercentage_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &nnzA,
        "cusparseDpruneCsr2csrByPercentage_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &descrA,
        "cusparseDpruneCsr2csrByPercentage_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedValA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedValA,
        "cusparseDpruneCsr2csrByPercentage_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedRowPtrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedRowPtrA,
        "cusparseDpruneCsr2csrByPercentage_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedColIndA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedColIndA,
        "cusparseDpruneCsr2csrByPercentage_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(percentage), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &percentage,
        "cusparseDpruneCsr2csrByPercentage_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrC), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &descrC,
        "cusparseDpruneCsr2csrByPercentage_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedValC), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedValC,
        "cusparseDpruneCsr2csrByPercentage_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedRowPtrC), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedRowPtrC,
        "cusparseDpruneCsr2csrByPercentage_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedColIndC), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedColIndC,
        "cusparseDpruneCsr2csrByPercentage_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &info,
        "cusparseDpruneCsr2csrByPercentage_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBufferSizeInBytes), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &pBufferSizeInBytes,
        "cusparseDpruneCsr2csrByPercentage_bufferSizeExt",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseSpruneCsr2csrNnzByPercentage(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    nnzA: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    csrSortedValA: *const f32,
    csrSortedRowPtrA: *const ::core::ffi::c_int,
    csrSortedColIndA: *const ::core::ffi::c_int,
    percentage: f32,
    descrC: cuda_types::cusparse::cusparseMatDescr_t,
    csrSortedRowPtrC: *mut ::core::ffi::c_int,
    nnzTotalDevHostPtr: *mut ::core::ffi::c_int,
    info: cuda_types::cusparse::pruneInfo_t,
    pBuffer: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &handle,
        "cusparseSpruneCsr2csrNnzByPercentage",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &m,
        "cusparseSpruneCsr2csrNnzByPercentage",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &n,
        "cusparseSpruneCsr2csrNnzByPercentage",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &nnzA,
        "cusparseSpruneCsr2csrNnzByPercentage",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &descrA,
        "cusparseSpruneCsr2csrNnzByPercentage",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedValA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedValA,
        "cusparseSpruneCsr2csrNnzByPercentage",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedRowPtrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedRowPtrA,
        "cusparseSpruneCsr2csrNnzByPercentage",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedColIndA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedColIndA,
        "cusparseSpruneCsr2csrNnzByPercentage",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(percentage), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &percentage,
        "cusparseSpruneCsr2csrNnzByPercentage",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrC), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &descrC,
        "cusparseSpruneCsr2csrNnzByPercentage",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedRowPtrC), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedRowPtrC,
        "cusparseSpruneCsr2csrNnzByPercentage",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzTotalDevHostPtr), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &nnzTotalDevHostPtr,
        "cusparseSpruneCsr2csrNnzByPercentage",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &info,
        "cusparseSpruneCsr2csrNnzByPercentage",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBuffer), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &pBuffer,
        "cusparseSpruneCsr2csrNnzByPercentage",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseDpruneCsr2csrNnzByPercentage(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    nnzA: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    csrSortedValA: *const f64,
    csrSortedRowPtrA: *const ::core::ffi::c_int,
    csrSortedColIndA: *const ::core::ffi::c_int,
    percentage: f32,
    descrC: cuda_types::cusparse::cusparseMatDescr_t,
    csrSortedRowPtrC: *mut ::core::ffi::c_int,
    nnzTotalDevHostPtr: *mut ::core::ffi::c_int,
    info: cuda_types::cusparse::pruneInfo_t,
    pBuffer: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &handle,
        "cusparseDpruneCsr2csrNnzByPercentage",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &m,
        "cusparseDpruneCsr2csrNnzByPercentage",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &n,
        "cusparseDpruneCsr2csrNnzByPercentage",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &nnzA,
        "cusparseDpruneCsr2csrNnzByPercentage",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &descrA,
        "cusparseDpruneCsr2csrNnzByPercentage",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedValA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedValA,
        "cusparseDpruneCsr2csrNnzByPercentage",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedRowPtrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedRowPtrA,
        "cusparseDpruneCsr2csrNnzByPercentage",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedColIndA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedColIndA,
        "cusparseDpruneCsr2csrNnzByPercentage",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(percentage), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &percentage,
        "cusparseDpruneCsr2csrNnzByPercentage",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrC), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &descrC,
        "cusparseDpruneCsr2csrNnzByPercentage",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedRowPtrC), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedRowPtrC,
        "cusparseDpruneCsr2csrNnzByPercentage",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzTotalDevHostPtr), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &nnzTotalDevHostPtr,
        "cusparseDpruneCsr2csrNnzByPercentage",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &info,
        "cusparseDpruneCsr2csrNnzByPercentage",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBuffer), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &pBuffer,
        "cusparseDpruneCsr2csrNnzByPercentage",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseSpruneCsr2csrByPercentage(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    nnzA: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    csrSortedValA: *const f32,
    csrSortedRowPtrA: *const ::core::ffi::c_int,
    csrSortedColIndA: *const ::core::ffi::c_int,
    percentage: f32,
    descrC: cuda_types::cusparse::cusparseMatDescr_t,
    csrSortedValC: *mut f32,
    csrSortedRowPtrC: *const ::core::ffi::c_int,
    csrSortedColIndC: *mut ::core::ffi::c_int,
    info: cuda_types::cusparse::pruneInfo_t,
    pBuffer: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &handle,
        "cusparseSpruneCsr2csrByPercentage",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cusparseSpruneCsr2csrByPercentage", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cusparseSpruneCsr2csrByPercentage", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &nnzA,
        "cusparseSpruneCsr2csrByPercentage",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &descrA,
        "cusparseSpruneCsr2csrByPercentage",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedValA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedValA,
        "cusparseSpruneCsr2csrByPercentage",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedRowPtrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedRowPtrA,
        "cusparseSpruneCsr2csrByPercentage",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedColIndA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedColIndA,
        "cusparseSpruneCsr2csrByPercentage",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(percentage), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &percentage,
        "cusparseSpruneCsr2csrByPercentage",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrC), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &descrC,
        "cusparseSpruneCsr2csrByPercentage",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedValC), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedValC,
        "cusparseSpruneCsr2csrByPercentage",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedRowPtrC), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedRowPtrC,
        "cusparseSpruneCsr2csrByPercentage",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedColIndC), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedColIndC,
        "cusparseSpruneCsr2csrByPercentage",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &info,
        "cusparseSpruneCsr2csrByPercentage",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBuffer), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &pBuffer,
        "cusparseSpruneCsr2csrByPercentage",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseDpruneCsr2csrByPercentage(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    nnzA: ::core::ffi::c_int,
    descrA: cuda_types::cusparse::cusparseMatDescr_t,
    csrSortedValA: *const f64,
    csrSortedRowPtrA: *const ::core::ffi::c_int,
    csrSortedColIndA: *const ::core::ffi::c_int,
    percentage: f32,
    descrC: cuda_types::cusparse::cusparseMatDescr_t,
    csrSortedValC: *mut f64,
    csrSortedRowPtrC: *const ::core::ffi::c_int,
    csrSortedColIndC: *mut ::core::ffi::c_int,
    info: cuda_types::cusparse::pruneInfo_t,
    pBuffer: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &handle,
        "cusparseDpruneCsr2csrByPercentage",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cusparseDpruneCsr2csrByPercentage", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cusparseDpruneCsr2csrByPercentage", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnzA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &nnzA,
        "cusparseDpruneCsr2csrByPercentage",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &descrA,
        "cusparseDpruneCsr2csrByPercentage",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedValA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedValA,
        "cusparseDpruneCsr2csrByPercentage",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedRowPtrA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedRowPtrA,
        "cusparseDpruneCsr2csrByPercentage",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedColIndA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedColIndA,
        "cusparseDpruneCsr2csrByPercentage",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(percentage), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &percentage,
        "cusparseDpruneCsr2csrByPercentage",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(descrC), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &descrC,
        "cusparseDpruneCsr2csrByPercentage",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedValC), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedValC,
        "cusparseDpruneCsr2csrByPercentage",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedRowPtrC), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedRowPtrC,
        "cusparseDpruneCsr2csrByPercentage",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrSortedColIndC), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrSortedColIndC,
        "cusparseDpruneCsr2csrByPercentage",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(info), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &info,
        "cusparseDpruneCsr2csrByPercentage",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(pBuffer), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &pBuffer,
        "cusparseDpruneCsr2csrByPercentage",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
impl crate::CudaDisplay for cuda_types::cusparse::cusparseCsr2CscAlg_t {
    fn write(
        &self,
        _fn_name: &'static str,
        _index: usize,
        writer: &mut (impl std::io::Write + ?Sized),
    ) -> std::io::Result<()> {
        match self {
            &cuda_types::cusparse::cusparseCsr2CscAlg_t::CUSPARSE_CSR2CSC_ALG_DEFAULT => {
                writer.write_all(stringify!(CUSPARSE_CSR2CSC_ALG_DEFAULT).as_bytes())
            }
            &cuda_types::cusparse::cusparseCsr2CscAlg_t::CUSPARSE_CSR2CSC_ALG1 => {
                writer.write_all(stringify!(CUSPARSE_CSR2CSC_ALG1).as_bytes())
            }
            _ => write!(writer, "{}", self.0),
        }
    }
}
pub fn write_cusparseCsr2cscEx2(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    nnz: ::core::ffi::c_int,
    csrVal: *const ::core::ffi::c_void,
    csrRowPtr: *const ::core::ffi::c_int,
    csrColInd: *const ::core::ffi::c_int,
    cscVal: *mut ::core::ffi::c_void,
    cscColPtr: *mut ::core::ffi::c_int,
    cscRowInd: *mut ::core::ffi::c_int,
    valType: cuda_types::cusparse::cudaDataType,
    copyValues: cuda_types::cusparse::cusparseAction_t,
    idxBase: cuda_types::cusparse::cusparseIndexBase_t,
    alg: cuda_types::cusparse::cusparseCsr2CscAlg_t,
    buffer: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseCsr2cscEx2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cusparseCsr2cscEx2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cusparseCsr2cscEx2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnz), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnz, "cusparseCsr2cscEx2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrVal), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrVal, "cusparseCsr2cscEx2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrRowPtr), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrRowPtr, "cusparseCsr2cscEx2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrColInd), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrColInd, "cusparseCsr2cscEx2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(cscVal), ": ").as_bytes())?;
    crate::CudaDisplay::write(&cscVal, "cusparseCsr2cscEx2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(cscColPtr), ": ").as_bytes())?;
    crate::CudaDisplay::write(&cscColPtr, "cusparseCsr2cscEx2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(cscRowInd), ": ").as_bytes())?;
    crate::CudaDisplay::write(&cscRowInd, "cusparseCsr2cscEx2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(valType), ": ").as_bytes())?;
    crate::CudaDisplay::write(&valType, "cusparseCsr2cscEx2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(copyValues), ": ").as_bytes())?;
    crate::CudaDisplay::write(&copyValues, "cusparseCsr2cscEx2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(idxBase), ": ").as_bytes())?;
    crate::CudaDisplay::write(&idxBase, "cusparseCsr2cscEx2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alg), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alg, "cusparseCsr2cscEx2", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(buffer), ": ").as_bytes())?;
    crate::CudaDisplay::write(&buffer, "cusparseCsr2cscEx2", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseCsr2cscEx2_bufferSize(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    m: ::core::ffi::c_int,
    n: ::core::ffi::c_int,
    nnz: ::core::ffi::c_int,
    csrVal: *const ::core::ffi::c_void,
    csrRowPtr: *const ::core::ffi::c_int,
    csrColInd: *const ::core::ffi::c_int,
    cscVal: *mut ::core::ffi::c_void,
    cscColPtr: *mut ::core::ffi::c_int,
    cscRowInd: *mut ::core::ffi::c_int,
    valType: cuda_types::cusparse::cudaDataType,
    copyValues: cuda_types::cusparse::cusparseAction_t,
    idxBase: cuda_types::cusparse::cusparseIndexBase_t,
    alg: cuda_types::cusparse::cusparseCsr2CscAlg_t,
    bufferSize: *mut usize,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &handle,
        "cusparseCsr2cscEx2_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(m), ": ").as_bytes())?;
    crate::CudaDisplay::write(&m, "cusparseCsr2cscEx2_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(n), ": ").as_bytes())?;
    crate::CudaDisplay::write(&n, "cusparseCsr2cscEx2_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnz), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnz, "cusparseCsr2cscEx2_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrVal), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrVal,
        "cusparseCsr2cscEx2_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrRowPtr), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrRowPtr,
        "cusparseCsr2cscEx2_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrColInd), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrColInd,
        "cusparseCsr2cscEx2_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(cscVal), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &cscVal,
        "cusparseCsr2cscEx2_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(cscColPtr), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &cscColPtr,
        "cusparseCsr2cscEx2_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(cscRowInd), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &cscRowInd,
        "cusparseCsr2cscEx2_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(valType), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &valType,
        "cusparseCsr2cscEx2_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(copyValues), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &copyValues,
        "cusparseCsr2cscEx2_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(idxBase), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &idxBase,
        "cusparseCsr2cscEx2_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alg), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alg, "cusparseCsr2cscEx2_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bufferSize), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bufferSize,
        "cusparseCsr2cscEx2_bufferSize",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
impl crate::CudaDisplay for cuda_types::cusparse::cusparseFormat_t {
    fn write(
        &self,
        _fn_name: &'static str,
        _index: usize,
        writer: &mut (impl std::io::Write + ?Sized),
    ) -> std::io::Result<()> {
        match self {
            &cuda_types::cusparse::cusparseFormat_t::CUSPARSE_FORMAT_CSR => {
                writer.write_all(stringify!(CUSPARSE_FORMAT_CSR).as_bytes())
            }
            &cuda_types::cusparse::cusparseFormat_t::CUSPARSE_FORMAT_CSC => {
                writer.write_all(stringify!(CUSPARSE_FORMAT_CSC).as_bytes())
            }
            &cuda_types::cusparse::cusparseFormat_t::CUSPARSE_FORMAT_COO => {
                writer.write_all(stringify!(CUSPARSE_FORMAT_COO).as_bytes())
            }
            &cuda_types::cusparse::cusparseFormat_t::CUSPARSE_FORMAT_BLOCKED_ELL => {
                writer.write_all(stringify!(CUSPARSE_FORMAT_BLOCKED_ELL).as_bytes())
            }
            &cuda_types::cusparse::cusparseFormat_t::CUSPARSE_FORMAT_BSR => {
                writer.write_all(stringify!(CUSPARSE_FORMAT_BSR).as_bytes())
            }
            &cuda_types::cusparse::cusparseFormat_t::CUSPARSE_FORMAT_SLICED_ELLPACK => {
                writer.write_all(stringify!(CUSPARSE_FORMAT_SLICED_ELLPACK).as_bytes())
            }
            _ => write!(writer, "{}", self.0),
        }
    }
}
impl crate::CudaDisplay for cuda_types::cusparse::cusparseOrder_t {
    fn write(
        &self,
        _fn_name: &'static str,
        _index: usize,
        writer: &mut (impl std::io::Write + ?Sized),
    ) -> std::io::Result<()> {
        match self {
            &cuda_types::cusparse::cusparseOrder_t::CUSPARSE_ORDER_COL => {
                writer.write_all(stringify!(CUSPARSE_ORDER_COL).as_bytes())
            }
            &cuda_types::cusparse::cusparseOrder_t::CUSPARSE_ORDER_ROW => {
                writer.write_all(stringify!(CUSPARSE_ORDER_ROW).as_bytes())
            }
            _ => write!(writer, "{}", self.0),
        }
    }
}
impl crate::CudaDisplay for cuda_types::cusparse::cusparseIndexType_t {
    fn write(
        &self,
        _fn_name: &'static str,
        _index: usize,
        writer: &mut (impl std::io::Write + ?Sized),
    ) -> std::io::Result<()> {
        match self {
            &cuda_types::cusparse::cusparseIndexType_t::CUSPARSE_INDEX_16U => {
                writer.write_all(stringify!(CUSPARSE_INDEX_16U).as_bytes())
            }
            &cuda_types::cusparse::cusparseIndexType_t::CUSPARSE_INDEX_32I => {
                writer.write_all(stringify!(CUSPARSE_INDEX_32I).as_bytes())
            }
            &cuda_types::cusparse::cusparseIndexType_t::CUSPARSE_INDEX_64I => {
                writer.write_all(stringify!(CUSPARSE_INDEX_64I).as_bytes())
            }
            _ => write!(writer, "{}", self.0),
        }
    }
}
impl crate::CudaDisplay for cuda_types::cusparse::cusparseSpVecDescr_t {
    fn write(
        &self,
        _fn_name: &'static str,
        _index: usize,
        writer: &mut (impl std::io::Write + ?Sized),
    ) -> std::io::Result<()> {
        if self.is_null() {
            writer.write_all(b"NULL")
        } else {
            write!(writer, "{:p}", *self)
        }
    }
}
impl crate::CudaDisplay for cuda_types::cusparse::cusparseDnVecDescr_t {
    fn write(
        &self,
        _fn_name: &'static str,
        _index: usize,
        writer: &mut (impl std::io::Write + ?Sized),
    ) -> std::io::Result<()> {
        if self.is_null() {
            writer.write_all(b"NULL")
        } else {
            write!(writer, "{:p}", *self)
        }
    }
}
impl crate::CudaDisplay for cuda_types::cusparse::cusparseSpMatDescr_t {
    fn write(
        &self,
        _fn_name: &'static str,
        _index: usize,
        writer: &mut (impl std::io::Write + ?Sized),
    ) -> std::io::Result<()> {
        if self.is_null() {
            writer.write_all(b"NULL")
        } else {
            write!(writer, "{:p}", *self)
        }
    }
}
impl crate::CudaDisplay for cuda_types::cusparse::cusparseDnMatDescr_t {
    fn write(
        &self,
        _fn_name: &'static str,
        _index: usize,
        writer: &mut (impl std::io::Write + ?Sized),
    ) -> std::io::Result<()> {
        if self.is_null() {
            writer.write_all(b"NULL")
        } else {
            write!(writer, "{:p}", *self)
        }
    }
}
impl crate::CudaDisplay for cuda_types::cusparse::cusparseConstSpVecDescr_t {
    fn write(
        &self,
        _fn_name: &'static str,
        _index: usize,
        writer: &mut (impl std::io::Write + ?Sized),
    ) -> std::io::Result<()> {
        if self.is_null() {
            writer.write_all(b"NULL")
        } else {
            write!(writer, "{:p}", *self)
        }
    }
}
impl crate::CudaDisplay for cuda_types::cusparse::cusparseConstDnVecDescr_t {
    fn write(
        &self,
        _fn_name: &'static str,
        _index: usize,
        writer: &mut (impl std::io::Write + ?Sized),
    ) -> std::io::Result<()> {
        if self.is_null() {
            writer.write_all(b"NULL")
        } else {
            write!(writer, "{:p}", *self)
        }
    }
}
impl crate::CudaDisplay for cuda_types::cusparse::cusparseConstSpMatDescr_t {
    fn write(
        &self,
        _fn_name: &'static str,
        _index: usize,
        writer: &mut (impl std::io::Write + ?Sized),
    ) -> std::io::Result<()> {
        if self.is_null() {
            writer.write_all(b"NULL")
        } else {
            write!(writer, "{:p}", *self)
        }
    }
}
impl crate::CudaDisplay for cuda_types::cusparse::cusparseConstDnMatDescr_t {
    fn write(
        &self,
        _fn_name: &'static str,
        _index: usize,
        writer: &mut (impl std::io::Write + ?Sized),
    ) -> std::io::Result<()> {
        if self.is_null() {
            writer.write_all(b"NULL")
        } else {
            write!(writer, "{:p}", *self)
        }
    }
}
pub fn write_cusparseCreateSpVec(
    writer: &mut (impl std::io::Write + ?Sized),
    spVecDescr: *mut cuda_types::cusparse::cusparseSpVecDescr_t,
    size: i64,
    nnz: i64,
    indices: *mut ::core::ffi::c_void,
    values: *mut ::core::ffi::c_void,
    idxType: cuda_types::cusparse::cusparseIndexType_t,
    idxBase: cuda_types::cusparse::cusparseIndexBase_t,
    valueType: cuda_types::cusparse::cudaDataType,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(spVecDescr), ": ").as_bytes())?;
    crate::CudaDisplay::write(&spVecDescr, "cusparseCreateSpVec", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(size), ": ").as_bytes())?;
    crate::CudaDisplay::write(&size, "cusparseCreateSpVec", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnz), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnz, "cusparseCreateSpVec", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(indices), ": ").as_bytes())?;
    crate::CudaDisplay::write(&indices, "cusparseCreateSpVec", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(values), ": ").as_bytes())?;
    crate::CudaDisplay::write(&values, "cusparseCreateSpVec", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(idxType), ": ").as_bytes())?;
    crate::CudaDisplay::write(&idxType, "cusparseCreateSpVec", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(idxBase), ": ").as_bytes())?;
    crate::CudaDisplay::write(&idxBase, "cusparseCreateSpVec", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(valueType), ": ").as_bytes())?;
    crate::CudaDisplay::write(&valueType, "cusparseCreateSpVec", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseCreateConstSpVec(
    writer: &mut (impl std::io::Write + ?Sized),
    spVecDescr: *mut cuda_types::cusparse::cusparseConstSpVecDescr_t,
    size: i64,
    nnz: i64,
    indices: *const ::core::ffi::c_void,
    values: *const ::core::ffi::c_void,
    idxType: cuda_types::cusparse::cusparseIndexType_t,
    idxBase: cuda_types::cusparse::cusparseIndexBase_t,
    valueType: cuda_types::cusparse::cudaDataType,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(spVecDescr), ": ").as_bytes())?;
    crate::CudaDisplay::write(&spVecDescr, "cusparseCreateConstSpVec", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(size), ": ").as_bytes())?;
    crate::CudaDisplay::write(&size, "cusparseCreateConstSpVec", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnz), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnz, "cusparseCreateConstSpVec", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(indices), ": ").as_bytes())?;
    crate::CudaDisplay::write(&indices, "cusparseCreateConstSpVec", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(values), ": ").as_bytes())?;
    crate::CudaDisplay::write(&values, "cusparseCreateConstSpVec", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(idxType), ": ").as_bytes())?;
    crate::CudaDisplay::write(&idxType, "cusparseCreateConstSpVec", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(idxBase), ": ").as_bytes())?;
    crate::CudaDisplay::write(&idxBase, "cusparseCreateConstSpVec", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(valueType), ": ").as_bytes())?;
    crate::CudaDisplay::write(&valueType, "cusparseCreateConstSpVec", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseDestroySpVec(
    writer: &mut (impl std::io::Write + ?Sized),
    spVecDescr: cuda_types::cusparse::cusparseConstSpVecDescr_t,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(spVecDescr), ": ").as_bytes())?;
    crate::CudaDisplay::write(&spVecDescr, "cusparseDestroySpVec", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseSpVecGet(
    writer: &mut (impl std::io::Write + ?Sized),
    spVecDescr: cuda_types::cusparse::cusparseSpVecDescr_t,
    size: *mut i64,
    nnz: *mut i64,
    indices: *mut *mut ::core::ffi::c_void,
    values: *mut *mut ::core::ffi::c_void,
    idxType: *mut cuda_types::cusparse::cusparseIndexType_t,
    idxBase: *mut cuda_types::cusparse::cusparseIndexBase_t,
    valueType: *mut cuda_types::cusparse::cudaDataType,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(spVecDescr), ": ").as_bytes())?;
    crate::CudaDisplay::write(&spVecDescr, "cusparseSpVecGet", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(size), ": ").as_bytes())?;
    crate::CudaDisplay::write(&size, "cusparseSpVecGet", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnz), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnz, "cusparseSpVecGet", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(indices), ": ").as_bytes())?;
    crate::CudaDisplay::write(&indices, "cusparseSpVecGet", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(values), ": ").as_bytes())?;
    crate::CudaDisplay::write(&values, "cusparseSpVecGet", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(idxType), ": ").as_bytes())?;
    crate::CudaDisplay::write(&idxType, "cusparseSpVecGet", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(idxBase), ": ").as_bytes())?;
    crate::CudaDisplay::write(&idxBase, "cusparseSpVecGet", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(valueType), ": ").as_bytes())?;
    crate::CudaDisplay::write(&valueType, "cusparseSpVecGet", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseConstSpVecGet(
    writer: &mut (impl std::io::Write + ?Sized),
    spVecDescr: cuda_types::cusparse::cusparseConstSpVecDescr_t,
    size: *mut i64,
    nnz: *mut i64,
    indices: *mut *const ::core::ffi::c_void,
    values: *mut *const ::core::ffi::c_void,
    idxType: *mut cuda_types::cusparse::cusparseIndexType_t,
    idxBase: *mut cuda_types::cusparse::cusparseIndexBase_t,
    valueType: *mut cuda_types::cusparse::cudaDataType,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(spVecDescr), ": ").as_bytes())?;
    crate::CudaDisplay::write(&spVecDescr, "cusparseConstSpVecGet", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(size), ": ").as_bytes())?;
    crate::CudaDisplay::write(&size, "cusparseConstSpVecGet", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnz), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnz, "cusparseConstSpVecGet", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(indices), ": ").as_bytes())?;
    crate::CudaDisplay::write(&indices, "cusparseConstSpVecGet", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(values), ": ").as_bytes())?;
    crate::CudaDisplay::write(&values, "cusparseConstSpVecGet", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(idxType), ": ").as_bytes())?;
    crate::CudaDisplay::write(&idxType, "cusparseConstSpVecGet", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(idxBase), ": ").as_bytes())?;
    crate::CudaDisplay::write(&idxBase, "cusparseConstSpVecGet", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(valueType), ": ").as_bytes())?;
    crate::CudaDisplay::write(&valueType, "cusparseConstSpVecGet", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseSpVecGetIndexBase(
    writer: &mut (impl std::io::Write + ?Sized),
    spVecDescr: cuda_types::cusparse::cusparseConstSpVecDescr_t,
    idxBase: *mut cuda_types::cusparse::cusparseIndexBase_t,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(spVecDescr), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &spVecDescr,
        "cusparseSpVecGetIndexBase",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(idxBase), ": ").as_bytes())?;
    crate::CudaDisplay::write(&idxBase, "cusparseSpVecGetIndexBase", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseSpVecGetValues(
    writer: &mut (impl std::io::Write + ?Sized),
    spVecDescr: cuda_types::cusparse::cusparseSpVecDescr_t,
    values: *mut *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(spVecDescr), ": ").as_bytes())?;
    crate::CudaDisplay::write(&spVecDescr, "cusparseSpVecGetValues", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(values), ": ").as_bytes())?;
    crate::CudaDisplay::write(&values, "cusparseSpVecGetValues", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseConstSpVecGetValues(
    writer: &mut (impl std::io::Write + ?Sized),
    spVecDescr: cuda_types::cusparse::cusparseConstSpVecDescr_t,
    values: *mut *const ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(spVecDescr), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &spVecDescr,
        "cusparseConstSpVecGetValues",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(values), ": ").as_bytes())?;
    crate::CudaDisplay::write(&values, "cusparseConstSpVecGetValues", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseSpVecSetValues(
    writer: &mut (impl std::io::Write + ?Sized),
    spVecDescr: cuda_types::cusparse::cusparseSpVecDescr_t,
    values: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(spVecDescr), ": ").as_bytes())?;
    crate::CudaDisplay::write(&spVecDescr, "cusparseSpVecSetValues", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(values), ": ").as_bytes())?;
    crate::CudaDisplay::write(&values, "cusparseSpVecSetValues", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseCreateDnVec(
    writer: &mut (impl std::io::Write + ?Sized),
    dnVecDescr: *mut cuda_types::cusparse::cusparseDnVecDescr_t,
    size: i64,
    values: *mut ::core::ffi::c_void,
    valueType: cuda_types::cusparse::cudaDataType,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(dnVecDescr), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dnVecDescr, "cusparseCreateDnVec", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(size), ": ").as_bytes())?;
    crate::CudaDisplay::write(&size, "cusparseCreateDnVec", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(values), ": ").as_bytes())?;
    crate::CudaDisplay::write(&values, "cusparseCreateDnVec", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(valueType), ": ").as_bytes())?;
    crate::CudaDisplay::write(&valueType, "cusparseCreateDnVec", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseCreateConstDnVec(
    writer: &mut (impl std::io::Write + ?Sized),
    dnVecDescr: *mut cuda_types::cusparse::cusparseConstDnVecDescr_t,
    size: i64,
    values: *const ::core::ffi::c_void,
    valueType: cuda_types::cusparse::cudaDataType,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(dnVecDescr), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dnVecDescr, "cusparseCreateConstDnVec", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(size), ": ").as_bytes())?;
    crate::CudaDisplay::write(&size, "cusparseCreateConstDnVec", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(values), ": ").as_bytes())?;
    crate::CudaDisplay::write(&values, "cusparseCreateConstDnVec", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(valueType), ": ").as_bytes())?;
    crate::CudaDisplay::write(&valueType, "cusparseCreateConstDnVec", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseDestroyDnVec(
    writer: &mut (impl std::io::Write + ?Sized),
    dnVecDescr: cuda_types::cusparse::cusparseConstDnVecDescr_t,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(dnVecDescr), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dnVecDescr, "cusparseDestroyDnVec", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseDnVecGet(
    writer: &mut (impl std::io::Write + ?Sized),
    dnVecDescr: cuda_types::cusparse::cusparseDnVecDescr_t,
    size: *mut i64,
    values: *mut *mut ::core::ffi::c_void,
    valueType: *mut cuda_types::cusparse::cudaDataType,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(dnVecDescr), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dnVecDescr, "cusparseDnVecGet", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(size), ": ").as_bytes())?;
    crate::CudaDisplay::write(&size, "cusparseDnVecGet", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(values), ": ").as_bytes())?;
    crate::CudaDisplay::write(&values, "cusparseDnVecGet", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(valueType), ": ").as_bytes())?;
    crate::CudaDisplay::write(&valueType, "cusparseDnVecGet", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseConstDnVecGet(
    writer: &mut (impl std::io::Write + ?Sized),
    dnVecDescr: cuda_types::cusparse::cusparseConstDnVecDescr_t,
    size: *mut i64,
    values: *mut *const ::core::ffi::c_void,
    valueType: *mut cuda_types::cusparse::cudaDataType,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(dnVecDescr), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dnVecDescr, "cusparseConstDnVecGet", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(size), ": ").as_bytes())?;
    crate::CudaDisplay::write(&size, "cusparseConstDnVecGet", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(values), ": ").as_bytes())?;
    crate::CudaDisplay::write(&values, "cusparseConstDnVecGet", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(valueType), ": ").as_bytes())?;
    crate::CudaDisplay::write(&valueType, "cusparseConstDnVecGet", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseDnVecGetValues(
    writer: &mut (impl std::io::Write + ?Sized),
    dnVecDescr: cuda_types::cusparse::cusparseDnVecDescr_t,
    values: *mut *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(dnVecDescr), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dnVecDescr, "cusparseDnVecGetValues", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(values), ": ").as_bytes())?;
    crate::CudaDisplay::write(&values, "cusparseDnVecGetValues", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseConstDnVecGetValues(
    writer: &mut (impl std::io::Write + ?Sized),
    dnVecDescr: cuda_types::cusparse::cusparseConstDnVecDescr_t,
    values: *mut *const ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(dnVecDescr), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &dnVecDescr,
        "cusparseConstDnVecGetValues",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(values), ": ").as_bytes())?;
    crate::CudaDisplay::write(&values, "cusparseConstDnVecGetValues", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseDnVecSetValues(
    writer: &mut (impl std::io::Write + ?Sized),
    dnVecDescr: cuda_types::cusparse::cusparseDnVecDescr_t,
    values: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(dnVecDescr), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dnVecDescr, "cusparseDnVecSetValues", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(values), ": ").as_bytes())?;
    crate::CudaDisplay::write(&values, "cusparseDnVecSetValues", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseDestroySpMat(
    writer: &mut (impl std::io::Write + ?Sized),
    spMatDescr: cuda_types::cusparse::cusparseConstSpMatDescr_t,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(spMatDescr), ": ").as_bytes())?;
    crate::CudaDisplay::write(&spMatDescr, "cusparseDestroySpMat", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseSpMatGetFormat(
    writer: &mut (impl std::io::Write + ?Sized),
    spMatDescr: cuda_types::cusparse::cusparseConstSpMatDescr_t,
    format: *mut cuda_types::cusparse::cusparseFormat_t,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(spMatDescr), ": ").as_bytes())?;
    crate::CudaDisplay::write(&spMatDescr, "cusparseSpMatGetFormat", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(format), ": ").as_bytes())?;
    crate::CudaDisplay::write(&format, "cusparseSpMatGetFormat", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseSpMatGetIndexBase(
    writer: &mut (impl std::io::Write + ?Sized),
    spMatDescr: cuda_types::cusparse::cusparseConstSpMatDescr_t,
    idxBase: *mut cuda_types::cusparse::cusparseIndexBase_t,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(spMatDescr), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &spMatDescr,
        "cusparseSpMatGetIndexBase",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(idxBase), ": ").as_bytes())?;
    crate::CudaDisplay::write(&idxBase, "cusparseSpMatGetIndexBase", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseSpMatGetValues(
    writer: &mut (impl std::io::Write + ?Sized),
    spMatDescr: cuda_types::cusparse::cusparseSpMatDescr_t,
    values: *mut *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(spMatDescr), ": ").as_bytes())?;
    crate::CudaDisplay::write(&spMatDescr, "cusparseSpMatGetValues", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(values), ": ").as_bytes())?;
    crate::CudaDisplay::write(&values, "cusparseSpMatGetValues", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseConstSpMatGetValues(
    writer: &mut (impl std::io::Write + ?Sized),
    spMatDescr: cuda_types::cusparse::cusparseConstSpMatDescr_t,
    values: *mut *const ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(spMatDescr), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &spMatDescr,
        "cusparseConstSpMatGetValues",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(values), ": ").as_bytes())?;
    crate::CudaDisplay::write(&values, "cusparseConstSpMatGetValues", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseSpMatSetValues(
    writer: &mut (impl std::io::Write + ?Sized),
    spMatDescr: cuda_types::cusparse::cusparseSpMatDescr_t,
    values: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(spMatDescr), ": ").as_bytes())?;
    crate::CudaDisplay::write(&spMatDescr, "cusparseSpMatSetValues", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(values), ": ").as_bytes())?;
    crate::CudaDisplay::write(&values, "cusparseSpMatSetValues", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseSpMatGetSize(
    writer: &mut (impl std::io::Write + ?Sized),
    spMatDescr: cuda_types::cusparse::cusparseConstSpMatDescr_t,
    rows: *mut i64,
    cols: *mut i64,
    nnz: *mut i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(spMatDescr), ": ").as_bytes())?;
    crate::CudaDisplay::write(&spMatDescr, "cusparseSpMatGetSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(rows), ": ").as_bytes())?;
    crate::CudaDisplay::write(&rows, "cusparseSpMatGetSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(cols), ": ").as_bytes())?;
    crate::CudaDisplay::write(&cols, "cusparseSpMatGetSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnz), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnz, "cusparseSpMatGetSize", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseSpMatGetStridedBatch(
    writer: &mut (impl std::io::Write + ?Sized),
    spMatDescr: cuda_types::cusparse::cusparseConstSpMatDescr_t,
    batchCount: *mut ::core::ffi::c_int,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(spMatDescr), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &spMatDescr,
        "cusparseSpMatGetStridedBatch",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(batchCount), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &batchCount,
        "cusparseSpMatGetStridedBatch",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseCooSetStridedBatch(
    writer: &mut (impl std::io::Write + ?Sized),
    spMatDescr: cuda_types::cusparse::cusparseSpMatDescr_t,
    batchCount: ::core::ffi::c_int,
    batchStride: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(spMatDescr), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &spMatDescr,
        "cusparseCooSetStridedBatch",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(batchCount), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &batchCount,
        "cusparseCooSetStridedBatch",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(batchStride), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &batchStride,
        "cusparseCooSetStridedBatch",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseCsrSetStridedBatch(
    writer: &mut (impl std::io::Write + ?Sized),
    spMatDescr: cuda_types::cusparse::cusparseSpMatDescr_t,
    batchCount: ::core::ffi::c_int,
    offsetsBatchStride: i64,
    columnsValuesBatchStride: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(spMatDescr), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &spMatDescr,
        "cusparseCsrSetStridedBatch",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(batchCount), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &batchCount,
        "cusparseCsrSetStridedBatch",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(offsetsBatchStride), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &offsetsBatchStride,
        "cusparseCsrSetStridedBatch",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(columnsValuesBatchStride), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &columnsValuesBatchStride,
        "cusparseCsrSetStridedBatch",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseBsrSetStridedBatch(
    writer: &mut (impl std::io::Write + ?Sized),
    spMatDescr: cuda_types::cusparse::cusparseSpMatDescr_t,
    batchCount: ::core::ffi::c_int,
    offsetsBatchStride: i64,
    columnsBatchStride: i64,
    ValuesBatchStride: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(spMatDescr), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &spMatDescr,
        "cusparseBsrSetStridedBatch",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(batchCount), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &batchCount,
        "cusparseBsrSetStridedBatch",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(offsetsBatchStride), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &offsetsBatchStride,
        "cusparseBsrSetStridedBatch",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(columnsBatchStride), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &columnsBatchStride,
        "cusparseBsrSetStridedBatch",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ValuesBatchStride), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &ValuesBatchStride,
        "cusparseBsrSetStridedBatch",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
impl crate::CudaDisplay for cuda_types::cusparse::cusparseSpMatAttribute_t {
    fn write(
        &self,
        _fn_name: &'static str,
        _index: usize,
        writer: &mut (impl std::io::Write + ?Sized),
    ) -> std::io::Result<()> {
        match self {
            &cuda_types::cusparse::cusparseSpMatAttribute_t::CUSPARSE_SPMAT_FILL_MODE => {
                writer.write_all(stringify!(CUSPARSE_SPMAT_FILL_MODE).as_bytes())
            }
            &cuda_types::cusparse::cusparseSpMatAttribute_t::CUSPARSE_SPMAT_DIAG_TYPE => {
                writer.write_all(stringify!(CUSPARSE_SPMAT_DIAG_TYPE).as_bytes())
            }
            _ => write!(writer, "{}", self.0),
        }
    }
}
pub fn write_cusparseSpMatGetAttribute(
    writer: &mut (impl std::io::Write + ?Sized),
    spMatDescr: cuda_types::cusparse::cusparseConstSpMatDescr_t,
    attribute: cuda_types::cusparse::cusparseSpMatAttribute_t,
    data: *mut ::core::ffi::c_void,
    dataSize: usize,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(spMatDescr), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &spMatDescr,
        "cusparseSpMatGetAttribute",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(attribute), ": ").as_bytes())?;
    crate::CudaDisplay::write(&attribute, "cusparseSpMatGetAttribute", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(data), ": ").as_bytes())?;
    crate::CudaDisplay::write(&data, "cusparseSpMatGetAttribute", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dataSize), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dataSize, "cusparseSpMatGetAttribute", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseSpMatSetAttribute(
    writer: &mut (impl std::io::Write + ?Sized),
    spMatDescr: cuda_types::cusparse::cusparseSpMatDescr_t,
    attribute: cuda_types::cusparse::cusparseSpMatAttribute_t,
    data: *mut ::core::ffi::c_void,
    dataSize: usize,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(spMatDescr), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &spMatDescr,
        "cusparseSpMatSetAttribute",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(attribute), ": ").as_bytes())?;
    crate::CudaDisplay::write(&attribute, "cusparseSpMatSetAttribute", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(data), ": ").as_bytes())?;
    crate::CudaDisplay::write(&data, "cusparseSpMatSetAttribute", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(dataSize), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dataSize, "cusparseSpMatSetAttribute", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseCreateCsr(
    writer: &mut (impl std::io::Write + ?Sized),
    spMatDescr: *mut cuda_types::cusparse::cusparseSpMatDescr_t,
    rows: i64,
    cols: i64,
    nnz: i64,
    csrRowOffsets: *mut ::core::ffi::c_void,
    csrColInd: *mut ::core::ffi::c_void,
    csrValues: *mut ::core::ffi::c_void,
    csrRowOffsetsType: cuda_types::cusparse::cusparseIndexType_t,
    csrColIndType: cuda_types::cusparse::cusparseIndexType_t,
    idxBase: cuda_types::cusparse::cusparseIndexBase_t,
    valueType: cuda_types::cusparse::cudaDataType,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(spMatDescr), ": ").as_bytes())?;
    crate::CudaDisplay::write(&spMatDescr, "cusparseCreateCsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(rows), ": ").as_bytes())?;
    crate::CudaDisplay::write(&rows, "cusparseCreateCsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(cols), ": ").as_bytes())?;
    crate::CudaDisplay::write(&cols, "cusparseCreateCsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnz), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnz, "cusparseCreateCsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrRowOffsets), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrRowOffsets, "cusparseCreateCsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrColInd), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrColInd, "cusparseCreateCsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrValues), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrValues, "cusparseCreateCsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrRowOffsetsType), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrRowOffsetsType, "cusparseCreateCsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrColIndType), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrColIndType, "cusparseCreateCsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(idxBase), ": ").as_bytes())?;
    crate::CudaDisplay::write(&idxBase, "cusparseCreateCsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(valueType), ": ").as_bytes())?;
    crate::CudaDisplay::write(&valueType, "cusparseCreateCsr", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseCreateConstCsr(
    writer: &mut (impl std::io::Write + ?Sized),
    spMatDescr: *mut cuda_types::cusparse::cusparseConstSpMatDescr_t,
    rows: i64,
    cols: i64,
    nnz: i64,
    csrRowOffsets: *const ::core::ffi::c_void,
    csrColInd: *const ::core::ffi::c_void,
    csrValues: *const ::core::ffi::c_void,
    csrRowOffsetsType: cuda_types::cusparse::cusparseIndexType_t,
    csrColIndType: cuda_types::cusparse::cusparseIndexType_t,
    idxBase: cuda_types::cusparse::cusparseIndexBase_t,
    valueType: cuda_types::cusparse::cudaDataType,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(spMatDescr), ": ").as_bytes())?;
    crate::CudaDisplay::write(&spMatDescr, "cusparseCreateConstCsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(rows), ": ").as_bytes())?;
    crate::CudaDisplay::write(&rows, "cusparseCreateConstCsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(cols), ": ").as_bytes())?;
    crate::CudaDisplay::write(&cols, "cusparseCreateConstCsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnz), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnz, "cusparseCreateConstCsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrRowOffsets), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrRowOffsets,
        "cusparseCreateConstCsr",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrColInd), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrColInd, "cusparseCreateConstCsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrValues), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrValues, "cusparseCreateConstCsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrRowOffsetsType), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrRowOffsetsType,
        "cusparseCreateConstCsr",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrColIndType), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrColIndType,
        "cusparseCreateConstCsr",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(idxBase), ": ").as_bytes())?;
    crate::CudaDisplay::write(&idxBase, "cusparseCreateConstCsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(valueType), ": ").as_bytes())?;
    crate::CudaDisplay::write(&valueType, "cusparseCreateConstCsr", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseCreateCsc(
    writer: &mut (impl std::io::Write + ?Sized),
    spMatDescr: *mut cuda_types::cusparse::cusparseSpMatDescr_t,
    rows: i64,
    cols: i64,
    nnz: i64,
    cscColOffsets: *mut ::core::ffi::c_void,
    cscRowInd: *mut ::core::ffi::c_void,
    cscValues: *mut ::core::ffi::c_void,
    cscColOffsetsType: cuda_types::cusparse::cusparseIndexType_t,
    cscRowIndType: cuda_types::cusparse::cusparseIndexType_t,
    idxBase: cuda_types::cusparse::cusparseIndexBase_t,
    valueType: cuda_types::cusparse::cudaDataType,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(spMatDescr), ": ").as_bytes())?;
    crate::CudaDisplay::write(&spMatDescr, "cusparseCreateCsc", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(rows), ": ").as_bytes())?;
    crate::CudaDisplay::write(&rows, "cusparseCreateCsc", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(cols), ": ").as_bytes())?;
    crate::CudaDisplay::write(&cols, "cusparseCreateCsc", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnz), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnz, "cusparseCreateCsc", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(cscColOffsets), ": ").as_bytes())?;
    crate::CudaDisplay::write(&cscColOffsets, "cusparseCreateCsc", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(cscRowInd), ": ").as_bytes())?;
    crate::CudaDisplay::write(&cscRowInd, "cusparseCreateCsc", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(cscValues), ": ").as_bytes())?;
    crate::CudaDisplay::write(&cscValues, "cusparseCreateCsc", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(cscColOffsetsType), ": ").as_bytes())?;
    crate::CudaDisplay::write(&cscColOffsetsType, "cusparseCreateCsc", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(cscRowIndType), ": ").as_bytes())?;
    crate::CudaDisplay::write(&cscRowIndType, "cusparseCreateCsc", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(idxBase), ": ").as_bytes())?;
    crate::CudaDisplay::write(&idxBase, "cusparseCreateCsc", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(valueType), ": ").as_bytes())?;
    crate::CudaDisplay::write(&valueType, "cusparseCreateCsc", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseCreateConstCsc(
    writer: &mut (impl std::io::Write + ?Sized),
    spMatDescr: *mut cuda_types::cusparse::cusparseConstSpMatDescr_t,
    rows: i64,
    cols: i64,
    nnz: i64,
    cscColOffsets: *const ::core::ffi::c_void,
    cscRowInd: *const ::core::ffi::c_void,
    cscValues: *const ::core::ffi::c_void,
    cscColOffsetsType: cuda_types::cusparse::cusparseIndexType_t,
    cscRowIndType: cuda_types::cusparse::cusparseIndexType_t,
    idxBase: cuda_types::cusparse::cusparseIndexBase_t,
    valueType: cuda_types::cusparse::cudaDataType,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(spMatDescr), ": ").as_bytes())?;
    crate::CudaDisplay::write(&spMatDescr, "cusparseCreateConstCsc", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(rows), ": ").as_bytes())?;
    crate::CudaDisplay::write(&rows, "cusparseCreateConstCsc", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(cols), ": ").as_bytes())?;
    crate::CudaDisplay::write(&cols, "cusparseCreateConstCsc", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnz), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnz, "cusparseCreateConstCsc", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(cscColOffsets), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &cscColOffsets,
        "cusparseCreateConstCsc",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(cscRowInd), ": ").as_bytes())?;
    crate::CudaDisplay::write(&cscRowInd, "cusparseCreateConstCsc", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(cscValues), ": ").as_bytes())?;
    crate::CudaDisplay::write(&cscValues, "cusparseCreateConstCsc", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(cscColOffsetsType), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &cscColOffsetsType,
        "cusparseCreateConstCsc",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(cscRowIndType), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &cscRowIndType,
        "cusparseCreateConstCsc",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(idxBase), ": ").as_bytes())?;
    crate::CudaDisplay::write(&idxBase, "cusparseCreateConstCsc", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(valueType), ": ").as_bytes())?;
    crate::CudaDisplay::write(&valueType, "cusparseCreateConstCsc", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseCsrGet(
    writer: &mut (impl std::io::Write + ?Sized),
    spMatDescr: cuda_types::cusparse::cusparseSpMatDescr_t,
    rows: *mut i64,
    cols: *mut i64,
    nnz: *mut i64,
    csrRowOffsets: *mut *mut ::core::ffi::c_void,
    csrColInd: *mut *mut ::core::ffi::c_void,
    csrValues: *mut *mut ::core::ffi::c_void,
    csrRowOffsetsType: *mut cuda_types::cusparse::cusparseIndexType_t,
    csrColIndType: *mut cuda_types::cusparse::cusparseIndexType_t,
    idxBase: *mut cuda_types::cusparse::cusparseIndexBase_t,
    valueType: *mut cuda_types::cusparse::cudaDataType,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(spMatDescr), ": ").as_bytes())?;
    crate::CudaDisplay::write(&spMatDescr, "cusparseCsrGet", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(rows), ": ").as_bytes())?;
    crate::CudaDisplay::write(&rows, "cusparseCsrGet", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(cols), ": ").as_bytes())?;
    crate::CudaDisplay::write(&cols, "cusparseCsrGet", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnz), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnz, "cusparseCsrGet", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrRowOffsets), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrRowOffsets, "cusparseCsrGet", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrColInd), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrColInd, "cusparseCsrGet", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrValues), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrValues, "cusparseCsrGet", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrRowOffsetsType), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrRowOffsetsType, "cusparseCsrGet", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrColIndType), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrColIndType, "cusparseCsrGet", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(idxBase), ": ").as_bytes())?;
    crate::CudaDisplay::write(&idxBase, "cusparseCsrGet", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(valueType), ": ").as_bytes())?;
    crate::CudaDisplay::write(&valueType, "cusparseCsrGet", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseConstCsrGet(
    writer: &mut (impl std::io::Write + ?Sized),
    spMatDescr: cuda_types::cusparse::cusparseConstSpMatDescr_t,
    rows: *mut i64,
    cols: *mut i64,
    nnz: *mut i64,
    csrRowOffsets: *mut *const ::core::ffi::c_void,
    csrColInd: *mut *const ::core::ffi::c_void,
    csrValues: *mut *const ::core::ffi::c_void,
    csrRowOffsetsType: *mut cuda_types::cusparse::cusparseIndexType_t,
    csrColIndType: *mut cuda_types::cusparse::cusparseIndexType_t,
    idxBase: *mut cuda_types::cusparse::cusparseIndexBase_t,
    valueType: *mut cuda_types::cusparse::cudaDataType,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(spMatDescr), ": ").as_bytes())?;
    crate::CudaDisplay::write(&spMatDescr, "cusparseConstCsrGet", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(rows), ": ").as_bytes())?;
    crate::CudaDisplay::write(&rows, "cusparseConstCsrGet", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(cols), ": ").as_bytes())?;
    crate::CudaDisplay::write(&cols, "cusparseConstCsrGet", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnz), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnz, "cusparseConstCsrGet", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrRowOffsets), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrRowOffsets, "cusparseConstCsrGet", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrColInd), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrColInd, "cusparseConstCsrGet", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrValues), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrValues, "cusparseConstCsrGet", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrRowOffsetsType), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrRowOffsetsType,
        "cusparseConstCsrGet",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrColIndType), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrColIndType, "cusparseConstCsrGet", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(idxBase), ": ").as_bytes())?;
    crate::CudaDisplay::write(&idxBase, "cusparseConstCsrGet", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(valueType), ": ").as_bytes())?;
    crate::CudaDisplay::write(&valueType, "cusparseConstCsrGet", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseCscGet(
    writer: &mut (impl std::io::Write + ?Sized),
    spMatDescr: cuda_types::cusparse::cusparseSpMatDescr_t,
    rows: *mut i64,
    cols: *mut i64,
    nnz: *mut i64,
    cscColOffsets: *mut *mut ::core::ffi::c_void,
    cscRowInd: *mut *mut ::core::ffi::c_void,
    cscValues: *mut *mut ::core::ffi::c_void,
    cscColOffsetsType: *mut cuda_types::cusparse::cusparseIndexType_t,
    cscRowIndType: *mut cuda_types::cusparse::cusparseIndexType_t,
    idxBase: *mut cuda_types::cusparse::cusparseIndexBase_t,
    valueType: *mut cuda_types::cusparse::cudaDataType,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(spMatDescr), ": ").as_bytes())?;
    crate::CudaDisplay::write(&spMatDescr, "cusparseCscGet", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(rows), ": ").as_bytes())?;
    crate::CudaDisplay::write(&rows, "cusparseCscGet", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(cols), ": ").as_bytes())?;
    crate::CudaDisplay::write(&cols, "cusparseCscGet", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnz), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnz, "cusparseCscGet", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(cscColOffsets), ": ").as_bytes())?;
    crate::CudaDisplay::write(&cscColOffsets, "cusparseCscGet", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(cscRowInd), ": ").as_bytes())?;
    crate::CudaDisplay::write(&cscRowInd, "cusparseCscGet", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(cscValues), ": ").as_bytes())?;
    crate::CudaDisplay::write(&cscValues, "cusparseCscGet", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(cscColOffsetsType), ": ").as_bytes())?;
    crate::CudaDisplay::write(&cscColOffsetsType, "cusparseCscGet", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(cscRowIndType), ": ").as_bytes())?;
    crate::CudaDisplay::write(&cscRowIndType, "cusparseCscGet", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(idxBase), ": ").as_bytes())?;
    crate::CudaDisplay::write(&idxBase, "cusparseCscGet", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(valueType), ": ").as_bytes())?;
    crate::CudaDisplay::write(&valueType, "cusparseCscGet", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseConstCscGet(
    writer: &mut (impl std::io::Write + ?Sized),
    spMatDescr: cuda_types::cusparse::cusparseConstSpMatDescr_t,
    rows: *mut i64,
    cols: *mut i64,
    nnz: *mut i64,
    cscColOffsets: *mut *const ::core::ffi::c_void,
    cscRowInd: *mut *const ::core::ffi::c_void,
    cscValues: *mut *const ::core::ffi::c_void,
    cscColOffsetsType: *mut cuda_types::cusparse::cusparseIndexType_t,
    cscRowIndType: *mut cuda_types::cusparse::cusparseIndexType_t,
    idxBase: *mut cuda_types::cusparse::cusparseIndexBase_t,
    valueType: *mut cuda_types::cusparse::cudaDataType,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(spMatDescr), ": ").as_bytes())?;
    crate::CudaDisplay::write(&spMatDescr, "cusparseConstCscGet", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(rows), ": ").as_bytes())?;
    crate::CudaDisplay::write(&rows, "cusparseConstCscGet", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(cols), ": ").as_bytes())?;
    crate::CudaDisplay::write(&cols, "cusparseConstCscGet", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnz), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnz, "cusparseConstCscGet", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(cscColOffsets), ": ").as_bytes())?;
    crate::CudaDisplay::write(&cscColOffsets, "cusparseConstCscGet", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(cscRowInd), ": ").as_bytes())?;
    crate::CudaDisplay::write(&cscRowInd, "cusparseConstCscGet", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(cscValues), ": ").as_bytes())?;
    crate::CudaDisplay::write(&cscValues, "cusparseConstCscGet", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(cscColOffsetsType), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &cscColOffsetsType,
        "cusparseConstCscGet",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(cscRowIndType), ": ").as_bytes())?;
    crate::CudaDisplay::write(&cscRowIndType, "cusparseConstCscGet", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(idxBase), ": ").as_bytes())?;
    crate::CudaDisplay::write(&idxBase, "cusparseConstCscGet", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(valueType), ": ").as_bytes())?;
    crate::CudaDisplay::write(&valueType, "cusparseConstCscGet", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseCsrSetPointers(
    writer: &mut (impl std::io::Write + ?Sized),
    spMatDescr: cuda_types::cusparse::cusparseSpMatDescr_t,
    csrRowOffsets: *mut ::core::ffi::c_void,
    csrColInd: *mut ::core::ffi::c_void,
    csrValues: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(spMatDescr), ": ").as_bytes())?;
    crate::CudaDisplay::write(&spMatDescr, "cusparseCsrSetPointers", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrRowOffsets), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &csrRowOffsets,
        "cusparseCsrSetPointers",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrColInd), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrColInd, "cusparseCsrSetPointers", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(csrValues), ": ").as_bytes())?;
    crate::CudaDisplay::write(&csrValues, "cusparseCsrSetPointers", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseCscSetPointers(
    writer: &mut (impl std::io::Write + ?Sized),
    spMatDescr: cuda_types::cusparse::cusparseSpMatDescr_t,
    cscColOffsets: *mut ::core::ffi::c_void,
    cscRowInd: *mut ::core::ffi::c_void,
    cscValues: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(spMatDescr), ": ").as_bytes())?;
    crate::CudaDisplay::write(&spMatDescr, "cusparseCscSetPointers", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(cscColOffsets), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &cscColOffsets,
        "cusparseCscSetPointers",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(cscRowInd), ": ").as_bytes())?;
    crate::CudaDisplay::write(&cscRowInd, "cusparseCscSetPointers", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(cscValues), ": ").as_bytes())?;
    crate::CudaDisplay::write(&cscValues, "cusparseCscSetPointers", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseCreateBsr(
    writer: &mut (impl std::io::Write + ?Sized),
    spMatDescr: *mut cuda_types::cusparse::cusparseSpMatDescr_t,
    brows: i64,
    bcols: i64,
    bnnz: i64,
    rowBlockSize: i64,
    colBlockSize: i64,
    bsrRowOffsets: *mut ::core::ffi::c_void,
    bsrColInd: *mut ::core::ffi::c_void,
    bsrValues: *mut ::core::ffi::c_void,
    bsrRowOffsetsType: cuda_types::cusparse::cusparseIndexType_t,
    bsrColIndType: cuda_types::cusparse::cusparseIndexType_t,
    idxBase: cuda_types::cusparse::cusparseIndexBase_t,
    valueType: cuda_types::cusparse::cudaDataType,
    order: cuda_types::cusparse::cusparseOrder_t,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(spMatDescr), ": ").as_bytes())?;
    crate::CudaDisplay::write(&spMatDescr, "cusparseCreateBsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(brows), ": ").as_bytes())?;
    crate::CudaDisplay::write(&brows, "cusparseCreateBsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bcols), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bcols, "cusparseCreateBsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bnnz), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bnnz, "cusparseCreateBsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(rowBlockSize), ": ").as_bytes())?;
    crate::CudaDisplay::write(&rowBlockSize, "cusparseCreateBsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(colBlockSize), ": ").as_bytes())?;
    crate::CudaDisplay::write(&colBlockSize, "cusparseCreateBsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrRowOffsets), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrRowOffsets, "cusparseCreateBsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrColInd), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrColInd, "cusparseCreateBsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrValues), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrValues, "cusparseCreateBsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrRowOffsetsType), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrRowOffsetsType, "cusparseCreateBsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrColIndType), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrColIndType, "cusparseCreateBsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(idxBase), ": ").as_bytes())?;
    crate::CudaDisplay::write(&idxBase, "cusparseCreateBsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(valueType), ": ").as_bytes())?;
    crate::CudaDisplay::write(&valueType, "cusparseCreateBsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(order), ": ").as_bytes())?;
    crate::CudaDisplay::write(&order, "cusparseCreateBsr", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseCreateConstBsr(
    writer: &mut (impl std::io::Write + ?Sized),
    spMatDescr: *mut cuda_types::cusparse::cusparseConstSpMatDescr_t,
    brows: i64,
    bcols: i64,
    bnnz: i64,
    rowBlockDim: i64,
    colBlockDim: i64,
    bsrRowOffsets: *const ::core::ffi::c_void,
    bsrColInd: *const ::core::ffi::c_void,
    bsrValues: *const ::core::ffi::c_void,
    bsrRowOffsetsType: cuda_types::cusparse::cusparseIndexType_t,
    bsrColIndType: cuda_types::cusparse::cusparseIndexType_t,
    idxBase: cuda_types::cusparse::cusparseIndexBase_t,
    valueType: cuda_types::cusparse::cudaDataType,
    order: cuda_types::cusparse::cusparseOrder_t,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(spMatDescr), ": ").as_bytes())?;
    crate::CudaDisplay::write(&spMatDescr, "cusparseCreateConstBsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(brows), ": ").as_bytes())?;
    crate::CudaDisplay::write(&brows, "cusparseCreateConstBsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bcols), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bcols, "cusparseCreateConstBsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bnnz), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bnnz, "cusparseCreateConstBsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(rowBlockDim), ": ").as_bytes())?;
    crate::CudaDisplay::write(&rowBlockDim, "cusparseCreateConstBsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(colBlockDim), ": ").as_bytes())?;
    crate::CudaDisplay::write(&colBlockDim, "cusparseCreateConstBsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrRowOffsets), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrRowOffsets,
        "cusparseCreateConstBsr",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrColInd), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrColInd, "cusparseCreateConstBsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrValues), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bsrValues, "cusparseCreateConstBsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrRowOffsetsType), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrRowOffsetsType,
        "cusparseCreateConstBsr",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bsrColIndType), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bsrColIndType,
        "cusparseCreateConstBsr",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(idxBase), ": ").as_bytes())?;
    crate::CudaDisplay::write(&idxBase, "cusparseCreateConstBsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(valueType), ": ").as_bytes())?;
    crate::CudaDisplay::write(&valueType, "cusparseCreateConstBsr", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(order), ": ").as_bytes())?;
    crate::CudaDisplay::write(&order, "cusparseCreateConstBsr", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseCreateCoo(
    writer: &mut (impl std::io::Write + ?Sized),
    spMatDescr: *mut cuda_types::cusparse::cusparseSpMatDescr_t,
    rows: i64,
    cols: i64,
    nnz: i64,
    cooRowInd: *mut ::core::ffi::c_void,
    cooColInd: *mut ::core::ffi::c_void,
    cooValues: *mut ::core::ffi::c_void,
    cooIdxType: cuda_types::cusparse::cusparseIndexType_t,
    idxBase: cuda_types::cusparse::cusparseIndexBase_t,
    valueType: cuda_types::cusparse::cudaDataType,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(spMatDescr), ": ").as_bytes())?;
    crate::CudaDisplay::write(&spMatDescr, "cusparseCreateCoo", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(rows), ": ").as_bytes())?;
    crate::CudaDisplay::write(&rows, "cusparseCreateCoo", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(cols), ": ").as_bytes())?;
    crate::CudaDisplay::write(&cols, "cusparseCreateCoo", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnz), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnz, "cusparseCreateCoo", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(cooRowInd), ": ").as_bytes())?;
    crate::CudaDisplay::write(&cooRowInd, "cusparseCreateCoo", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(cooColInd), ": ").as_bytes())?;
    crate::CudaDisplay::write(&cooColInd, "cusparseCreateCoo", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(cooValues), ": ").as_bytes())?;
    crate::CudaDisplay::write(&cooValues, "cusparseCreateCoo", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(cooIdxType), ": ").as_bytes())?;
    crate::CudaDisplay::write(&cooIdxType, "cusparseCreateCoo", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(idxBase), ": ").as_bytes())?;
    crate::CudaDisplay::write(&idxBase, "cusparseCreateCoo", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(valueType), ": ").as_bytes())?;
    crate::CudaDisplay::write(&valueType, "cusparseCreateCoo", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseCreateConstCoo(
    writer: &mut (impl std::io::Write + ?Sized),
    spMatDescr: *mut cuda_types::cusparse::cusparseConstSpMatDescr_t,
    rows: i64,
    cols: i64,
    nnz: i64,
    cooRowInd: *const ::core::ffi::c_void,
    cooColInd: *const ::core::ffi::c_void,
    cooValues: *const ::core::ffi::c_void,
    cooIdxType: cuda_types::cusparse::cusparseIndexType_t,
    idxBase: cuda_types::cusparse::cusparseIndexBase_t,
    valueType: cuda_types::cusparse::cudaDataType,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(spMatDescr), ": ").as_bytes())?;
    crate::CudaDisplay::write(&spMatDescr, "cusparseCreateConstCoo", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(rows), ": ").as_bytes())?;
    crate::CudaDisplay::write(&rows, "cusparseCreateConstCoo", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(cols), ": ").as_bytes())?;
    crate::CudaDisplay::write(&cols, "cusparseCreateConstCoo", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnz), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnz, "cusparseCreateConstCoo", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(cooRowInd), ": ").as_bytes())?;
    crate::CudaDisplay::write(&cooRowInd, "cusparseCreateConstCoo", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(cooColInd), ": ").as_bytes())?;
    crate::CudaDisplay::write(&cooColInd, "cusparseCreateConstCoo", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(cooValues), ": ").as_bytes())?;
    crate::CudaDisplay::write(&cooValues, "cusparseCreateConstCoo", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(cooIdxType), ": ").as_bytes())?;
    crate::CudaDisplay::write(&cooIdxType, "cusparseCreateConstCoo", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(idxBase), ": ").as_bytes())?;
    crate::CudaDisplay::write(&idxBase, "cusparseCreateConstCoo", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(valueType), ": ").as_bytes())?;
    crate::CudaDisplay::write(&valueType, "cusparseCreateConstCoo", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseCooGet(
    writer: &mut (impl std::io::Write + ?Sized),
    spMatDescr: cuda_types::cusparse::cusparseSpMatDescr_t,
    rows: *mut i64,
    cols: *mut i64,
    nnz: *mut i64,
    cooRowInd: *mut *mut ::core::ffi::c_void,
    cooColInd: *mut *mut ::core::ffi::c_void,
    cooValues: *mut *mut ::core::ffi::c_void,
    idxType: *mut cuda_types::cusparse::cusparseIndexType_t,
    idxBase: *mut cuda_types::cusparse::cusparseIndexBase_t,
    valueType: *mut cuda_types::cusparse::cudaDataType,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(spMatDescr), ": ").as_bytes())?;
    crate::CudaDisplay::write(&spMatDescr, "cusparseCooGet", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(rows), ": ").as_bytes())?;
    crate::CudaDisplay::write(&rows, "cusparseCooGet", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(cols), ": ").as_bytes())?;
    crate::CudaDisplay::write(&cols, "cusparseCooGet", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnz), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnz, "cusparseCooGet", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(cooRowInd), ": ").as_bytes())?;
    crate::CudaDisplay::write(&cooRowInd, "cusparseCooGet", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(cooColInd), ": ").as_bytes())?;
    crate::CudaDisplay::write(&cooColInd, "cusparseCooGet", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(cooValues), ": ").as_bytes())?;
    crate::CudaDisplay::write(&cooValues, "cusparseCooGet", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(idxType), ": ").as_bytes())?;
    crate::CudaDisplay::write(&idxType, "cusparseCooGet", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(idxBase), ": ").as_bytes())?;
    crate::CudaDisplay::write(&idxBase, "cusparseCooGet", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(valueType), ": ").as_bytes())?;
    crate::CudaDisplay::write(&valueType, "cusparseCooGet", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseConstCooGet(
    writer: &mut (impl std::io::Write + ?Sized),
    spMatDescr: cuda_types::cusparse::cusparseConstSpMatDescr_t,
    rows: *mut i64,
    cols: *mut i64,
    nnz: *mut i64,
    cooRowInd: *mut *const ::core::ffi::c_void,
    cooColInd: *mut *const ::core::ffi::c_void,
    cooValues: *mut *const ::core::ffi::c_void,
    idxType: *mut cuda_types::cusparse::cusparseIndexType_t,
    idxBase: *mut cuda_types::cusparse::cusparseIndexBase_t,
    valueType: *mut cuda_types::cusparse::cudaDataType,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(spMatDescr), ": ").as_bytes())?;
    crate::CudaDisplay::write(&spMatDescr, "cusparseConstCooGet", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(rows), ": ").as_bytes())?;
    crate::CudaDisplay::write(&rows, "cusparseConstCooGet", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(cols), ": ").as_bytes())?;
    crate::CudaDisplay::write(&cols, "cusparseConstCooGet", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnz), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnz, "cusparseConstCooGet", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(cooRowInd), ": ").as_bytes())?;
    crate::CudaDisplay::write(&cooRowInd, "cusparseConstCooGet", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(cooColInd), ": ").as_bytes())?;
    crate::CudaDisplay::write(&cooColInd, "cusparseConstCooGet", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(cooValues), ": ").as_bytes())?;
    crate::CudaDisplay::write(&cooValues, "cusparseConstCooGet", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(idxType), ": ").as_bytes())?;
    crate::CudaDisplay::write(&idxType, "cusparseConstCooGet", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(idxBase), ": ").as_bytes())?;
    crate::CudaDisplay::write(&idxBase, "cusparseConstCooGet", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(valueType), ": ").as_bytes())?;
    crate::CudaDisplay::write(&valueType, "cusparseConstCooGet", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseCooSetPointers(
    writer: &mut (impl std::io::Write + ?Sized),
    spMatDescr: cuda_types::cusparse::cusparseSpMatDescr_t,
    cooRows: *mut ::core::ffi::c_void,
    cooColumns: *mut ::core::ffi::c_void,
    cooValues: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(spMatDescr), ": ").as_bytes())?;
    crate::CudaDisplay::write(&spMatDescr, "cusparseCooSetPointers", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(cooRows), ": ").as_bytes())?;
    crate::CudaDisplay::write(&cooRows, "cusparseCooSetPointers", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(cooColumns), ": ").as_bytes())?;
    crate::CudaDisplay::write(&cooColumns, "cusparseCooSetPointers", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(cooValues), ": ").as_bytes())?;
    crate::CudaDisplay::write(&cooValues, "cusparseCooSetPointers", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseCreateBlockedEll(
    writer: &mut (impl std::io::Write + ?Sized),
    spMatDescr: *mut cuda_types::cusparse::cusparseSpMatDescr_t,
    rows: i64,
    cols: i64,
    ellBlockSize: i64,
    ellCols: i64,
    ellColInd: *mut ::core::ffi::c_void,
    ellValue: *mut ::core::ffi::c_void,
    ellIdxType: cuda_types::cusparse::cusparseIndexType_t,
    idxBase: cuda_types::cusparse::cusparseIndexBase_t,
    valueType: cuda_types::cusparse::cudaDataType,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(spMatDescr), ": ").as_bytes())?;
    crate::CudaDisplay::write(&spMatDescr, "cusparseCreateBlockedEll", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(rows), ": ").as_bytes())?;
    crate::CudaDisplay::write(&rows, "cusparseCreateBlockedEll", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(cols), ": ").as_bytes())?;
    crate::CudaDisplay::write(&cols, "cusparseCreateBlockedEll", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ellBlockSize), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &ellBlockSize,
        "cusparseCreateBlockedEll",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ellCols), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ellCols, "cusparseCreateBlockedEll", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ellColInd), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ellColInd, "cusparseCreateBlockedEll", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ellValue), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ellValue, "cusparseCreateBlockedEll", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ellIdxType), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ellIdxType, "cusparseCreateBlockedEll", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(idxBase), ": ").as_bytes())?;
    crate::CudaDisplay::write(&idxBase, "cusparseCreateBlockedEll", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(valueType), ": ").as_bytes())?;
    crate::CudaDisplay::write(&valueType, "cusparseCreateBlockedEll", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseCreateConstBlockedEll(
    writer: &mut (impl std::io::Write + ?Sized),
    spMatDescr: *mut cuda_types::cusparse::cusparseConstSpMatDescr_t,
    rows: i64,
    cols: i64,
    ellBlockSize: i64,
    ellCols: i64,
    ellColInd: *const ::core::ffi::c_void,
    ellValue: *const ::core::ffi::c_void,
    ellIdxType: cuda_types::cusparse::cusparseIndexType_t,
    idxBase: cuda_types::cusparse::cusparseIndexBase_t,
    valueType: cuda_types::cusparse::cudaDataType,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(spMatDescr), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &spMatDescr,
        "cusparseCreateConstBlockedEll",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(rows), ": ").as_bytes())?;
    crate::CudaDisplay::write(&rows, "cusparseCreateConstBlockedEll", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(cols), ": ").as_bytes())?;
    crate::CudaDisplay::write(&cols, "cusparseCreateConstBlockedEll", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ellBlockSize), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &ellBlockSize,
        "cusparseCreateConstBlockedEll",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ellCols), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &ellCols,
        "cusparseCreateConstBlockedEll",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ellColInd), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &ellColInd,
        "cusparseCreateConstBlockedEll",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ellValue), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &ellValue,
        "cusparseCreateConstBlockedEll",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ellIdxType), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &ellIdxType,
        "cusparseCreateConstBlockedEll",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(idxBase), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &idxBase,
        "cusparseCreateConstBlockedEll",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(valueType), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &valueType,
        "cusparseCreateConstBlockedEll",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseBlockedEllGet(
    writer: &mut (impl std::io::Write + ?Sized),
    spMatDescr: cuda_types::cusparse::cusparseSpMatDescr_t,
    rows: *mut i64,
    cols: *mut i64,
    ellBlockSize: *mut i64,
    ellCols: *mut i64,
    ellColInd: *mut *mut ::core::ffi::c_void,
    ellValue: *mut *mut ::core::ffi::c_void,
    ellIdxType: *mut cuda_types::cusparse::cusparseIndexType_t,
    idxBase: *mut cuda_types::cusparse::cusparseIndexBase_t,
    valueType: *mut cuda_types::cusparse::cudaDataType,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(spMatDescr), ": ").as_bytes())?;
    crate::CudaDisplay::write(&spMatDescr, "cusparseBlockedEllGet", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(rows), ": ").as_bytes())?;
    crate::CudaDisplay::write(&rows, "cusparseBlockedEllGet", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(cols), ": ").as_bytes())?;
    crate::CudaDisplay::write(&cols, "cusparseBlockedEllGet", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ellBlockSize), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ellBlockSize, "cusparseBlockedEllGet", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ellCols), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ellCols, "cusparseBlockedEllGet", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ellColInd), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ellColInd, "cusparseBlockedEllGet", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ellValue), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ellValue, "cusparseBlockedEllGet", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ellIdxType), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ellIdxType, "cusparseBlockedEllGet", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(idxBase), ": ").as_bytes())?;
    crate::CudaDisplay::write(&idxBase, "cusparseBlockedEllGet", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(valueType), ": ").as_bytes())?;
    crate::CudaDisplay::write(&valueType, "cusparseBlockedEllGet", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseConstBlockedEllGet(
    writer: &mut (impl std::io::Write + ?Sized),
    spMatDescr: cuda_types::cusparse::cusparseConstSpMatDescr_t,
    rows: *mut i64,
    cols: *mut i64,
    ellBlockSize: *mut i64,
    ellCols: *mut i64,
    ellColInd: *mut *const ::core::ffi::c_void,
    ellValue: *mut *const ::core::ffi::c_void,
    ellIdxType: *mut cuda_types::cusparse::cusparseIndexType_t,
    idxBase: *mut cuda_types::cusparse::cusparseIndexBase_t,
    valueType: *mut cuda_types::cusparse::cudaDataType,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(spMatDescr), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &spMatDescr,
        "cusparseConstBlockedEllGet",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(rows), ": ").as_bytes())?;
    crate::CudaDisplay::write(&rows, "cusparseConstBlockedEllGet", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(cols), ": ").as_bytes())?;
    crate::CudaDisplay::write(&cols, "cusparseConstBlockedEllGet", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ellBlockSize), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &ellBlockSize,
        "cusparseConstBlockedEllGet",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ellCols), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ellCols, "cusparseConstBlockedEllGet", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ellColInd), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &ellColInd,
        "cusparseConstBlockedEllGet",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ellValue), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ellValue, "cusparseConstBlockedEllGet", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ellIdxType), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &ellIdxType,
        "cusparseConstBlockedEllGet",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(idxBase), ": ").as_bytes())?;
    crate::CudaDisplay::write(&idxBase, "cusparseConstBlockedEllGet", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(valueType), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &valueType,
        "cusparseConstBlockedEllGet",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseCreateSlicedEll(
    writer: &mut (impl std::io::Write + ?Sized),
    spMatDescr: *mut cuda_types::cusparse::cusparseSpMatDescr_t,
    rows: i64,
    cols: i64,
    nnz: i64,
    sellValuesSize: i64,
    sliceSize: i64,
    sellSliceOffsets: *mut ::core::ffi::c_void,
    sellColInd: *mut ::core::ffi::c_void,
    sellValues: *mut ::core::ffi::c_void,
    sellSliceOffsetsType: cuda_types::cusparse::cusparseIndexType_t,
    sellColIndType: cuda_types::cusparse::cusparseIndexType_t,
    idxBase: cuda_types::cusparse::cusparseIndexBase_t,
    valueType: cuda_types::cusparse::cudaDataType,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(spMatDescr), ": ").as_bytes())?;
    crate::CudaDisplay::write(&spMatDescr, "cusparseCreateSlicedEll", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(rows), ": ").as_bytes())?;
    crate::CudaDisplay::write(&rows, "cusparseCreateSlicedEll", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(cols), ": ").as_bytes())?;
    crate::CudaDisplay::write(&cols, "cusparseCreateSlicedEll", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnz), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnz, "cusparseCreateSlicedEll", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(sellValuesSize), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &sellValuesSize,
        "cusparseCreateSlicedEll",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(sliceSize), ": ").as_bytes())?;
    crate::CudaDisplay::write(&sliceSize, "cusparseCreateSlicedEll", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(sellSliceOffsets), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &sellSliceOffsets,
        "cusparseCreateSlicedEll",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(sellColInd), ": ").as_bytes())?;
    crate::CudaDisplay::write(&sellColInd, "cusparseCreateSlicedEll", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(sellValues), ": ").as_bytes())?;
    crate::CudaDisplay::write(&sellValues, "cusparseCreateSlicedEll", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(sellSliceOffsetsType), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &sellSliceOffsetsType,
        "cusparseCreateSlicedEll",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(sellColIndType), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &sellColIndType,
        "cusparseCreateSlicedEll",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(idxBase), ": ").as_bytes())?;
    crate::CudaDisplay::write(&idxBase, "cusparseCreateSlicedEll", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(valueType), ": ").as_bytes())?;
    crate::CudaDisplay::write(&valueType, "cusparseCreateSlicedEll", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseCreateConstSlicedEll(
    writer: &mut (impl std::io::Write + ?Sized),
    spMatDescr: *mut cuda_types::cusparse::cusparseConstSpMatDescr_t,
    rows: i64,
    cols: i64,
    nnz: i64,
    sellValuesSize: i64,
    sliceSize: i64,
    sellSliceOffsets: *const ::core::ffi::c_void,
    sellColInd: *const ::core::ffi::c_void,
    sellValues: *const ::core::ffi::c_void,
    sellSliceOffsetsType: cuda_types::cusparse::cusparseIndexType_t,
    sellColIndType: cuda_types::cusparse::cusparseIndexType_t,
    idxBase: cuda_types::cusparse::cusparseIndexBase_t,
    valueType: cuda_types::cusparse::cudaDataType,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(spMatDescr), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &spMatDescr,
        "cusparseCreateConstSlicedEll",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(rows), ": ").as_bytes())?;
    crate::CudaDisplay::write(&rows, "cusparseCreateConstSlicedEll", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(cols), ": ").as_bytes())?;
    crate::CudaDisplay::write(&cols, "cusparseCreateConstSlicedEll", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(nnz), ": ").as_bytes())?;
    crate::CudaDisplay::write(&nnz, "cusparseCreateConstSlicedEll", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(sellValuesSize), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &sellValuesSize,
        "cusparseCreateConstSlicedEll",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(sliceSize), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &sliceSize,
        "cusparseCreateConstSlicedEll",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(sellSliceOffsets), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &sellSliceOffsets,
        "cusparseCreateConstSlicedEll",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(sellColInd), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &sellColInd,
        "cusparseCreateConstSlicedEll",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(sellValues), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &sellValues,
        "cusparseCreateConstSlicedEll",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(sellSliceOffsetsType), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &sellSliceOffsetsType,
        "cusparseCreateConstSlicedEll",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(sellColIndType), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &sellColIndType,
        "cusparseCreateConstSlicedEll",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(idxBase), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &idxBase,
        "cusparseCreateConstSlicedEll",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(valueType), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &valueType,
        "cusparseCreateConstSlicedEll",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseCreateDnMat(
    writer: &mut (impl std::io::Write + ?Sized),
    dnMatDescr: *mut cuda_types::cusparse::cusparseDnMatDescr_t,
    rows: i64,
    cols: i64,
    ld: i64,
    values: *mut ::core::ffi::c_void,
    valueType: cuda_types::cusparse::cudaDataType,
    order: cuda_types::cusparse::cusparseOrder_t,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(dnMatDescr), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dnMatDescr, "cusparseCreateDnMat", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(rows), ": ").as_bytes())?;
    crate::CudaDisplay::write(&rows, "cusparseCreateDnMat", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(cols), ": ").as_bytes())?;
    crate::CudaDisplay::write(&cols, "cusparseCreateDnMat", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ld), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ld, "cusparseCreateDnMat", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(values), ": ").as_bytes())?;
    crate::CudaDisplay::write(&values, "cusparseCreateDnMat", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(valueType), ": ").as_bytes())?;
    crate::CudaDisplay::write(&valueType, "cusparseCreateDnMat", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(order), ": ").as_bytes())?;
    crate::CudaDisplay::write(&order, "cusparseCreateDnMat", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseCreateConstDnMat(
    writer: &mut (impl std::io::Write + ?Sized),
    dnMatDescr: *mut cuda_types::cusparse::cusparseConstDnMatDescr_t,
    rows: i64,
    cols: i64,
    ld: i64,
    values: *const ::core::ffi::c_void,
    valueType: cuda_types::cusparse::cudaDataType,
    order: cuda_types::cusparse::cusparseOrder_t,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(dnMatDescr), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dnMatDescr, "cusparseCreateConstDnMat", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(rows), ": ").as_bytes())?;
    crate::CudaDisplay::write(&rows, "cusparseCreateConstDnMat", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(cols), ": ").as_bytes())?;
    crate::CudaDisplay::write(&cols, "cusparseCreateConstDnMat", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ld), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ld, "cusparseCreateConstDnMat", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(values), ": ").as_bytes())?;
    crate::CudaDisplay::write(&values, "cusparseCreateConstDnMat", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(valueType), ": ").as_bytes())?;
    crate::CudaDisplay::write(&valueType, "cusparseCreateConstDnMat", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(order), ": ").as_bytes())?;
    crate::CudaDisplay::write(&order, "cusparseCreateConstDnMat", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseDestroyDnMat(
    writer: &mut (impl std::io::Write + ?Sized),
    dnMatDescr: cuda_types::cusparse::cusparseConstDnMatDescr_t,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(dnMatDescr), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dnMatDescr, "cusparseDestroyDnMat", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseDnMatGet(
    writer: &mut (impl std::io::Write + ?Sized),
    dnMatDescr: cuda_types::cusparse::cusparseDnMatDescr_t,
    rows: *mut i64,
    cols: *mut i64,
    ld: *mut i64,
    values: *mut *mut ::core::ffi::c_void,
    type_: *mut cuda_types::cusparse::cudaDataType,
    order: *mut cuda_types::cusparse::cusparseOrder_t,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(dnMatDescr), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dnMatDescr, "cusparseDnMatGet", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(rows), ": ").as_bytes())?;
    crate::CudaDisplay::write(&rows, "cusparseDnMatGet", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(cols), ": ").as_bytes())?;
    crate::CudaDisplay::write(&cols, "cusparseDnMatGet", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ld), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ld, "cusparseDnMatGet", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(values), ": ").as_bytes())?;
    crate::CudaDisplay::write(&values, "cusparseDnMatGet", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(type_), ": ").as_bytes())?;
    crate::CudaDisplay::write(&type_, "cusparseDnMatGet", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(order), ": ").as_bytes())?;
    crate::CudaDisplay::write(&order, "cusparseDnMatGet", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseConstDnMatGet(
    writer: &mut (impl std::io::Write + ?Sized),
    dnMatDescr: cuda_types::cusparse::cusparseConstDnMatDescr_t,
    rows: *mut i64,
    cols: *mut i64,
    ld: *mut i64,
    values: *mut *const ::core::ffi::c_void,
    type_: *mut cuda_types::cusparse::cudaDataType,
    order: *mut cuda_types::cusparse::cusparseOrder_t,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(dnMatDescr), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dnMatDescr, "cusparseConstDnMatGet", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(rows), ": ").as_bytes())?;
    crate::CudaDisplay::write(&rows, "cusparseConstDnMatGet", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(cols), ": ").as_bytes())?;
    crate::CudaDisplay::write(&cols, "cusparseConstDnMatGet", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(ld), ": ").as_bytes())?;
    crate::CudaDisplay::write(&ld, "cusparseConstDnMatGet", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(values), ": ").as_bytes())?;
    crate::CudaDisplay::write(&values, "cusparseConstDnMatGet", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(type_), ": ").as_bytes())?;
    crate::CudaDisplay::write(&type_, "cusparseConstDnMatGet", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(order), ": ").as_bytes())?;
    crate::CudaDisplay::write(&order, "cusparseConstDnMatGet", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseDnMatGetValues(
    writer: &mut (impl std::io::Write + ?Sized),
    dnMatDescr: cuda_types::cusparse::cusparseDnMatDescr_t,
    values: *mut *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(dnMatDescr), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dnMatDescr, "cusparseDnMatGetValues", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(values), ": ").as_bytes())?;
    crate::CudaDisplay::write(&values, "cusparseDnMatGetValues", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseConstDnMatGetValues(
    writer: &mut (impl std::io::Write + ?Sized),
    dnMatDescr: cuda_types::cusparse::cusparseConstDnMatDescr_t,
    values: *mut *const ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(dnMatDescr), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &dnMatDescr,
        "cusparseConstDnMatGetValues",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(values), ": ").as_bytes())?;
    crate::CudaDisplay::write(&values, "cusparseConstDnMatGetValues", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseDnMatSetValues(
    writer: &mut (impl std::io::Write + ?Sized),
    dnMatDescr: cuda_types::cusparse::cusparseDnMatDescr_t,
    values: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(dnMatDescr), ": ").as_bytes())?;
    crate::CudaDisplay::write(&dnMatDescr, "cusparseDnMatSetValues", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(values), ": ").as_bytes())?;
    crate::CudaDisplay::write(&values, "cusparseDnMatSetValues", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseDnMatSetStridedBatch(
    writer: &mut (impl std::io::Write + ?Sized),
    dnMatDescr: cuda_types::cusparse::cusparseDnMatDescr_t,
    batchCount: ::core::ffi::c_int,
    batchStride: i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(dnMatDescr), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &dnMatDescr,
        "cusparseDnMatSetStridedBatch",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(batchCount), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &batchCount,
        "cusparseDnMatSetStridedBatch",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(batchStride), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &batchStride,
        "cusparseDnMatSetStridedBatch",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseDnMatGetStridedBatch(
    writer: &mut (impl std::io::Write + ?Sized),
    dnMatDescr: cuda_types::cusparse::cusparseConstDnMatDescr_t,
    batchCount: *mut ::core::ffi::c_int,
    batchStride: *mut i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(dnMatDescr), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &dnMatDescr,
        "cusparseDnMatGetStridedBatch",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(batchCount), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &batchCount,
        "cusparseDnMatGetStridedBatch",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(batchStride), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &batchStride,
        "cusparseDnMatGetStridedBatch",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseAxpby(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    alpha: *const ::core::ffi::c_void,
    vecX: cuda_types::cusparse::cusparseConstSpVecDescr_t,
    beta: *const ::core::ffi::c_void,
    vecY: cuda_types::cusparse::cusparseDnVecDescr_t,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseAxpby", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cusparseAxpby", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(vecX), ": ").as_bytes())?;
    crate::CudaDisplay::write(&vecX, "cusparseAxpby", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cusparseAxpby", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(vecY), ": ").as_bytes())?;
    crate::CudaDisplay::write(&vecY, "cusparseAxpby", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseGather(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    vecY: cuda_types::cusparse::cusparseConstDnVecDescr_t,
    vecX: cuda_types::cusparse::cusparseSpVecDescr_t,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseGather", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(vecY), ": ").as_bytes())?;
    crate::CudaDisplay::write(&vecY, "cusparseGather", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(vecX), ": ").as_bytes())?;
    crate::CudaDisplay::write(&vecX, "cusparseGather", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseScatter(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    vecX: cuda_types::cusparse::cusparseConstSpVecDescr_t,
    vecY: cuda_types::cusparse::cusparseDnVecDescr_t,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseScatter", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(vecX), ": ").as_bytes())?;
    crate::CudaDisplay::write(&vecX, "cusparseScatter", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(vecY), ": ").as_bytes())?;
    crate::CudaDisplay::write(&vecY, "cusparseScatter", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseRot(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    c_coeff: *const ::core::ffi::c_void,
    s_coeff: *const ::core::ffi::c_void,
    vecX: cuda_types::cusparse::cusparseSpVecDescr_t,
    vecY: cuda_types::cusparse::cusparseDnVecDescr_t,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseRot", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(c_coeff), ": ").as_bytes())?;
    crate::CudaDisplay::write(&c_coeff, "cusparseRot", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(s_coeff), ": ").as_bytes())?;
    crate::CudaDisplay::write(&s_coeff, "cusparseRot", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(vecX), ": ").as_bytes())?;
    crate::CudaDisplay::write(&vecX, "cusparseRot", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(vecY), ": ").as_bytes())?;
    crate::CudaDisplay::write(&vecY, "cusparseRot", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseSpVV_bufferSize(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    opX: cuda_types::cusparse::cusparseOperation_t,
    vecX: cuda_types::cusparse::cusparseConstSpVecDescr_t,
    vecY: cuda_types::cusparse::cusparseConstDnVecDescr_t,
    result: *const ::core::ffi::c_void,
    computeType: cuda_types::cusparse::cudaDataType,
    bufferSize: *mut usize,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseSpVV_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(opX), ": ").as_bytes())?;
    crate::CudaDisplay::write(&opX, "cusparseSpVV_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(vecX), ": ").as_bytes())?;
    crate::CudaDisplay::write(&vecX, "cusparseSpVV_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(vecY), ": ").as_bytes())?;
    crate::CudaDisplay::write(&vecY, "cusparseSpVV_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(result), ": ").as_bytes())?;
    crate::CudaDisplay::write(&result, "cusparseSpVV_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(computeType), ": ").as_bytes())?;
    crate::CudaDisplay::write(&computeType, "cusparseSpVV_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bufferSize), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bufferSize, "cusparseSpVV_bufferSize", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseSpVV(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    opX: cuda_types::cusparse::cusparseOperation_t,
    vecX: cuda_types::cusparse::cusparseConstSpVecDescr_t,
    vecY: cuda_types::cusparse::cusparseConstDnVecDescr_t,
    result: *mut ::core::ffi::c_void,
    computeType: cuda_types::cusparse::cudaDataType,
    externalBuffer: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseSpVV", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(opX), ": ").as_bytes())?;
    crate::CudaDisplay::write(&opX, "cusparseSpVV", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(vecX), ": ").as_bytes())?;
    crate::CudaDisplay::write(&vecX, "cusparseSpVV", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(vecY), ": ").as_bytes())?;
    crate::CudaDisplay::write(&vecY, "cusparseSpVV", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(result), ": ").as_bytes())?;
    crate::CudaDisplay::write(&result, "cusparseSpVV", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(computeType), ": ").as_bytes())?;
    crate::CudaDisplay::write(&computeType, "cusparseSpVV", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(externalBuffer), ": ").as_bytes())?;
    crate::CudaDisplay::write(&externalBuffer, "cusparseSpVV", arg_idx, writer)?;
    writer.write_all(b")")
}
impl crate::CudaDisplay for cuda_types::cusparse::cusparseSparseToDenseAlg_t {
    fn write(
        &self,
        _fn_name: &'static str,
        _index: usize,
        writer: &mut (impl std::io::Write + ?Sized),
    ) -> std::io::Result<()> {
        match self {
            &cuda_types::cusparse::cusparseSparseToDenseAlg_t::CUSPARSE_SPARSETODENSE_ALG_DEFAULT => {
                writer
                    .write_all(stringify!(CUSPARSE_SPARSETODENSE_ALG_DEFAULT).as_bytes())
            }
            _ => write!(writer, "{}", self.0),
        }
    }
}
pub fn write_cusparseSparseToDense_bufferSize(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    matA: cuda_types::cusparse::cusparseConstSpMatDescr_t,
    matB: cuda_types::cusparse::cusparseDnMatDescr_t,
    alg: cuda_types::cusparse::cusparseSparseToDenseAlg_t,
    bufferSize: *mut usize,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &handle,
        "cusparseSparseToDense_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(matA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &matA,
        "cusparseSparseToDense_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(matB), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &matB,
        "cusparseSparseToDense_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alg), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &alg,
        "cusparseSparseToDense_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bufferSize), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bufferSize,
        "cusparseSparseToDense_bufferSize",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseSparseToDense(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    matA: cuda_types::cusparse::cusparseConstSpMatDescr_t,
    matB: cuda_types::cusparse::cusparseDnMatDescr_t,
    alg: cuda_types::cusparse::cusparseSparseToDenseAlg_t,
    externalBuffer: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseSparseToDense", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(matA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&matA, "cusparseSparseToDense", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(matB), ": ").as_bytes())?;
    crate::CudaDisplay::write(&matB, "cusparseSparseToDense", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alg), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alg, "cusparseSparseToDense", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(externalBuffer), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &externalBuffer,
        "cusparseSparseToDense",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
impl crate::CudaDisplay for cuda_types::cusparse::cusparseDenseToSparseAlg_t {
    fn write(
        &self,
        _fn_name: &'static str,
        _index: usize,
        writer: &mut (impl std::io::Write + ?Sized),
    ) -> std::io::Result<()> {
        match self {
            &cuda_types::cusparse::cusparseDenseToSparseAlg_t::CUSPARSE_DENSETOSPARSE_ALG_DEFAULT => {
                writer
                    .write_all(stringify!(CUSPARSE_DENSETOSPARSE_ALG_DEFAULT).as_bytes())
            }
            _ => write!(writer, "{}", self.0),
        }
    }
}
pub fn write_cusparseDenseToSparse_bufferSize(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    matA: cuda_types::cusparse::cusparseConstDnMatDescr_t,
    matB: cuda_types::cusparse::cusparseSpMatDescr_t,
    alg: cuda_types::cusparse::cusparseDenseToSparseAlg_t,
    bufferSize: *mut usize,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &handle,
        "cusparseDenseToSparse_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(matA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &matA,
        "cusparseDenseToSparse_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(matB), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &matB,
        "cusparseDenseToSparse_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alg), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &alg,
        "cusparseDenseToSparse_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bufferSize), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bufferSize,
        "cusparseDenseToSparse_bufferSize",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseDenseToSparse_analysis(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    matA: cuda_types::cusparse::cusparseConstDnMatDescr_t,
    matB: cuda_types::cusparse::cusparseSpMatDescr_t,
    alg: cuda_types::cusparse::cusparseDenseToSparseAlg_t,
    externalBuffer: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &handle,
        "cusparseDenseToSparse_analysis",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(matA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&matA, "cusparseDenseToSparse_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(matB), ": ").as_bytes())?;
    crate::CudaDisplay::write(&matB, "cusparseDenseToSparse_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alg), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alg, "cusparseDenseToSparse_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(externalBuffer), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &externalBuffer,
        "cusparseDenseToSparse_analysis",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseDenseToSparse_convert(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    matA: cuda_types::cusparse::cusparseConstDnMatDescr_t,
    matB: cuda_types::cusparse::cusparseSpMatDescr_t,
    alg: cuda_types::cusparse::cusparseDenseToSparseAlg_t,
    externalBuffer: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &handle,
        "cusparseDenseToSparse_convert",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(matA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&matA, "cusparseDenseToSparse_convert", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(matB), ": ").as_bytes())?;
    crate::CudaDisplay::write(&matB, "cusparseDenseToSparse_convert", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alg), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alg, "cusparseDenseToSparse_convert", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(externalBuffer), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &externalBuffer,
        "cusparseDenseToSparse_convert",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
impl crate::CudaDisplay for cuda_types::cusparse::cusparseSpMVAlg_t {
    fn write(
        &self,
        _fn_name: &'static str,
        _index: usize,
        writer: &mut (impl std::io::Write + ?Sized),
    ) -> std::io::Result<()> {
        match self {
            &cuda_types::cusparse::cusparseSpMVAlg_t::CUSPARSE_SPMV_ALG_DEFAULT => {
                writer.write_all(stringify!(CUSPARSE_SPMV_ALG_DEFAULT).as_bytes())
            }
            &cuda_types::cusparse::cusparseSpMVAlg_t::CUSPARSE_SPMV_CSR_ALG1 => {
                writer.write_all(stringify!(CUSPARSE_SPMV_CSR_ALG1).as_bytes())
            }
            &cuda_types::cusparse::cusparseSpMVAlg_t::CUSPARSE_SPMV_CSR_ALG2 => {
                writer.write_all(stringify!(CUSPARSE_SPMV_CSR_ALG2).as_bytes())
            }
            &cuda_types::cusparse::cusparseSpMVAlg_t::CUSPARSE_SPMV_COO_ALG1 => {
                writer.write_all(stringify!(CUSPARSE_SPMV_COO_ALG1).as_bytes())
            }
            &cuda_types::cusparse::cusparseSpMVAlg_t::CUSPARSE_SPMV_COO_ALG2 => {
                writer.write_all(stringify!(CUSPARSE_SPMV_COO_ALG2).as_bytes())
            }
            &cuda_types::cusparse::cusparseSpMVAlg_t::CUSPARSE_SPMV_SELL_ALG1 => {
                writer.write_all(stringify!(CUSPARSE_SPMV_SELL_ALG1).as_bytes())
            }
            _ => write!(writer, "{}", self.0),
        }
    }
}
pub fn write_cusparseSpMV(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    opA: cuda_types::cusparse::cusparseOperation_t,
    alpha: *const ::core::ffi::c_void,
    matA: cuda_types::cusparse::cusparseConstSpMatDescr_t,
    vecX: cuda_types::cusparse::cusparseConstDnVecDescr_t,
    beta: *const ::core::ffi::c_void,
    vecY: cuda_types::cusparse::cusparseDnVecDescr_t,
    computeType: cuda_types::cusparse::cudaDataType,
    alg: cuda_types::cusparse::cusparseSpMVAlg_t,
    externalBuffer: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseSpMV", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(opA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&opA, "cusparseSpMV", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cusparseSpMV", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(matA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&matA, "cusparseSpMV", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(vecX), ": ").as_bytes())?;
    crate::CudaDisplay::write(&vecX, "cusparseSpMV", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cusparseSpMV", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(vecY), ": ").as_bytes())?;
    crate::CudaDisplay::write(&vecY, "cusparseSpMV", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(computeType), ": ").as_bytes())?;
    crate::CudaDisplay::write(&computeType, "cusparseSpMV", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alg), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alg, "cusparseSpMV", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(externalBuffer), ": ").as_bytes())?;
    crate::CudaDisplay::write(&externalBuffer, "cusparseSpMV", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseSpMV_bufferSize(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    opA: cuda_types::cusparse::cusparseOperation_t,
    alpha: *const ::core::ffi::c_void,
    matA: cuda_types::cusparse::cusparseConstSpMatDescr_t,
    vecX: cuda_types::cusparse::cusparseConstDnVecDescr_t,
    beta: *const ::core::ffi::c_void,
    vecY: cuda_types::cusparse::cusparseDnVecDescr_t,
    computeType: cuda_types::cusparse::cudaDataType,
    alg: cuda_types::cusparse::cusparseSpMVAlg_t,
    bufferSize: *mut usize,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseSpMV_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(opA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&opA, "cusparseSpMV_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cusparseSpMV_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(matA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&matA, "cusparseSpMV_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(vecX), ": ").as_bytes())?;
    crate::CudaDisplay::write(&vecX, "cusparseSpMV_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cusparseSpMV_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(vecY), ": ").as_bytes())?;
    crate::CudaDisplay::write(&vecY, "cusparseSpMV_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(computeType), ": ").as_bytes())?;
    crate::CudaDisplay::write(&computeType, "cusparseSpMV_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alg), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alg, "cusparseSpMV_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bufferSize), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bufferSize, "cusparseSpMV_bufferSize", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseSpMV_preprocess(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    opA: cuda_types::cusparse::cusparseOperation_t,
    alpha: *const ::core::ffi::c_void,
    matA: cuda_types::cusparse::cusparseConstSpMatDescr_t,
    vecX: cuda_types::cusparse::cusparseConstDnVecDescr_t,
    beta: *const ::core::ffi::c_void,
    vecY: cuda_types::cusparse::cusparseDnVecDescr_t,
    computeType: cuda_types::cusparse::cudaDataType,
    alg: cuda_types::cusparse::cusparseSpMVAlg_t,
    externalBuffer: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseSpMV_preprocess", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(opA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&opA, "cusparseSpMV_preprocess", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cusparseSpMV_preprocess", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(matA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&matA, "cusparseSpMV_preprocess", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(vecX), ": ").as_bytes())?;
    crate::CudaDisplay::write(&vecX, "cusparseSpMV_preprocess", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cusparseSpMV_preprocess", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(vecY), ": ").as_bytes())?;
    crate::CudaDisplay::write(&vecY, "cusparseSpMV_preprocess", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(computeType), ": ").as_bytes())?;
    crate::CudaDisplay::write(&computeType, "cusparseSpMV_preprocess", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alg), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alg, "cusparseSpMV_preprocess", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(externalBuffer), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &externalBuffer,
        "cusparseSpMV_preprocess",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
impl crate::CudaDisplay for cuda_types::cusparse::cusparseSpSVAlg_t {
    fn write(
        &self,
        _fn_name: &'static str,
        _index: usize,
        writer: &mut (impl std::io::Write + ?Sized),
    ) -> std::io::Result<()> {
        match self {
            &cuda_types::cusparse::cusparseSpSVAlg_t::CUSPARSE_SPSV_ALG_DEFAULT => {
                writer.write_all(stringify!(CUSPARSE_SPSV_ALG_DEFAULT).as_bytes())
            }
            _ => write!(writer, "{}", self.0),
        }
    }
}
impl crate::CudaDisplay for cuda_types::cusparse::cusparseSpSVUpdate_t {
    fn write(
        &self,
        _fn_name: &'static str,
        _index: usize,
        writer: &mut (impl std::io::Write + ?Sized),
    ) -> std::io::Result<()> {
        match self {
            &cuda_types::cusparse::cusparseSpSVUpdate_t::CUSPARSE_SPSV_UPDATE_GENERAL => {
                writer.write_all(stringify!(CUSPARSE_SPSV_UPDATE_GENERAL).as_bytes())
            }
            &cuda_types::cusparse::cusparseSpSVUpdate_t::CUSPARSE_SPSV_UPDATE_DIAGONAL => {
                writer.write_all(stringify!(CUSPARSE_SPSV_UPDATE_DIAGONAL).as_bytes())
            }
            _ => write!(writer, "{}", self.0),
        }
    }
}
impl crate::CudaDisplay for cuda_types::cusparse::cusparseSpSVDescr_t {
    fn write(
        &self,
        _fn_name: &'static str,
        _index: usize,
        writer: &mut (impl std::io::Write + ?Sized),
    ) -> std::io::Result<()> {
        if self.is_null() {
            writer.write_all(b"NULL")
        } else {
            write!(writer, "{:p}", *self)
        }
    }
}
pub fn write_cusparseSpSV_createDescr(
    writer: &mut (impl std::io::Write + ?Sized),
    descr: *mut cuda_types::cusparse::cusparseSpSVDescr_t,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(descr), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descr, "cusparseSpSV_createDescr", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseSpSV_destroyDescr(
    writer: &mut (impl std::io::Write + ?Sized),
    descr: cuda_types::cusparse::cusparseSpSVDescr_t,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(descr), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descr, "cusparseSpSV_destroyDescr", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseSpSV_bufferSize(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    opA: cuda_types::cusparse::cusparseOperation_t,
    alpha: *const ::core::ffi::c_void,
    matA: cuda_types::cusparse::cusparseConstSpMatDescr_t,
    vecX: cuda_types::cusparse::cusparseConstDnVecDescr_t,
    vecY: cuda_types::cusparse::cusparseDnVecDescr_t,
    computeType: cuda_types::cusparse::cudaDataType,
    alg: cuda_types::cusparse::cusparseSpSVAlg_t,
    spsvDescr: cuda_types::cusparse::cusparseSpSVDescr_t,
    bufferSize: *mut usize,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseSpSV_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(opA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&opA, "cusparseSpSV_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cusparseSpSV_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(matA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&matA, "cusparseSpSV_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(vecX), ": ").as_bytes())?;
    crate::CudaDisplay::write(&vecX, "cusparseSpSV_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(vecY), ": ").as_bytes())?;
    crate::CudaDisplay::write(&vecY, "cusparseSpSV_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(computeType), ": ").as_bytes())?;
    crate::CudaDisplay::write(&computeType, "cusparseSpSV_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alg), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alg, "cusparseSpSV_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(spsvDescr), ": ").as_bytes())?;
    crate::CudaDisplay::write(&spsvDescr, "cusparseSpSV_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bufferSize), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bufferSize, "cusparseSpSV_bufferSize", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseSpSV_analysis(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    opA: cuda_types::cusparse::cusparseOperation_t,
    alpha: *const ::core::ffi::c_void,
    matA: cuda_types::cusparse::cusparseConstSpMatDescr_t,
    vecX: cuda_types::cusparse::cusparseConstDnVecDescr_t,
    vecY: cuda_types::cusparse::cusparseDnVecDescr_t,
    computeType: cuda_types::cusparse::cudaDataType,
    alg: cuda_types::cusparse::cusparseSpSVAlg_t,
    spsvDescr: cuda_types::cusparse::cusparseSpSVDescr_t,
    externalBuffer: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseSpSV_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(opA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&opA, "cusparseSpSV_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cusparseSpSV_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(matA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&matA, "cusparseSpSV_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(vecX), ": ").as_bytes())?;
    crate::CudaDisplay::write(&vecX, "cusparseSpSV_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(vecY), ": ").as_bytes())?;
    crate::CudaDisplay::write(&vecY, "cusparseSpSV_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(computeType), ": ").as_bytes())?;
    crate::CudaDisplay::write(&computeType, "cusparseSpSV_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alg), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alg, "cusparseSpSV_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(spsvDescr), ": ").as_bytes())?;
    crate::CudaDisplay::write(&spsvDescr, "cusparseSpSV_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(externalBuffer), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &externalBuffer,
        "cusparseSpSV_analysis",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseSpSV_solve(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    opA: cuda_types::cusparse::cusparseOperation_t,
    alpha: *const ::core::ffi::c_void,
    matA: cuda_types::cusparse::cusparseConstSpMatDescr_t,
    vecX: cuda_types::cusparse::cusparseConstDnVecDescr_t,
    vecY: cuda_types::cusparse::cusparseDnVecDescr_t,
    computeType: cuda_types::cusparse::cudaDataType,
    alg: cuda_types::cusparse::cusparseSpSVAlg_t,
    spsvDescr: cuda_types::cusparse::cusparseSpSVDescr_t,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseSpSV_solve", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(opA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&opA, "cusparseSpSV_solve", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cusparseSpSV_solve", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(matA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&matA, "cusparseSpSV_solve", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(vecX), ": ").as_bytes())?;
    crate::CudaDisplay::write(&vecX, "cusparseSpSV_solve", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(vecY), ": ").as_bytes())?;
    crate::CudaDisplay::write(&vecY, "cusparseSpSV_solve", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(computeType), ": ").as_bytes())?;
    crate::CudaDisplay::write(&computeType, "cusparseSpSV_solve", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alg), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alg, "cusparseSpSV_solve", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(spsvDescr), ": ").as_bytes())?;
    crate::CudaDisplay::write(&spsvDescr, "cusparseSpSV_solve", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseSpSV_updateMatrix(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    spsvDescr: cuda_types::cusparse::cusparseSpSVDescr_t,
    newValues: *mut ::core::ffi::c_void,
    updatePart: cuda_types::cusparse::cusparseSpSVUpdate_t,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseSpSV_updateMatrix", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(spsvDescr), ": ").as_bytes())?;
    crate::CudaDisplay::write(&spsvDescr, "cusparseSpSV_updateMatrix", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(newValues), ": ").as_bytes())?;
    crate::CudaDisplay::write(&newValues, "cusparseSpSV_updateMatrix", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(updatePart), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &updatePart,
        "cusparseSpSV_updateMatrix",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
impl crate::CudaDisplay for cuda_types::cusparse::cusparseSpSMAlg_t {
    fn write(
        &self,
        _fn_name: &'static str,
        _index: usize,
        writer: &mut (impl std::io::Write + ?Sized),
    ) -> std::io::Result<()> {
        match self {
            &cuda_types::cusparse::cusparseSpSMAlg_t::CUSPARSE_SPSM_ALG_DEFAULT => {
                writer.write_all(stringify!(CUSPARSE_SPSM_ALG_DEFAULT).as_bytes())
            }
            _ => write!(writer, "{}", self.0),
        }
    }
}
impl crate::CudaDisplay for cuda_types::cusparse::cusparseSpSMUpdate_t {
    fn write(
        &self,
        _fn_name: &'static str,
        _index: usize,
        writer: &mut (impl std::io::Write + ?Sized),
    ) -> std::io::Result<()> {
        match self {
            &cuda_types::cusparse::cusparseSpSMUpdate_t::CUSPARSE_SPSM_UPDATE_GENERAL => {
                writer.write_all(stringify!(CUSPARSE_SPSM_UPDATE_GENERAL).as_bytes())
            }
            &cuda_types::cusparse::cusparseSpSMUpdate_t::CUSPARSE_SPSM_UPDATE_DIAGONAL => {
                writer.write_all(stringify!(CUSPARSE_SPSM_UPDATE_DIAGONAL).as_bytes())
            }
            _ => write!(writer, "{}", self.0),
        }
    }
}
impl crate::CudaDisplay for cuda_types::cusparse::cusparseSpSMDescr_t {
    fn write(
        &self,
        _fn_name: &'static str,
        _index: usize,
        writer: &mut (impl std::io::Write + ?Sized),
    ) -> std::io::Result<()> {
        if self.is_null() {
            writer.write_all(b"NULL")
        } else {
            write!(writer, "{:p}", *self)
        }
    }
}
pub fn write_cusparseSpSM_createDescr(
    writer: &mut (impl std::io::Write + ?Sized),
    descr: *mut cuda_types::cusparse::cusparseSpSMDescr_t,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(descr), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descr, "cusparseSpSM_createDescr", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseSpSM_destroyDescr(
    writer: &mut (impl std::io::Write + ?Sized),
    descr: cuda_types::cusparse::cusparseSpSMDescr_t,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(descr), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descr, "cusparseSpSM_destroyDescr", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseSpSM_bufferSize(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    opA: cuda_types::cusparse::cusparseOperation_t,
    opB: cuda_types::cusparse::cusparseOperation_t,
    alpha: *const ::core::ffi::c_void,
    matA: cuda_types::cusparse::cusparseConstSpMatDescr_t,
    matB: cuda_types::cusparse::cusparseConstDnMatDescr_t,
    matC: cuda_types::cusparse::cusparseDnMatDescr_t,
    computeType: cuda_types::cusparse::cudaDataType,
    alg: cuda_types::cusparse::cusparseSpSMAlg_t,
    spsmDescr: cuda_types::cusparse::cusparseSpSMDescr_t,
    bufferSize: *mut usize,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseSpSM_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(opA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&opA, "cusparseSpSM_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(opB), ": ").as_bytes())?;
    crate::CudaDisplay::write(&opB, "cusparseSpSM_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cusparseSpSM_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(matA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&matA, "cusparseSpSM_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(matB), ": ").as_bytes())?;
    crate::CudaDisplay::write(&matB, "cusparseSpSM_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(matC), ": ").as_bytes())?;
    crate::CudaDisplay::write(&matC, "cusparseSpSM_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(computeType), ": ").as_bytes())?;
    crate::CudaDisplay::write(&computeType, "cusparseSpSM_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alg), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alg, "cusparseSpSM_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(spsmDescr), ": ").as_bytes())?;
    crate::CudaDisplay::write(&spsmDescr, "cusparseSpSM_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bufferSize), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bufferSize, "cusparseSpSM_bufferSize", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseSpSM_analysis(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    opA: cuda_types::cusparse::cusparseOperation_t,
    opB: cuda_types::cusparse::cusparseOperation_t,
    alpha: *const ::core::ffi::c_void,
    matA: cuda_types::cusparse::cusparseConstSpMatDescr_t,
    matB: cuda_types::cusparse::cusparseConstDnMatDescr_t,
    matC: cuda_types::cusparse::cusparseDnMatDescr_t,
    computeType: cuda_types::cusparse::cudaDataType,
    alg: cuda_types::cusparse::cusparseSpSMAlg_t,
    spsmDescr: cuda_types::cusparse::cusparseSpSMDescr_t,
    externalBuffer: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseSpSM_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(opA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&opA, "cusparseSpSM_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(opB), ": ").as_bytes())?;
    crate::CudaDisplay::write(&opB, "cusparseSpSM_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cusparseSpSM_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(matA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&matA, "cusparseSpSM_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(matB), ": ").as_bytes())?;
    crate::CudaDisplay::write(&matB, "cusparseSpSM_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(matC), ": ").as_bytes())?;
    crate::CudaDisplay::write(&matC, "cusparseSpSM_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(computeType), ": ").as_bytes())?;
    crate::CudaDisplay::write(&computeType, "cusparseSpSM_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alg), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alg, "cusparseSpSM_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(spsmDescr), ": ").as_bytes())?;
    crate::CudaDisplay::write(&spsmDescr, "cusparseSpSM_analysis", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(externalBuffer), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &externalBuffer,
        "cusparseSpSM_analysis",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseSpSM_solve(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    opA: cuda_types::cusparse::cusparseOperation_t,
    opB: cuda_types::cusparse::cusparseOperation_t,
    alpha: *const ::core::ffi::c_void,
    matA: cuda_types::cusparse::cusparseConstSpMatDescr_t,
    matB: cuda_types::cusparse::cusparseConstDnMatDescr_t,
    matC: cuda_types::cusparse::cusparseDnMatDescr_t,
    computeType: cuda_types::cusparse::cudaDataType,
    alg: cuda_types::cusparse::cusparseSpSMAlg_t,
    spsmDescr: cuda_types::cusparse::cusparseSpSMDescr_t,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseSpSM_solve", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(opA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&opA, "cusparseSpSM_solve", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(opB), ": ").as_bytes())?;
    crate::CudaDisplay::write(&opB, "cusparseSpSM_solve", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cusparseSpSM_solve", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(matA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&matA, "cusparseSpSM_solve", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(matB), ": ").as_bytes())?;
    crate::CudaDisplay::write(&matB, "cusparseSpSM_solve", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(matC), ": ").as_bytes())?;
    crate::CudaDisplay::write(&matC, "cusparseSpSM_solve", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(computeType), ": ").as_bytes())?;
    crate::CudaDisplay::write(&computeType, "cusparseSpSM_solve", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alg), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alg, "cusparseSpSM_solve", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(spsmDescr), ": ").as_bytes())?;
    crate::CudaDisplay::write(&spsmDescr, "cusparseSpSM_solve", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseSpSM_updateMatrix(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    spsmDescr: cuda_types::cusparse::cusparseSpSMDescr_t,
    newValues: *mut ::core::ffi::c_void,
    updatePart: cuda_types::cusparse::cusparseSpSMUpdate_t,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseSpSM_updateMatrix", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(spsmDescr), ": ").as_bytes())?;
    crate::CudaDisplay::write(&spsmDescr, "cusparseSpSM_updateMatrix", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(newValues), ": ").as_bytes())?;
    crate::CudaDisplay::write(&newValues, "cusparseSpSM_updateMatrix", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(updatePart), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &updatePart,
        "cusparseSpSM_updateMatrix",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
impl crate::CudaDisplay for cuda_types::cusparse::cusparseSpMMAlg_t {
    fn write(
        &self,
        _fn_name: &'static str,
        _index: usize,
        writer: &mut (impl std::io::Write + ?Sized),
    ) -> std::io::Result<()> {
        match self {
            &cuda_types::cusparse::cusparseSpMMAlg_t::CUSPARSE_SPMM_ALG_DEFAULT => {
                writer.write_all(stringify!(CUSPARSE_SPMM_ALG_DEFAULT).as_bytes())
            }
            &cuda_types::cusparse::cusparseSpMMAlg_t::CUSPARSE_SPMM_COO_ALG1 => {
                writer.write_all(stringify!(CUSPARSE_SPMM_COO_ALG1).as_bytes())
            }
            &cuda_types::cusparse::cusparseSpMMAlg_t::CUSPARSE_SPMM_COO_ALG2 => {
                writer.write_all(stringify!(CUSPARSE_SPMM_COO_ALG2).as_bytes())
            }
            &cuda_types::cusparse::cusparseSpMMAlg_t::CUSPARSE_SPMM_COO_ALG3 => {
                writer.write_all(stringify!(CUSPARSE_SPMM_COO_ALG3).as_bytes())
            }
            &cuda_types::cusparse::cusparseSpMMAlg_t::CUSPARSE_SPMM_COO_ALG4 => {
                writer.write_all(stringify!(CUSPARSE_SPMM_COO_ALG4).as_bytes())
            }
            &cuda_types::cusparse::cusparseSpMMAlg_t::CUSPARSE_SPMM_CSR_ALG1 => {
                writer.write_all(stringify!(CUSPARSE_SPMM_CSR_ALG1).as_bytes())
            }
            &cuda_types::cusparse::cusparseSpMMAlg_t::CUSPARSE_SPMM_CSR_ALG2 => {
                writer.write_all(stringify!(CUSPARSE_SPMM_CSR_ALG2).as_bytes())
            }
            &cuda_types::cusparse::cusparseSpMMAlg_t::CUSPARSE_SPMM_CSR_ALG3 => {
                writer.write_all(stringify!(CUSPARSE_SPMM_CSR_ALG3).as_bytes())
            }
            &cuda_types::cusparse::cusparseSpMMAlg_t::CUSPARSE_SPMM_BLOCKED_ELL_ALG1 => {
                writer.write_all(stringify!(CUSPARSE_SPMM_BLOCKED_ELL_ALG1).as_bytes())
            }
            &cuda_types::cusparse::cusparseSpMMAlg_t::CUSPARSE_SPMM_BSR_ALG1 => {
                writer.write_all(stringify!(CUSPARSE_SPMM_BSR_ALG1).as_bytes())
            }
            _ => write!(writer, "{}", self.0),
        }
    }
}
pub fn write_cusparseSpMM_bufferSize(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    opA: cuda_types::cusparse::cusparseOperation_t,
    opB: cuda_types::cusparse::cusparseOperation_t,
    alpha: *const ::core::ffi::c_void,
    matA: cuda_types::cusparse::cusparseConstSpMatDescr_t,
    matB: cuda_types::cusparse::cusparseConstDnMatDescr_t,
    beta: *const ::core::ffi::c_void,
    matC: cuda_types::cusparse::cusparseDnMatDescr_t,
    computeType: cuda_types::cusparse::cudaDataType,
    alg: cuda_types::cusparse::cusparseSpMMAlg_t,
    bufferSize: *mut usize,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseSpMM_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(opA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&opA, "cusparseSpMM_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(opB), ": ").as_bytes())?;
    crate::CudaDisplay::write(&opB, "cusparseSpMM_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cusparseSpMM_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(matA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&matA, "cusparseSpMM_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(matB), ": ").as_bytes())?;
    crate::CudaDisplay::write(&matB, "cusparseSpMM_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cusparseSpMM_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(matC), ": ").as_bytes())?;
    crate::CudaDisplay::write(&matC, "cusparseSpMM_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(computeType), ": ").as_bytes())?;
    crate::CudaDisplay::write(&computeType, "cusparseSpMM_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alg), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alg, "cusparseSpMM_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bufferSize), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bufferSize, "cusparseSpMM_bufferSize", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseSpMM_preprocess(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    opA: cuda_types::cusparse::cusparseOperation_t,
    opB: cuda_types::cusparse::cusparseOperation_t,
    alpha: *const ::core::ffi::c_void,
    matA: cuda_types::cusparse::cusparseConstSpMatDescr_t,
    matB: cuda_types::cusparse::cusparseConstDnMatDescr_t,
    beta: *const ::core::ffi::c_void,
    matC: cuda_types::cusparse::cusparseDnMatDescr_t,
    computeType: cuda_types::cusparse::cudaDataType,
    alg: cuda_types::cusparse::cusparseSpMMAlg_t,
    externalBuffer: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseSpMM_preprocess", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(opA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&opA, "cusparseSpMM_preprocess", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(opB), ": ").as_bytes())?;
    crate::CudaDisplay::write(&opB, "cusparseSpMM_preprocess", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cusparseSpMM_preprocess", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(matA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&matA, "cusparseSpMM_preprocess", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(matB), ": ").as_bytes())?;
    crate::CudaDisplay::write(&matB, "cusparseSpMM_preprocess", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cusparseSpMM_preprocess", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(matC), ": ").as_bytes())?;
    crate::CudaDisplay::write(&matC, "cusparseSpMM_preprocess", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(computeType), ": ").as_bytes())?;
    crate::CudaDisplay::write(&computeType, "cusparseSpMM_preprocess", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alg), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alg, "cusparseSpMM_preprocess", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(externalBuffer), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &externalBuffer,
        "cusparseSpMM_preprocess",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseSpMM(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    opA: cuda_types::cusparse::cusparseOperation_t,
    opB: cuda_types::cusparse::cusparseOperation_t,
    alpha: *const ::core::ffi::c_void,
    matA: cuda_types::cusparse::cusparseConstSpMatDescr_t,
    matB: cuda_types::cusparse::cusparseConstDnMatDescr_t,
    beta: *const ::core::ffi::c_void,
    matC: cuda_types::cusparse::cusparseDnMatDescr_t,
    computeType: cuda_types::cusparse::cudaDataType,
    alg: cuda_types::cusparse::cusparseSpMMAlg_t,
    externalBuffer: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseSpMM", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(opA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&opA, "cusparseSpMM", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(opB), ": ").as_bytes())?;
    crate::CudaDisplay::write(&opB, "cusparseSpMM", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cusparseSpMM", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(matA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&matA, "cusparseSpMM", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(matB), ": ").as_bytes())?;
    crate::CudaDisplay::write(&matB, "cusparseSpMM", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cusparseSpMM", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(matC), ": ").as_bytes())?;
    crate::CudaDisplay::write(&matC, "cusparseSpMM", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(computeType), ": ").as_bytes())?;
    crate::CudaDisplay::write(&computeType, "cusparseSpMM", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alg), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alg, "cusparseSpMM", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(externalBuffer), ": ").as_bytes())?;
    crate::CudaDisplay::write(&externalBuffer, "cusparseSpMM", arg_idx, writer)?;
    writer.write_all(b")")
}
impl crate::CudaDisplay for cuda_types::cusparse::cusparseSpGEMMAlg_t {
    fn write(
        &self,
        _fn_name: &'static str,
        _index: usize,
        writer: &mut (impl std::io::Write + ?Sized),
    ) -> std::io::Result<()> {
        match self {
            &cuda_types::cusparse::cusparseSpGEMMAlg_t::CUSPARSE_SPGEMM_DEFAULT => {
                writer.write_all(stringify!(CUSPARSE_SPGEMM_DEFAULT).as_bytes())
            }
            &cuda_types::cusparse::cusparseSpGEMMAlg_t::CUSPARSE_SPGEMM_CSR_ALG_DETERMINITIC => {
                writer
                    .write_all(
                        stringify!(CUSPARSE_SPGEMM_CSR_ALG_DETERMINITIC).as_bytes(),
                    )
            }
            &cuda_types::cusparse::cusparseSpGEMMAlg_t::CUSPARSE_SPGEMM_CSR_ALG_NONDETERMINITIC => {
                writer
                    .write_all(
                        stringify!(CUSPARSE_SPGEMM_CSR_ALG_NONDETERMINITIC).as_bytes(),
                    )
            }
            &cuda_types::cusparse::cusparseSpGEMMAlg_t::CUSPARSE_SPGEMM_ALG1 => {
                writer.write_all(stringify!(CUSPARSE_SPGEMM_ALG1).as_bytes())
            }
            &cuda_types::cusparse::cusparseSpGEMMAlg_t::CUSPARSE_SPGEMM_ALG2 => {
                writer.write_all(stringify!(CUSPARSE_SPGEMM_ALG2).as_bytes())
            }
            &cuda_types::cusparse::cusparseSpGEMMAlg_t::CUSPARSE_SPGEMM_ALG3 => {
                writer.write_all(stringify!(CUSPARSE_SPGEMM_ALG3).as_bytes())
            }
            _ => write!(writer, "{}", self.0),
        }
    }
}
impl crate::CudaDisplay for cuda_types::cusparse::cusparseSpGEMMDescr_t {
    fn write(
        &self,
        _fn_name: &'static str,
        _index: usize,
        writer: &mut (impl std::io::Write + ?Sized),
    ) -> std::io::Result<()> {
        if self.is_null() {
            writer.write_all(b"NULL")
        } else {
            write!(writer, "{:p}", *self)
        }
    }
}
pub fn write_cusparseSpGEMM_createDescr(
    writer: &mut (impl std::io::Write + ?Sized),
    descr: *mut cuda_types::cusparse::cusparseSpGEMMDescr_t,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(descr), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descr, "cusparseSpGEMM_createDescr", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseSpGEMM_destroyDescr(
    writer: &mut (impl std::io::Write + ?Sized),
    descr: cuda_types::cusparse::cusparseSpGEMMDescr_t,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(descr), ": ").as_bytes())?;
    crate::CudaDisplay::write(&descr, "cusparseSpGEMM_destroyDescr", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseSpGEMM_workEstimation(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    opA: cuda_types::cusparse::cusparseOperation_t,
    opB: cuda_types::cusparse::cusparseOperation_t,
    alpha: *const ::core::ffi::c_void,
    matA: cuda_types::cusparse::cusparseConstSpMatDescr_t,
    matB: cuda_types::cusparse::cusparseConstSpMatDescr_t,
    beta: *const ::core::ffi::c_void,
    matC: cuda_types::cusparse::cusparseSpMatDescr_t,
    computeType: cuda_types::cusparse::cudaDataType,
    alg: cuda_types::cusparse::cusparseSpGEMMAlg_t,
    spgemmDescr: cuda_types::cusparse::cusparseSpGEMMDescr_t,
    bufferSize1: *mut usize,
    externalBuffer1: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &handle,
        "cusparseSpGEMM_workEstimation",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(opA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&opA, "cusparseSpGEMM_workEstimation", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(opB), ": ").as_bytes())?;
    crate::CudaDisplay::write(&opB, "cusparseSpGEMM_workEstimation", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cusparseSpGEMM_workEstimation", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(matA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&matA, "cusparseSpGEMM_workEstimation", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(matB), ": ").as_bytes())?;
    crate::CudaDisplay::write(&matB, "cusparseSpGEMM_workEstimation", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cusparseSpGEMM_workEstimation", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(matC), ": ").as_bytes())?;
    crate::CudaDisplay::write(&matC, "cusparseSpGEMM_workEstimation", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(computeType), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &computeType,
        "cusparseSpGEMM_workEstimation",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alg), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alg, "cusparseSpGEMM_workEstimation", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(spgemmDescr), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &spgemmDescr,
        "cusparseSpGEMM_workEstimation",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bufferSize1), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bufferSize1,
        "cusparseSpGEMM_workEstimation",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(externalBuffer1), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &externalBuffer1,
        "cusparseSpGEMM_workEstimation",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseSpGEMM_getNumProducts(
    writer: &mut (impl std::io::Write + ?Sized),
    spgemmDescr: cuda_types::cusparse::cusparseSpGEMMDescr_t,
    num_prods: *mut i64,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(spgemmDescr), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &spgemmDescr,
        "cusparseSpGEMM_getNumProducts",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(num_prods), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &num_prods,
        "cusparseSpGEMM_getNumProducts",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseSpGEMM_estimateMemory(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    opA: cuda_types::cusparse::cusparseOperation_t,
    opB: cuda_types::cusparse::cusparseOperation_t,
    alpha: *const ::core::ffi::c_void,
    matA: cuda_types::cusparse::cusparseConstSpMatDescr_t,
    matB: cuda_types::cusparse::cusparseConstSpMatDescr_t,
    beta: *const ::core::ffi::c_void,
    matC: cuda_types::cusparse::cusparseSpMatDescr_t,
    computeType: cuda_types::cusparse::cudaDataType,
    alg: cuda_types::cusparse::cusparseSpGEMMAlg_t,
    spgemmDescr: cuda_types::cusparse::cusparseSpGEMMDescr_t,
    chunk_fraction: f32,
    bufferSize3: *mut usize,
    externalBuffer3: *mut ::core::ffi::c_void,
    bufferSize2: *mut usize,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &handle,
        "cusparseSpGEMM_estimateMemory",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(opA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&opA, "cusparseSpGEMM_estimateMemory", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(opB), ": ").as_bytes())?;
    crate::CudaDisplay::write(&opB, "cusparseSpGEMM_estimateMemory", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cusparseSpGEMM_estimateMemory", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(matA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&matA, "cusparseSpGEMM_estimateMemory", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(matB), ": ").as_bytes())?;
    crate::CudaDisplay::write(&matB, "cusparseSpGEMM_estimateMemory", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cusparseSpGEMM_estimateMemory", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(matC), ": ").as_bytes())?;
    crate::CudaDisplay::write(&matC, "cusparseSpGEMM_estimateMemory", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(computeType), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &computeType,
        "cusparseSpGEMM_estimateMemory",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alg), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alg, "cusparseSpGEMM_estimateMemory", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(spgemmDescr), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &spgemmDescr,
        "cusparseSpGEMM_estimateMemory",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(chunk_fraction), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &chunk_fraction,
        "cusparseSpGEMM_estimateMemory",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bufferSize3), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bufferSize3,
        "cusparseSpGEMM_estimateMemory",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(externalBuffer3), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &externalBuffer3,
        "cusparseSpGEMM_estimateMemory",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bufferSize2), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bufferSize2,
        "cusparseSpGEMM_estimateMemory",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseSpGEMM_compute(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    opA: cuda_types::cusparse::cusparseOperation_t,
    opB: cuda_types::cusparse::cusparseOperation_t,
    alpha: *const ::core::ffi::c_void,
    matA: cuda_types::cusparse::cusparseConstSpMatDescr_t,
    matB: cuda_types::cusparse::cusparseConstSpMatDescr_t,
    beta: *const ::core::ffi::c_void,
    matC: cuda_types::cusparse::cusparseSpMatDescr_t,
    computeType: cuda_types::cusparse::cudaDataType,
    alg: cuda_types::cusparse::cusparseSpGEMMAlg_t,
    spgemmDescr: cuda_types::cusparse::cusparseSpGEMMDescr_t,
    bufferSize2: *mut usize,
    externalBuffer2: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseSpGEMM_compute", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(opA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&opA, "cusparseSpGEMM_compute", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(opB), ": ").as_bytes())?;
    crate::CudaDisplay::write(&opB, "cusparseSpGEMM_compute", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cusparseSpGEMM_compute", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(matA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&matA, "cusparseSpGEMM_compute", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(matB), ": ").as_bytes())?;
    crate::CudaDisplay::write(&matB, "cusparseSpGEMM_compute", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cusparseSpGEMM_compute", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(matC), ": ").as_bytes())?;
    crate::CudaDisplay::write(&matC, "cusparseSpGEMM_compute", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(computeType), ": ").as_bytes())?;
    crate::CudaDisplay::write(&computeType, "cusparseSpGEMM_compute", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alg), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alg, "cusparseSpGEMM_compute", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(spgemmDescr), ": ").as_bytes())?;
    crate::CudaDisplay::write(&spgemmDescr, "cusparseSpGEMM_compute", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bufferSize2), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bufferSize2, "cusparseSpGEMM_compute", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(externalBuffer2), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &externalBuffer2,
        "cusparseSpGEMM_compute",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseSpGEMM_copy(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    opA: cuda_types::cusparse::cusparseOperation_t,
    opB: cuda_types::cusparse::cusparseOperation_t,
    alpha: *const ::core::ffi::c_void,
    matA: cuda_types::cusparse::cusparseConstSpMatDescr_t,
    matB: cuda_types::cusparse::cusparseConstSpMatDescr_t,
    beta: *const ::core::ffi::c_void,
    matC: cuda_types::cusparse::cusparseSpMatDescr_t,
    computeType: cuda_types::cusparse::cudaDataType,
    alg: cuda_types::cusparse::cusparseSpGEMMAlg_t,
    spgemmDescr: cuda_types::cusparse::cusparseSpGEMMDescr_t,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseSpGEMM_copy", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(opA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&opA, "cusparseSpGEMM_copy", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(opB), ": ").as_bytes())?;
    crate::CudaDisplay::write(&opB, "cusparseSpGEMM_copy", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cusparseSpGEMM_copy", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(matA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&matA, "cusparseSpGEMM_copy", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(matB), ": ").as_bytes())?;
    crate::CudaDisplay::write(&matB, "cusparseSpGEMM_copy", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cusparseSpGEMM_copy", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(matC), ": ").as_bytes())?;
    crate::CudaDisplay::write(&matC, "cusparseSpGEMM_copy", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(computeType), ": ").as_bytes())?;
    crate::CudaDisplay::write(&computeType, "cusparseSpGEMM_copy", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alg), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alg, "cusparseSpGEMM_copy", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(spgemmDescr), ": ").as_bytes())?;
    crate::CudaDisplay::write(&spgemmDescr, "cusparseSpGEMM_copy", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseSpGEMMreuse_workEstimation(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    opA: cuda_types::cusparse::cusparseOperation_t,
    opB: cuda_types::cusparse::cusparseOperation_t,
    matA: cuda_types::cusparse::cusparseConstSpMatDescr_t,
    matB: cuda_types::cusparse::cusparseConstSpMatDescr_t,
    matC: cuda_types::cusparse::cusparseSpMatDescr_t,
    alg: cuda_types::cusparse::cusparseSpGEMMAlg_t,
    spgemmDescr: cuda_types::cusparse::cusparseSpGEMMDescr_t,
    bufferSize1: *mut usize,
    externalBuffer1: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &handle,
        "cusparseSpGEMMreuse_workEstimation",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(opA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &opA,
        "cusparseSpGEMMreuse_workEstimation",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(opB), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &opB,
        "cusparseSpGEMMreuse_workEstimation",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(matA), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &matA,
        "cusparseSpGEMMreuse_workEstimation",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(matB), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &matB,
        "cusparseSpGEMMreuse_workEstimation",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(matC), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &matC,
        "cusparseSpGEMMreuse_workEstimation",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alg), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &alg,
        "cusparseSpGEMMreuse_workEstimation",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(spgemmDescr), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &spgemmDescr,
        "cusparseSpGEMMreuse_workEstimation",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bufferSize1), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bufferSize1,
        "cusparseSpGEMMreuse_workEstimation",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(externalBuffer1), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &externalBuffer1,
        "cusparseSpGEMMreuse_workEstimation",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseSpGEMMreuse_nnz(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    opA: cuda_types::cusparse::cusparseOperation_t,
    opB: cuda_types::cusparse::cusparseOperation_t,
    matA: cuda_types::cusparse::cusparseConstSpMatDescr_t,
    matB: cuda_types::cusparse::cusparseConstSpMatDescr_t,
    matC: cuda_types::cusparse::cusparseSpMatDescr_t,
    alg: cuda_types::cusparse::cusparseSpGEMMAlg_t,
    spgemmDescr: cuda_types::cusparse::cusparseSpGEMMDescr_t,
    bufferSize2: *mut usize,
    externalBuffer2: *mut ::core::ffi::c_void,
    bufferSize3: *mut usize,
    externalBuffer3: *mut ::core::ffi::c_void,
    bufferSize4: *mut usize,
    externalBuffer4: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseSpGEMMreuse_nnz", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(opA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&opA, "cusparseSpGEMMreuse_nnz", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(opB), ": ").as_bytes())?;
    crate::CudaDisplay::write(&opB, "cusparseSpGEMMreuse_nnz", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(matA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&matA, "cusparseSpGEMMreuse_nnz", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(matB), ": ").as_bytes())?;
    crate::CudaDisplay::write(&matB, "cusparseSpGEMMreuse_nnz", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(matC), ": ").as_bytes())?;
    crate::CudaDisplay::write(&matC, "cusparseSpGEMMreuse_nnz", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alg), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alg, "cusparseSpGEMMreuse_nnz", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(spgemmDescr), ": ").as_bytes())?;
    crate::CudaDisplay::write(&spgemmDescr, "cusparseSpGEMMreuse_nnz", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bufferSize2), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bufferSize2, "cusparseSpGEMMreuse_nnz", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(externalBuffer2), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &externalBuffer2,
        "cusparseSpGEMMreuse_nnz",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bufferSize3), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bufferSize3, "cusparseSpGEMMreuse_nnz", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(externalBuffer3), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &externalBuffer3,
        "cusparseSpGEMMreuse_nnz",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bufferSize4), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bufferSize4, "cusparseSpGEMMreuse_nnz", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(externalBuffer4), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &externalBuffer4,
        "cusparseSpGEMMreuse_nnz",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseSpGEMMreuse_copy(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    opA: cuda_types::cusparse::cusparseOperation_t,
    opB: cuda_types::cusparse::cusparseOperation_t,
    matA: cuda_types::cusparse::cusparseConstSpMatDescr_t,
    matB: cuda_types::cusparse::cusparseConstSpMatDescr_t,
    matC: cuda_types::cusparse::cusparseSpMatDescr_t,
    alg: cuda_types::cusparse::cusparseSpGEMMAlg_t,
    spgemmDescr: cuda_types::cusparse::cusparseSpGEMMDescr_t,
    bufferSize5: *mut usize,
    externalBuffer5: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseSpGEMMreuse_copy", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(opA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&opA, "cusparseSpGEMMreuse_copy", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(opB), ": ").as_bytes())?;
    crate::CudaDisplay::write(&opB, "cusparseSpGEMMreuse_copy", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(matA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&matA, "cusparseSpGEMMreuse_copy", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(matB), ": ").as_bytes())?;
    crate::CudaDisplay::write(&matB, "cusparseSpGEMMreuse_copy", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(matC), ": ").as_bytes())?;
    crate::CudaDisplay::write(&matC, "cusparseSpGEMMreuse_copy", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alg), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alg, "cusparseSpGEMMreuse_copy", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(spgemmDescr), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &spgemmDescr,
        "cusparseSpGEMMreuse_copy",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bufferSize5), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &bufferSize5,
        "cusparseSpGEMMreuse_copy",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(externalBuffer5), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &externalBuffer5,
        "cusparseSpGEMMreuse_copy",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseSpGEMMreuse_compute(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    opA: cuda_types::cusparse::cusparseOperation_t,
    opB: cuda_types::cusparse::cusparseOperation_t,
    alpha: *const ::core::ffi::c_void,
    matA: cuda_types::cusparse::cusparseConstSpMatDescr_t,
    matB: cuda_types::cusparse::cusparseConstSpMatDescr_t,
    beta: *const ::core::ffi::c_void,
    matC: cuda_types::cusparse::cusparseSpMatDescr_t,
    computeType: cuda_types::cusparse::cudaDataType,
    alg: cuda_types::cusparse::cusparseSpGEMMAlg_t,
    spgemmDescr: cuda_types::cusparse::cusparseSpGEMMDescr_t,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseSpGEMMreuse_compute", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(opA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&opA, "cusparseSpGEMMreuse_compute", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(opB), ": ").as_bytes())?;
    crate::CudaDisplay::write(&opB, "cusparseSpGEMMreuse_compute", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cusparseSpGEMMreuse_compute", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(matA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&matA, "cusparseSpGEMMreuse_compute", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(matB), ": ").as_bytes())?;
    crate::CudaDisplay::write(&matB, "cusparseSpGEMMreuse_compute", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cusparseSpGEMMreuse_compute", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(matC), ": ").as_bytes())?;
    crate::CudaDisplay::write(&matC, "cusparseSpGEMMreuse_compute", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(computeType), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &computeType,
        "cusparseSpGEMMreuse_compute",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alg), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alg, "cusparseSpGEMMreuse_compute", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(spgemmDescr), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &spgemmDescr,
        "cusparseSpGEMMreuse_compute",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
impl crate::CudaDisplay for cuda_types::cusparse::cusparseSDDMMAlg_t {
    fn write(
        &self,
        _fn_name: &'static str,
        _index: usize,
        writer: &mut (impl std::io::Write + ?Sized),
    ) -> std::io::Result<()> {
        match self {
            &cuda_types::cusparse::cusparseSDDMMAlg_t::CUSPARSE_SDDMM_ALG_DEFAULT => {
                writer.write_all(stringify!(CUSPARSE_SDDMM_ALG_DEFAULT).as_bytes())
            }
            _ => write!(writer, "{}", self.0),
        }
    }
}
pub fn write_cusparseSDDMM_bufferSize(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    opA: cuda_types::cusparse::cusparseOperation_t,
    opB: cuda_types::cusparse::cusparseOperation_t,
    alpha: *const ::core::ffi::c_void,
    matA: cuda_types::cusparse::cusparseConstDnMatDescr_t,
    matB: cuda_types::cusparse::cusparseConstDnMatDescr_t,
    beta: *const ::core::ffi::c_void,
    matC: cuda_types::cusparse::cusparseSpMatDescr_t,
    computeType: cuda_types::cusparse::cudaDataType,
    alg: cuda_types::cusparse::cusparseSDDMMAlg_t,
    bufferSize: *mut usize,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseSDDMM_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(opA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&opA, "cusparseSDDMM_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(opB), ": ").as_bytes())?;
    crate::CudaDisplay::write(&opB, "cusparseSDDMM_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cusparseSDDMM_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(matA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&matA, "cusparseSDDMM_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(matB), ": ").as_bytes())?;
    crate::CudaDisplay::write(&matB, "cusparseSDDMM_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cusparseSDDMM_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(matC), ": ").as_bytes())?;
    crate::CudaDisplay::write(&matC, "cusparseSDDMM_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(computeType), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &computeType,
        "cusparseSDDMM_bufferSize",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alg), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alg, "cusparseSDDMM_bufferSize", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(bufferSize), ": ").as_bytes())?;
    crate::CudaDisplay::write(&bufferSize, "cusparseSDDMM_bufferSize", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseSDDMM_preprocess(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    opA: cuda_types::cusparse::cusparseOperation_t,
    opB: cuda_types::cusparse::cusparseOperation_t,
    alpha: *const ::core::ffi::c_void,
    matA: cuda_types::cusparse::cusparseConstDnMatDescr_t,
    matB: cuda_types::cusparse::cusparseConstDnMatDescr_t,
    beta: *const ::core::ffi::c_void,
    matC: cuda_types::cusparse::cusparseSpMatDescr_t,
    computeType: cuda_types::cusparse::cudaDataType,
    alg: cuda_types::cusparse::cusparseSDDMMAlg_t,
    externalBuffer: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseSDDMM_preprocess", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(opA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&opA, "cusparseSDDMM_preprocess", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(opB), ": ").as_bytes())?;
    crate::CudaDisplay::write(&opB, "cusparseSDDMM_preprocess", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cusparseSDDMM_preprocess", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(matA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&matA, "cusparseSDDMM_preprocess", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(matB), ": ").as_bytes())?;
    crate::CudaDisplay::write(&matB, "cusparseSDDMM_preprocess", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cusparseSDDMM_preprocess", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(matC), ": ").as_bytes())?;
    crate::CudaDisplay::write(&matC, "cusparseSDDMM_preprocess", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(computeType), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &computeType,
        "cusparseSDDMM_preprocess",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alg), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alg, "cusparseSDDMM_preprocess", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(externalBuffer), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &externalBuffer,
        "cusparseSDDMM_preprocess",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseSDDMM(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    opA: cuda_types::cusparse::cusparseOperation_t,
    opB: cuda_types::cusparse::cusparseOperation_t,
    alpha: *const ::core::ffi::c_void,
    matA: cuda_types::cusparse::cusparseConstDnMatDescr_t,
    matB: cuda_types::cusparse::cusparseConstDnMatDescr_t,
    beta: *const ::core::ffi::c_void,
    matC: cuda_types::cusparse::cusparseSpMatDescr_t,
    computeType: cuda_types::cusparse::cudaDataType,
    alg: cuda_types::cusparse::cusparseSDDMMAlg_t,
    externalBuffer: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseSDDMM", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(opA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&opA, "cusparseSDDMM", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(opB), ": ").as_bytes())?;
    crate::CudaDisplay::write(&opB, "cusparseSDDMM", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alpha), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alpha, "cusparseSDDMM", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(matA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&matA, "cusparseSDDMM", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(matB), ": ").as_bytes())?;
    crate::CudaDisplay::write(&matB, "cusparseSDDMM", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(beta), ": ").as_bytes())?;
    crate::CudaDisplay::write(&beta, "cusparseSDDMM", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(matC), ": ").as_bytes())?;
    crate::CudaDisplay::write(&matC, "cusparseSDDMM", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(computeType), ": ").as_bytes())?;
    crate::CudaDisplay::write(&computeType, "cusparseSDDMM", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alg), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alg, "cusparseSDDMM", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(externalBuffer), ": ").as_bytes())?;
    crate::CudaDisplay::write(&externalBuffer, "cusparseSDDMM", arg_idx, writer)?;
    writer.write_all(b")")
}
impl crate::CudaDisplay for cuda_types::cusparse::cusparseSpMMOpPlan_t {
    fn write(
        &self,
        _fn_name: &'static str,
        _index: usize,
        writer: &mut (impl std::io::Write + ?Sized),
    ) -> std::io::Result<()> {
        if self.is_null() {
            writer.write_all(b"NULL")
        } else {
            write!(writer, "{:p}", *self)
        }
    }
}
impl crate::CudaDisplay for cuda_types::cusparse::cusparseSpMMOpAlg_t {
    fn write(
        &self,
        _fn_name: &'static str,
        _index: usize,
        writer: &mut (impl std::io::Write + ?Sized),
    ) -> std::io::Result<()> {
        match self {
            &cuda_types::cusparse::cusparseSpMMOpAlg_t::CUSPARSE_SPMM_OP_ALG_DEFAULT => {
                writer.write_all(stringify!(CUSPARSE_SPMM_OP_ALG_DEFAULT).as_bytes())
            }
            _ => write!(writer, "{}", self.0),
        }
    }
}
pub fn write_cusparseSpMMOp_createPlan(
    writer: &mut (impl std::io::Write + ?Sized),
    handle: cuda_types::cusparse::cusparseHandle_t,
    plan: *mut cuda_types::cusparse::cusparseSpMMOpPlan_t,
    opA: cuda_types::cusparse::cusparseOperation_t,
    opB: cuda_types::cusparse::cusparseOperation_t,
    matA: cuda_types::cusparse::cusparseConstSpMatDescr_t,
    matB: cuda_types::cusparse::cusparseConstDnMatDescr_t,
    matC: cuda_types::cusparse::cusparseDnMatDescr_t,
    computeType: cuda_types::cusparse::cudaDataType,
    alg: cuda_types::cusparse::cusparseSpMMOpAlg_t,
    addOperationNvvmBuffer: *const ::core::ffi::c_void,
    addOperationBufferSize: usize,
    mulOperationNvvmBuffer: *const ::core::ffi::c_void,
    mulOperationBufferSize: usize,
    epilogueNvvmBuffer: *const ::core::ffi::c_void,
    epilogueBufferSize: usize,
    SpMMWorkspaceSize: *mut usize,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(handle), ": ").as_bytes())?;
    crate::CudaDisplay::write(&handle, "cusparseSpMMOp_createPlan", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(plan), ": ").as_bytes())?;
    crate::CudaDisplay::write(&plan, "cusparseSpMMOp_createPlan", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(opA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&opA, "cusparseSpMMOp_createPlan", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(opB), ": ").as_bytes())?;
    crate::CudaDisplay::write(&opB, "cusparseSpMMOp_createPlan", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(matA), ": ").as_bytes())?;
    crate::CudaDisplay::write(&matA, "cusparseSpMMOp_createPlan", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(matB), ": ").as_bytes())?;
    crate::CudaDisplay::write(&matB, "cusparseSpMMOp_createPlan", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(matC), ": ").as_bytes())?;
    crate::CudaDisplay::write(&matC, "cusparseSpMMOp_createPlan", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(computeType), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &computeType,
        "cusparseSpMMOp_createPlan",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(alg), ": ").as_bytes())?;
    crate::CudaDisplay::write(&alg, "cusparseSpMMOp_createPlan", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(addOperationNvvmBuffer), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &addOperationNvvmBuffer,
        "cusparseSpMMOp_createPlan",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(addOperationBufferSize), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &addOperationBufferSize,
        "cusparseSpMMOp_createPlan",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(mulOperationNvvmBuffer), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &mulOperationNvvmBuffer,
        "cusparseSpMMOp_createPlan",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(mulOperationBufferSize), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &mulOperationBufferSize,
        "cusparseSpMMOp_createPlan",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(epilogueNvvmBuffer), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &epilogueNvvmBuffer,
        "cusparseSpMMOp_createPlan",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(epilogueBufferSize), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &epilogueBufferSize,
        "cusparseSpMMOp_createPlan",
        arg_idx,
        writer,
    )?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(SpMMWorkspaceSize), ": ").as_bytes())?;
    crate::CudaDisplay::write(
        &SpMMWorkspaceSize,
        "cusparseSpMMOp_createPlan",
        arg_idx,
        writer,
    )?;
    writer.write_all(b")")
}
pub fn write_cusparseSpMMOp(
    writer: &mut (impl std::io::Write + ?Sized),
    plan: cuda_types::cusparse::cusparseSpMMOpPlan_t,
    externalBuffer: *mut ::core::ffi::c_void,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(plan), ": ").as_bytes())?;
    crate::CudaDisplay::write(&plan, "cusparseSpMMOp", arg_idx, writer)?;
    arg_idx += 1;
    writer.write_all(b", ")?;
    writer.write_all(concat!(stringify!(externalBuffer), ": ").as_bytes())?;
    crate::CudaDisplay::write(&externalBuffer, "cusparseSpMMOp", arg_idx, writer)?;
    writer.write_all(b")")
}
pub fn write_cusparseSpMMOp_destroyPlan(
    writer: &mut (impl std::io::Write + ?Sized),
    plan: cuda_types::cusparse::cusparseSpMMOpPlan_t,
) -> std::io::Result<()> {
    let mut arg_idx = 0usize;
    writer.write_all(b"(")?;
    writer.write_all(concat!(stringify!(plan), ": ").as_bytes())?;
    crate::CudaDisplay::write(&plan, "cusparseSpMMOp_destroyPlan", arg_idx, writer)?;
    writer.write_all(b")")
}
impl crate::CudaDisplay for cuda_types::cusparse::cusparseStatus_t {
    fn write(
        &self,
        _fn_name: &'static str,
        _index: usize,
        writer: &mut (impl std::io::Write + ?Sized),
    ) -> std::io::Result<()> {
        match self {
            Ok(()) => writer.write_all(b"CUSPARSE_STATUS_SUCCESS"),
            Err(err) => {
                match err.0.get() {
                    1 => writer.write_all("CUSPARSE_STATUS_NOT_INITIALIZED".as_bytes()),
                    2 => writer.write_all("CUSPARSE_STATUS_ALLOC_FAILED".as_bytes()),
                    3 => writer.write_all("CUSPARSE_STATUS_INVALID_VALUE".as_bytes()),
                    4 => writer.write_all("CUSPARSE_STATUS_ARCH_MISMATCH".as_bytes()),
                    5 => writer.write_all("CUSPARSE_STATUS_MAPPING_ERROR".as_bytes()),
                    6 => writer.write_all("CUSPARSE_STATUS_EXECUTION_FAILED".as_bytes()),
                    7 => writer.write_all("CUSPARSE_STATUS_INTERNAL_ERROR".as_bytes()),
                    8 => {
                        writer
                            .write_all(
                                "CUSPARSE_STATUS_MATRIX_TYPE_NOT_SUPPORTED".as_bytes(),
                            )
                    }
                    9 => writer.write_all("CUSPARSE_STATUS_ZERO_PIVOT".as_bytes()),
                    10 => writer.write_all("CUSPARSE_STATUS_NOT_SUPPORTED".as_bytes()),
                    11 => {
                        writer
                            .write_all(
                                "CUSPARSE_STATUS_INSUFFICIENT_RESOURCES".as_bytes(),
                            )
                    }
                    err => write!(writer, "{}", err),
                }
            }
        }
    }
}
