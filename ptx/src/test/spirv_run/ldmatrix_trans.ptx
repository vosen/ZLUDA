.version 6.5
.target sm_75
.address_size 64

.global .u16 values_g[256] = {
    // matrix 1
    1340, 122, 527, 693, 958, 394, 668, 432,
    646, 354, 761, 449, 252, 778, 218, 800,
    656, 493, 659, 787, 672, 203, 343, 845,
    318, 286, 206, 253, 194, 489,  29, 323,
    7,   619, 998, 930, 773, 749, 172, 465,
    937,  96,  88, 621, 909, 298, 283, 286,
    779, 290, 429, 930,  25, 687, 423, 200,
    918,  10, 515, 248, 158, 911, 270, 459,
    // matrix 2
    5832, 3864, 7868, 6538, 3898, 8685, 356, 3655,
    3398, 8529, 2866, 1432, 4078, 1674, 498, 1124,
    1576, 6490, 9895, 2152, 9668, 7349, 1948, 6239,
    7944, 7630, 9699, 1957, 3360, 2291, 3832, 7370,
    2683, 7465, 3107, 9822, 2510, 1642, 3240, 8860,
    4935, 1935, 9328, 5164, 2759, 4816, 1049, 725,
    9774, 5110, 5071, 8047, 7267, 7716, 1622, 9645,
    6382, 1210, 2742, 2248, 6789, 5282, 5653, 5407,
    // matrix 3
    29007, 29415, 25313, 44140, 49542, 21119, 55791, 42732,
    63639, 13898, 58320, 20222, 31469, 34599, 64860, 60671,
    4232, 55743, 53799, 43819, 14011, 12369, 56620, 13717,
    12500, 58864, 34285, 57337, 20956, 4977, 49296, 19215,
    46561, 64210, 44873, 35751, 15886, 14343, 966, 3529,
    6132, 57140, 60190, 10303, 43042, 2064, 22282, 61555,
    25824, 31442, 57015, 51136, 40915, 30984, 58262, 13983,
    42062, 11128, 46977, 4030, 36098, 22884, 16603, 60099,
    // matrix 4
    23344, 23968, 6079, 19797, 19404, 35408, 12579, 13888,
    40295, 40240, 3729, 42553, 24354, 14074, 50401, 54112,
    36600, 47635, 7766, 20953, 40955, 46545, 3574, 36227,
    40955, 3027, 50887, 43566, 414, 8664, 61616, 21636,
    18637, 38733, 41604, 53083, 58074, 61885, 22010, 62303,
    63436, 44576, 5954, 30529, 57190, 54828, 57290, 39307,
    635, 28677, 29798, 13493, 14433, 16122, 6113, 29240,
    22212, 16841, 35371, 29695, 2862, 26519, 51711, 38811
};
.shared .align 16 .u16 values_s[256];

.visible .entry ldmatrix_trans(
	.param .u64 output
)
{
    .reg .u64 	        out_addr;
    .reg .u32 	        tid;
    .reg .u64 	        tid_64;
    .reg .u64           values_g_addr;
    .reg .b32           values_s_addr;
    .reg .b64           values_s_addr_64;
    .reg .u32 	        temp;
    .reg .u64 	        temp_64_<2>;
    .reg .b32 	        x<4>;
    .reg .v2.b16 	    x16_<4>;

    ld.param.u64 	    out_addr, [output];

    mov.b32             tid, %tid.x;
    cvt.u64.u32         tid_64, tid;

    .reg .pred          not_first_warp;
	setp.ge.u32	        not_first_warp, tid, 32;
	@not_first_warp     bra END;

    // copy constants from global to shared
    mov.b64             values_g_addr, values_g;
    mad.lo.u64          values_g_addr, tid_64, 16, values_g_addr;
    ld.global.v2.b64    {temp_64_0, temp_64_1}, [values_g_addr];
    mov.b32             values_s_addr, values_s;
    mad.lo.u32          values_s_addr, tid, 16, values_s_addr;
    st.shared.v2.b64    [values_s_addr], {temp_64_0, temp_64_1};

    mov.b32             values_s_addr, values_s;
    mad.lo.u32          values_s_addr, tid, 16, values_s_addr;
    ldmatrix.sync.aligned.x4.trans.m8n8.shared.b16  {x0, x1, x2, x3}, [values_s_addr];

    mad.lo.u64          out_addr, tid_64, 32, out_addr;
    mov.b32             x16_0, x0;
    st.b16              [out_addr], x16_0.x;
    st.b16              [out_addr+4], x16_0.y;
    mov.b32             x16_1, x1;
    st.b16              [out_addr+8], x16_1.x;
    st.b16              [out_addr+12], x16_1.y;
    mov.b32             x16_2, x2;
    st.b16              [out_addr+16], x16_2.x;
    st.b16              [out_addr+20], x16_2.y;
    mov.b32             x16_3, x3;
    st.b16              [out_addr+24], x16_3.x;
    st.b16              [out_addr+28], x16_3.y;

END:
	ret;
}
